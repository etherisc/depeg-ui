/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Testli {
  export type D1Struct = {
    name: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type D1StructOutput = [string, BigNumber, BigNumber] & {
    name: string;
    value: BigNumber;
    createdAt: BigNumber;
  };

  export type D2Struct = {
    value: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type D2StructOutput = [BigNumber, BigNumber, string] & {
    value: BigNumber;
    createdAt: BigNumber;
    name: string;
  };
}

export interface TestliInterface extends utils.Interface {
  functions: {
    "getD1(uint8)": FunctionFragment;
    "getD2(uint8)": FunctionFragment;
    "saveD1(string,uint256)": FunctionFragment;
    "saveD2(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getD1" | "getD2" | "saveD1" | "saveD2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getD1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getD2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveD1",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveD2",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getD1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getD2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saveD1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saveD2", data: BytesLike): Result;

  events: {};
}

export interface Testli extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestliInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getD1(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Testli.D1StructOutput] & { d1: Testli.D1StructOutput }>;

    getD2(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Testli.D2StructOutput] & { d1: Testli.D2StructOutput }>;

    saveD1(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saveD2(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getD1(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Testli.D1StructOutput>;

  getD2(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Testli.D2StructOutput>;

  saveD1(
    name: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saveD2(
    name: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getD1(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Testli.D1StructOutput>;

    getD2(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Testli.D2StructOutput>;

    saveD1(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    saveD2(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getD1(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getD2(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveD1(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saveD2(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getD1(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getD2(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveD1(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saveD2(
      name: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
