/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPriceDataProvider {
  export type PriceInfoStruct = {
    id: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    compliance: PromiseOrValue<BigNumberish>;
    stability: PromiseOrValue<BigNumberish>;
    triggeredAt: PromiseOrValue<BigNumberish>;
    depeggedAt: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type PriceInfoStructOutput = [
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    price: BigNumber;
    compliance: number;
    stability: number;
    triggeredAt: BigNumber;
    depeggedAt: BigNumber;
    createdAt: BigNumber;
  };
}

export interface UsdcPriceDataProviderInterface extends utils.Interface {
  functions: {
    "CHAINLINK_HEARTBEAT_MARGIN()": FunctionFragment;
    "CHAINLINK_TEST_DESCRIPTION()": FunctionFragment;
    "CHAINLINK_TEST_VERSION()": FunctionFragment;
    "CHAINLINK_USDC_DECIMALS()": FunctionFragment;
    "CHAINLINK_USDC_USD_DEVIATION()": FunctionFragment;
    "CHAINLINK_USDC_USD_FEED_MAINNET()": FunctionFragment;
    "CHAINLINK_USDC_USD_HEARTBEAT()": FunctionFragment;
    "DEPEG_RECOVERY_PRICE()": FunctionFragment;
    "DEPEG_RECOVERY_WINDOW()": FunctionFragment;
    "DEPEG_TRIGGER_PRICE()": FunctionFragment;
    "GANACHE()": FunctionFragment;
    "GANACHE2()": FunctionFragment;
    "MAINNET()": FunctionFragment;
    "MUMBAI()": FunctionFragment;
    "PRICE_INFO_HISTORY_DURATION()": FunctionFragment;
    "USDC_CONTACT_ADDRESS()": FunctionFragment;
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "deviation()": FunctionFragment;
    "forceDepegForNextPriceInfo()": FunctionFragment;
    "getAggregatorAddress()": FunctionFragment;
    "getChainlinkAggregatorAddress()": FunctionFragment;
    "getDecimals()": FunctionFragment;
    "getDepegPriceInfo()": FunctionFragment;
    "getDepeggedAt()": FunctionFragment;
    "getDeviation()": FunctionFragment;
    "getHeartbeat()": FunctionFragment;
    "getLatestPriceInfo()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getRoundData(uint80)": FunctionFragment;
    "getToken()": FunctionFragment;
    "getTriggeredAt()": FunctionFragment;
    "hasNewPriceInfo()": FunctionFragment;
    "heartbeat()": FunctionFragment;
    "heartbeatMargin()": FunctionFragment;
    "isExceedingDeviation(uint256,uint256)": FunctionFragment;
    "isExceedingHeartbeat(uint256,uint256)": FunctionFragment;
    "isMainnet()": FunctionFragment;
    "isMainnetProvider()": FunctionFragment;
    "isTestnet()": FunctionFragment;
    "isTestnetProvider()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "owner()": FunctionFragment;
    "processLatestPriceInfo()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetDepeg()": FunctionFragment;
    "setRoundData(uint80,int256,uint256,uint256,uint80)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHAINLINK_HEARTBEAT_MARGIN"
      | "CHAINLINK_TEST_DESCRIPTION"
      | "CHAINLINK_TEST_VERSION"
      | "CHAINLINK_USDC_DECIMALS"
      | "CHAINLINK_USDC_USD_DEVIATION"
      | "CHAINLINK_USDC_USD_FEED_MAINNET"
      | "CHAINLINK_USDC_USD_HEARTBEAT"
      | "DEPEG_RECOVERY_PRICE"
      | "DEPEG_RECOVERY_WINDOW"
      | "DEPEG_TRIGGER_PRICE"
      | "GANACHE"
      | "GANACHE2"
      | "MAINNET"
      | "MUMBAI"
      | "PRICE_INFO_HISTORY_DURATION"
      | "USDC_CONTACT_ADDRESS"
      | "decimals"
      | "description"
      | "deviation"
      | "forceDepegForNextPriceInfo"
      | "getAggregatorAddress"
      | "getChainlinkAggregatorAddress"
      | "getDecimals"
      | "getDepegPriceInfo"
      | "getDepeggedAt"
      | "getDeviation"
      | "getHeartbeat"
      | "getLatestPriceInfo"
      | "getOwner"
      | "getRoundData"
      | "getToken"
      | "getTriggeredAt"
      | "hasNewPriceInfo"
      | "heartbeat"
      | "heartbeatMargin"
      | "isExceedingDeviation"
      | "isExceedingHeartbeat"
      | "isMainnet"
      | "isMainnetProvider"
      | "isTestnet"
      | "isTestnetProvider"
      | "latestRoundData"
      | "owner"
      | "processLatestPriceInfo"
      | "renounceOwnership"
      | "resetDepeg"
      | "setRoundData"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHAINLINK_HEARTBEAT_MARGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_TEST_DESCRIPTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_TEST_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_USDC_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_USDC_USD_DEVIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_USDC_USD_FEED_MAINNET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_USDC_USD_HEARTBEAT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPEG_RECOVERY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPEG_RECOVERY_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPEG_TRIGGER_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GANACHE", values?: undefined): string;
  encodeFunctionData(functionFragment: "GANACHE2", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAINNET", values?: undefined): string;
  encodeFunctionData(functionFragment: "MUMBAI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRICE_INFO_HISTORY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_CONTACT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deviation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceDepegForNextPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkAggregatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepegPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepeggedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHeartbeat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTriggeredAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasNewPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "heartbeat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "heartbeatMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isExceedingDeviation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExceedingHeartbeat",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isMainnet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isMainnetProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isTestnet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTestnetProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processLatestPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetDepeg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRoundData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CHAINLINK_HEARTBEAT_MARGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_TEST_DESCRIPTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_TEST_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_USDC_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_USDC_USD_DEVIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_USDC_USD_FEED_MAINNET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_USDC_USD_HEARTBEAT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPEG_RECOVERY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPEG_RECOVERY_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPEG_TRIGGER_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GANACHE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GANACHE2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAINNET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MUMBAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_INFO_HISTORY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_CONTACT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deviation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceDepegForNextPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkAggregatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepegPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepeggedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHeartbeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTriggeredAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasNewPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "heartbeatMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExceedingDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExceedingHeartbeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMainnet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMainnetProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTestnet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTestnetProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processLatestPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetDepeg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "LogPriceDataDepegged(uint256,uint256,uint256,uint256)": EventFragment;
    "LogPriceDataDeviationExceeded(uint256,uint256,uint256,uint256)": EventFragment;
    "LogPriceDataHeartbeatExceeded(uint256,uint256,uint256,uint256)": EventFragment;
    "LogPriceDataRecovered(uint256,uint256,uint256,uint256)": EventFragment;
    "LogPriceDataTriggered(uint256,uint256,uint256)": EventFragment;
    "LogUsdcProviderForcedDepeg(uint256,uint256)": EventFragment;
    "LogUsdcProviderResetDepeg(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogPriceDataDepegged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogPriceDataDeviationExceeded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogPriceDataHeartbeatExceeded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPriceDataRecovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPriceDataTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUsdcProviderForcedDepeg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUsdcProviderResetDepeg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogPriceDataDepeggedEventObject {
  priceId: BigNumber;
  price: BigNumber;
  triggeredAt: BigNumber;
  depeggedAt: BigNumber;
}
export type LogPriceDataDepeggedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogPriceDataDepeggedEventObject
>;

export type LogPriceDataDepeggedEventFilter =
  TypedEventFilter<LogPriceDataDepeggedEvent>;

export interface LogPriceDataDeviationExceededEventObject {
  priceId: BigNumber;
  priceDeviation: BigNumber;
  currentPrice: BigNumber;
  lastPrice: BigNumber;
}
export type LogPriceDataDeviationExceededEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogPriceDataDeviationExceededEventObject
>;

export type LogPriceDataDeviationExceededEventFilter =
  TypedEventFilter<LogPriceDataDeviationExceededEvent>;

export interface LogPriceDataHeartbeatExceededEventObject {
  priceId: BigNumber;
  timeDifference: BigNumber;
  currentCreatedAt: BigNumber;
  lastCreatedAt: BigNumber;
}
export type LogPriceDataHeartbeatExceededEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogPriceDataHeartbeatExceededEventObject
>;

export type LogPriceDataHeartbeatExceededEventFilter =
  TypedEventFilter<LogPriceDataHeartbeatExceededEvent>;

export interface LogPriceDataRecoveredEventObject {
  priceId: BigNumber;
  price: BigNumber;
  triggeredAt: BigNumber;
  recoveredAt: BigNumber;
}
export type LogPriceDataRecoveredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogPriceDataRecoveredEventObject
>;

export type LogPriceDataRecoveredEventFilter =
  TypedEventFilter<LogPriceDataRecoveredEvent>;

export interface LogPriceDataTriggeredEventObject {
  priceId: BigNumber;
  price: BigNumber;
  triggeredAt: BigNumber;
}
export type LogPriceDataTriggeredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogPriceDataTriggeredEventObject
>;

export type LogPriceDataTriggeredEventFilter =
  TypedEventFilter<LogPriceDataTriggeredEvent>;

export interface LogUsdcProviderForcedDepegEventObject {
  updatedTriggeredAt: BigNumber;
  forcedDepegAt: BigNumber;
}
export type LogUsdcProviderForcedDepegEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogUsdcProviderForcedDepegEventObject
>;

export type LogUsdcProviderForcedDepegEventFilter =
  TypedEventFilter<LogUsdcProviderForcedDepegEvent>;

export interface LogUsdcProviderResetDepegEventObject {
  resetDepegAt: BigNumber;
}
export type LogUsdcProviderResetDepegEvent = TypedEvent<
  [BigNumber],
  LogUsdcProviderResetDepegEventObject
>;

export type LogUsdcProviderResetDepegEventFilter =
  TypedEventFilter<LogUsdcProviderResetDepegEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UsdcPriceDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UsdcPriceDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHAINLINK_HEARTBEAT_MARGIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHAINLINK_TEST_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;

    CHAINLINK_TEST_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHAINLINK_USDC_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    CHAINLINK_USDC_USD_DEVIATION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CHAINLINK_USDC_USD_FEED_MAINNET(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CHAINLINK_USDC_USD_HEARTBEAT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DEPEG_RECOVERY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPEG_RECOVERY_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPEG_TRIGGER_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    GANACHE(overrides?: CallOverrides): Promise<[BigNumber]>;

    GANACHE2(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAINNET(overrides?: CallOverrides): Promise<[BigNumber]>;

    MUMBAI(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_INFO_HISTORY_DURATION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    USDC_CONTACT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    deviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceDepegForNextPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAggregatorAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { priceInfoSourceAddress: string }>;

    getChainlinkAggregatorAddress(overrides?: CallOverrides): Promise<[string]>;

    getDecimals(
      overrides?: CallOverrides
    ): Promise<[number] & { priceInfoDecimals: number }>;

    getDepegPriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [IPriceDataProvider.PriceInfoStructOutput] & {
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
      }
    >;

    getDepeggedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { depeggedAt: BigNumber }>;

    getDeviation(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deviationLevel: BigNumber }>;

    getHeartbeat(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { heartbeatSeconds: BigNumber }>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [IPriceDataProvider.PriceInfoStructOutput] & {
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
      }
    >;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    getTriggeredAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { triggeredAt: BigNumber }>;

    hasNewPriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        newInfoAvailable: boolean;
        priceId: BigNumber;
        timeDelta: BigNumber;
      }
    >;

    heartbeat(overrides?: CallOverrides): Promise<[BigNumber]>;

    heartbeatMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    isExceedingDeviation(
      price1: PromiseOrValue<BigNumberish>,
      price2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isExceeding: boolean }>;

    isExceedingHeartbeat(
      time1: PromiseOrValue<BigNumberish>,
      time2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isExceeding: boolean }>;

    isMainnet(overrides?: CallOverrides): Promise<[boolean]>;

    isMainnetProvider(overrides?: CallOverrides): Promise<[boolean]>;

    isTestnet(overrides?: CallOverrides): Promise<[boolean]>;

    isTestnetProvider(overrides?: CallOverrides): Promise<[boolean]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processLatestPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetDepeg(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoundData(
      roundId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      startedAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      answeredInRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CHAINLINK_HEARTBEAT_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

  CHAINLINK_TEST_DESCRIPTION(overrides?: CallOverrides): Promise<string>;

  CHAINLINK_TEST_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  CHAINLINK_USDC_DECIMALS(overrides?: CallOverrides): Promise<number>;

  CHAINLINK_USDC_USD_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

  CHAINLINK_USDC_USD_FEED_MAINNET(overrides?: CallOverrides): Promise<string>;

  CHAINLINK_USDC_USD_HEARTBEAT(overrides?: CallOverrides): Promise<BigNumber>;

  DEPEG_RECOVERY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  DEPEG_RECOVERY_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  DEPEG_TRIGGER_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  GANACHE(overrides?: CallOverrides): Promise<BigNumber>;

  GANACHE2(overrides?: CallOverrides): Promise<BigNumber>;

  MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

  MUMBAI(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_INFO_HISTORY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  USDC_CONTACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  deviation(overrides?: CallOverrides): Promise<BigNumber>;

  forceDepegForNextPriceInfo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAggregatorAddress(overrides?: CallOverrides): Promise<string>;

  getChainlinkAggregatorAddress(overrides?: CallOverrides): Promise<string>;

  getDecimals(overrides?: CallOverrides): Promise<number>;

  getDepegPriceInfo(
    overrides?: CallOverrides
  ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

  getDepeggedAt(overrides?: CallOverrides): Promise<BigNumber>;

  getDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  getHeartbeat(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestPriceInfo(
    overrides?: CallOverrides
  ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getRoundData(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getToken(overrides?: CallOverrides): Promise<string>;

  getTriggeredAt(overrides?: CallOverrides): Promise<BigNumber>;

  hasNewPriceInfo(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      newInfoAvailable: boolean;
      priceId: BigNumber;
      timeDelta: BigNumber;
    }
  >;

  heartbeat(overrides?: CallOverrides): Promise<BigNumber>;

  heartbeatMargin(overrides?: CallOverrides): Promise<BigNumber>;

  isExceedingDeviation(
    price1: PromiseOrValue<BigNumberish>,
    price2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExceedingHeartbeat(
    time1: PromiseOrValue<BigNumberish>,
    time2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMainnet(overrides?: CallOverrides): Promise<boolean>;

  isMainnetProvider(overrides?: CallOverrides): Promise<boolean>;

  isTestnet(overrides?: CallOverrides): Promise<boolean>;

  isTestnetProvider(overrides?: CallOverrides): Promise<boolean>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  processLatestPriceInfo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetDepeg(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoundData(
    roundId: PromiseOrValue<BigNumberish>,
    answer: PromiseOrValue<BigNumberish>,
    startedAt: PromiseOrValue<BigNumberish>,
    updatedAt: PromiseOrValue<BigNumberish>,
    answeredInRound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CHAINLINK_HEARTBEAT_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_TEST_DESCRIPTION(overrides?: CallOverrides): Promise<string>;

    CHAINLINK_TEST_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_USDC_DECIMALS(overrides?: CallOverrides): Promise<number>;

    CHAINLINK_USDC_USD_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_USDC_USD_FEED_MAINNET(overrides?: CallOverrides): Promise<string>;

    CHAINLINK_USDC_USD_HEARTBEAT(overrides?: CallOverrides): Promise<BigNumber>;

    DEPEG_RECOVERY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPEG_RECOVERY_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    DEPEG_TRIGGER_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    GANACHE(overrides?: CallOverrides): Promise<BigNumber>;

    GANACHE2(overrides?: CallOverrides): Promise<BigNumber>;

    MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    MUMBAI(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_INFO_HISTORY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_CONTACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    deviation(overrides?: CallOverrides): Promise<BigNumber>;

    forceDepegForNextPriceInfo(overrides?: CallOverrides): Promise<void>;

    getAggregatorAddress(overrides?: CallOverrides): Promise<string>;

    getChainlinkAggregatorAddress(overrides?: CallOverrides): Promise<string>;

    getDecimals(overrides?: CallOverrides): Promise<number>;

    getDepegPriceInfo(
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    getDepeggedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    getHeartbeat(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getToken(overrides?: CallOverrides): Promise<string>;

    getTriggeredAt(overrides?: CallOverrides): Promise<BigNumber>;

    hasNewPriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        newInfoAvailable: boolean;
        priceId: BigNumber;
        timeDelta: BigNumber;
      }
    >;

    heartbeat(overrides?: CallOverrides): Promise<BigNumber>;

    heartbeatMargin(overrides?: CallOverrides): Promise<BigNumber>;

    isExceedingDeviation(
      price1: PromiseOrValue<BigNumberish>,
      price2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExceedingHeartbeat(
      time1: PromiseOrValue<BigNumberish>,
      time2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMainnet(overrides?: CallOverrides): Promise<boolean>;

    isMainnetProvider(overrides?: CallOverrides): Promise<boolean>;

    isTestnet(overrides?: CallOverrides): Promise<boolean>;

    isTestnetProvider(overrides?: CallOverrides): Promise<boolean>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    processLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetDepeg(overrides?: CallOverrides): Promise<void>;

    setRoundData(
      roundId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      startedAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      answeredInRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogPriceDataDepegged(uint256,uint256,uint256,uint256)"(
      priceId?: null,
      price?: null,
      triggeredAt?: null,
      depeggedAt?: null
    ): LogPriceDataDepeggedEventFilter;
    LogPriceDataDepegged(
      priceId?: null,
      price?: null,
      triggeredAt?: null,
      depeggedAt?: null
    ): LogPriceDataDepeggedEventFilter;

    "LogPriceDataDeviationExceeded(uint256,uint256,uint256,uint256)"(
      priceId?: null,
      priceDeviation?: null,
      currentPrice?: null,
      lastPrice?: null
    ): LogPriceDataDeviationExceededEventFilter;
    LogPriceDataDeviationExceeded(
      priceId?: null,
      priceDeviation?: null,
      currentPrice?: null,
      lastPrice?: null
    ): LogPriceDataDeviationExceededEventFilter;

    "LogPriceDataHeartbeatExceeded(uint256,uint256,uint256,uint256)"(
      priceId?: null,
      timeDifference?: null,
      currentCreatedAt?: null,
      lastCreatedAt?: null
    ): LogPriceDataHeartbeatExceededEventFilter;
    LogPriceDataHeartbeatExceeded(
      priceId?: null,
      timeDifference?: null,
      currentCreatedAt?: null,
      lastCreatedAt?: null
    ): LogPriceDataHeartbeatExceededEventFilter;

    "LogPriceDataRecovered(uint256,uint256,uint256,uint256)"(
      priceId?: null,
      price?: null,
      triggeredAt?: null,
      recoveredAt?: null
    ): LogPriceDataRecoveredEventFilter;
    LogPriceDataRecovered(
      priceId?: null,
      price?: null,
      triggeredAt?: null,
      recoveredAt?: null
    ): LogPriceDataRecoveredEventFilter;

    "LogPriceDataTriggered(uint256,uint256,uint256)"(
      priceId?: null,
      price?: null,
      triggeredAt?: null
    ): LogPriceDataTriggeredEventFilter;
    LogPriceDataTriggered(
      priceId?: null,
      price?: null,
      triggeredAt?: null
    ): LogPriceDataTriggeredEventFilter;

    "LogUsdcProviderForcedDepeg(uint256,uint256)"(
      updatedTriggeredAt?: null,
      forcedDepegAt?: null
    ): LogUsdcProviderForcedDepegEventFilter;
    LogUsdcProviderForcedDepeg(
      updatedTriggeredAt?: null,
      forcedDepegAt?: null
    ): LogUsdcProviderForcedDepegEventFilter;

    "LogUsdcProviderResetDepeg(uint256)"(
      resetDepegAt?: null
    ): LogUsdcProviderResetDepegEventFilter;
    LogUsdcProviderResetDepeg(
      resetDepegAt?: null
    ): LogUsdcProviderResetDepegEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CHAINLINK_HEARTBEAT_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_TEST_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_TEST_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_USDC_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_USDC_USD_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_USDC_USD_FEED_MAINNET(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CHAINLINK_USDC_USD_HEARTBEAT(overrides?: CallOverrides): Promise<BigNumber>;

    DEPEG_RECOVERY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPEG_RECOVERY_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    DEPEG_TRIGGER_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    GANACHE(overrides?: CallOverrides): Promise<BigNumber>;

    GANACHE2(overrides?: CallOverrides): Promise<BigNumber>;

    MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    MUMBAI(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_INFO_HISTORY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_CONTACT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    deviation(overrides?: CallOverrides): Promise<BigNumber>;

    forceDepegForNextPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAggregatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkAggregatorAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getDepegPriceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getDepeggedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    getHeartbeat(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPriceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTriggeredAt(overrides?: CallOverrides): Promise<BigNumber>;

    hasNewPriceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    heartbeat(overrides?: CallOverrides): Promise<BigNumber>;

    heartbeatMargin(overrides?: CallOverrides): Promise<BigNumber>;

    isExceedingDeviation(
      price1: PromiseOrValue<BigNumberish>,
      price2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExceedingHeartbeat(
      time1: PromiseOrValue<BigNumberish>,
      time2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMainnet(overrides?: CallOverrides): Promise<BigNumber>;

    isMainnetProvider(overrides?: CallOverrides): Promise<BigNumber>;

    isTestnet(overrides?: CallOverrides): Promise<BigNumber>;

    isTestnetProvider(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processLatestPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetDepeg(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoundData(
      roundId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      startedAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      answeredInRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CHAINLINK_HEARTBEAT_MARGIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHAINLINK_TEST_DESCRIPTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHAINLINK_TEST_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHAINLINK_USDC_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHAINLINK_USDC_USD_DEVIATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHAINLINK_USDC_USD_FEED_MAINNET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHAINLINK_USDC_USD_HEARTBEAT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPEG_RECOVERY_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPEG_RECOVERY_WINDOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPEG_TRIGGER_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GANACHE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GANACHE2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAINNET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MUMBAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_INFO_HISTORY_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC_CONTACT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceDepegForNextPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAggregatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainlinkAggregatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepegPriceInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepeggedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHeartbeat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTriggeredAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasNewPriceInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heartbeat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heartbeatMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isExceedingDeviation(
      price1: PromiseOrValue<BigNumberish>,
      price2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExceedingHeartbeat(
      time1: PromiseOrValue<BigNumberish>,
      time2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMainnet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMainnetProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTestnet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTestnetProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processLatestPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetDepeg(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoundData(
      roundId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      startedAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      answeredInRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
