/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IBundle {
  export type BundleStruct = {
    id: PromiseOrValue<BigNumberish>;
    riskpoolId: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    filter: PromiseOrValue<BytesLike>;
    capital: PromiseOrValue<BigNumberish>;
    lockedCapital: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    riskpoolId: BigNumber;
    tokenId: BigNumber;
    state: number;
    filter: string;
    capital: BigNumber;
    lockedCapital: BigNumber;
    balance: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export declare namespace IPolicy {
  export type ApplicationStruct = {
    state: PromiseOrValue<BigNumberish>;
    premiumAmount: PromiseOrValue<BigNumberish>;
    sumInsuredAmount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type ApplicationStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    premiumAmount: BigNumber;
    sumInsuredAmount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export declare namespace DepegRiskpool {
  export type BundleInfoStruct = {
    bundleId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    state: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    lifetime: PromiseOrValue<BigNumberish>;
    minSumInsured: PromiseOrValue<BigNumberish>;
    maxSumInsured: PromiseOrValue<BigNumberish>;
    minDuration: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    annualPercentageReturn: PromiseOrValue<BigNumberish>;
    capitalSupportedByStaking: PromiseOrValue<BigNumberish>;
    capital: PromiseOrValue<BigNumberish>;
    lockedCapital: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleInfoStructOutput = [
    BigNumber,
    string,
    number,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    bundleId: BigNumber;
    name: string;
    state: number;
    tokenId: BigNumber;
    owner: string;
    lifetime: BigNumber;
    minSumInsured: BigNumber;
    maxSumInsured: BigNumber;
    minDuration: BigNumber;
    maxDuration: BigNumber;
    annualPercentageReturn: BigNumber;
    capitalSupportedByStaking: BigNumber;
    capital: BigNumber;
    lockedCapital: BigNumber;
    balance: BigNumber;
    createdAt: BigNumber;
  };
}

export interface DepegRiskpoolInterface extends utils.Interface {
  functions: {
    "APR_100_PERCENTAGE()": FunctionFragment;
    "DEFAULT_FILTER_DATA_STRUCTURE()": FunctionFragment;
    "EMPTY_STRING_HASH()": FunctionFragment;
    "FULL_COLLATERALIZATION_LEVEL()": FunctionFragment;
    "MAX_APR()": FunctionFragment;
    "MAX_BUNDLE_LIFETIME()": FunctionFragment;
    "MAX_POLICY_COVERAGE()": FunctionFragment;
    "MAX_POLICY_DURATION()": FunctionFragment;
    "MIN_BUNDLE_LIFETIME()": FunctionFragment;
    "MIN_POLICY_COVERAGE()": FunctionFragment;
    "MIN_POLICY_DURATION()": FunctionFragment;
    "ONE_YEAR_DURATION()": FunctionFragment;
    "activeBundles()": FunctionFragment;
    "approvalCallback()": FunctionFragment;
    "archiveCallback()": FunctionFragment;
    "bundleMatchesApplication((uint256,uint256,uint256,uint8,bytes,uint256,uint256,uint256,uint256,uint256),(uint8,uint256,uint256,bytes,uint256,uint256))": FunctionFragment;
    "bundleMatchesApplication2((uint256,uint256,uint256,uint8,bytes,uint256,uint256,uint256,uint256,uint256),(uint8,uint256,uint256,bytes,uint256,uint256))": FunctionFragment;
    "bundles()": FunctionFragment;
    "burnBundle(uint256)": FunctionFragment;
    "calculatePremium(uint256,uint256,uint256)": FunctionFragment;
    "calculateSumInsured(uint256)": FunctionFragment;
    "closeBundle(uint256)": FunctionFragment;
    "collateralizePolicy(bytes32,uint256)": FunctionFragment;
    "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createBundle(bytes,uint256)": FunctionFragment;
    "declineCallback()": FunctionFragment;
    "decodeApplicationParameterFromData(bytes)": FunctionFragment;
    "decodeBundleParamsFromFilter(bytes)": FunctionFragment;
    "defundBundle(uint256,uint256)": FunctionFragment;
    "depegPriceIsBelowProtectedDepegPrice(uint256,uint256)": FunctionFragment;
    "detailedBundleApplicationMatch(uint256,uint256,uint256,uint256,uint256,uint256,(uint8,uint256,uint256,bytes,uint256,uint256))": FunctionFragment;
    "encodeApplicationParameterAsData(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "encodeBundleParamsAsFilter(string,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "fundBundle(uint256,uint256)": FunctionFragment;
    "getActiveBundleId(uint256)": FunctionFragment;
    "getActiveBundleIds()": FunctionFragment;
    "getActivePolicies(uint256)": FunctionFragment;
    "getApr100PercentLevel()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getBundle(uint256)": FunctionFragment;
    "getBundleCapitalCap()": FunctionFragment;
    "getBundleFilter(uint256)": FunctionFragment;
    "getBundleId(uint256)": FunctionFragment;
    "getBundleInfo(uint256)": FunctionFragment;
    "getCapacity()": FunctionFragment;
    "getCapital()": FunctionFragment;
    "getChainRegistry()": FunctionFragment;
    "getCollateralizationLevel()": FunctionFragment;
    "getErc20Token()": FunctionFragment;
    "getFilterDataStructure()": FunctionFragment;
    "getFullCollateralizationLevel()": FunctionFragment;
    "getId()": FunctionFragment;
    "getMaxBundleLifetime()": FunctionFragment;
    "getMaximumNumberOfActiveBundles()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOneYearDuration()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getProtectedMinDepegPrice(uint256)": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRiskpoolCapitalCap()": FunctionFragment;
    "getStaking()": FunctionFragment;
    "getState()": FunctionFragment;
    "getSumInsuredPercentage()": FunctionFragment;
    "getSumOfSumInsuredCap()": FunctionFragment;
    "getSupportedCapitalAmount(uint256)": FunctionFragment;
    "getTotalValueLocked()": FunctionFragment;
    "getType()": FunctionFragment;
    "getWallet()": FunctionFragment;
    "isAllowAllAccountsEnabled()": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "isHigherPriorityBundle(uint256,uint256)": FunctionFragment;
    "isOracle()": FunctionFragment;
    "isProduct()": FunctionFragment;
    "isRiskpool()": FunctionFragment;
    "lockBundle(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseCallback()": FunctionFragment;
    "processPolicyPayout(bytes32,uint256)": FunctionFragment;
    "processPolicyPremium(bytes32,uint256)": FunctionFragment;
    "proposalCallback()": FunctionFragment;
    "releasePolicy(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resumeCallback()": FunctionFragment;
    "setAllowAccount(address,bool)": FunctionFragment;
    "setAllowAllAccounts(bool)": FunctionFragment;
    "setCapitalCaps(uint256,uint256)": FunctionFragment;
    "setId(uint256)": FunctionFragment;
    "setMaximumNumberOfActiveBundles(uint256)": FunctionFragment;
    "setStakingAddress(address)": FunctionFragment;
    "suspendCallback()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockBundle(uint256)": FunctionFragment;
    "unpauseCallback()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "APR_100_PERCENTAGE"
      | "DEFAULT_FILTER_DATA_STRUCTURE"
      | "EMPTY_STRING_HASH"
      | "FULL_COLLATERALIZATION_LEVEL"
      | "MAX_APR"
      | "MAX_BUNDLE_LIFETIME"
      | "MAX_POLICY_COVERAGE"
      | "MAX_POLICY_DURATION"
      | "MIN_BUNDLE_LIFETIME"
      | "MIN_POLICY_COVERAGE"
      | "MIN_POLICY_DURATION"
      | "ONE_YEAR_DURATION"
      | "activeBundles"
      | "approvalCallback"
      | "archiveCallback"
      | "bundleMatchesApplication"
      | "bundleMatchesApplication2"
      | "bundles"
      | "burnBundle"
      | "calculatePremium"
      | "calculateSumInsured"
      | "closeBundle"
      | "collateralizePolicy"
      | "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "createBundle(bytes,uint256)"
      | "declineCallback"
      | "decodeApplicationParameterFromData"
      | "decodeBundleParamsFromFilter"
      | "defundBundle"
      | "depegPriceIsBelowProtectedDepegPrice"
      | "detailedBundleApplicationMatch"
      | "encodeApplicationParameterAsData"
      | "encodeBundleParamsAsFilter"
      | "fundBundle"
      | "getActiveBundleId"
      | "getActiveBundleIds"
      | "getActivePolicies"
      | "getApr100PercentLevel"
      | "getBalance"
      | "getBundle"
      | "getBundleCapitalCap"
      | "getBundleFilter"
      | "getBundleId"
      | "getBundleInfo"
      | "getCapacity"
      | "getCapital"
      | "getChainRegistry"
      | "getCollateralizationLevel"
      | "getErc20Token"
      | "getFilterDataStructure"
      | "getFullCollateralizationLevel"
      | "getId"
      | "getMaxBundleLifetime"
      | "getMaximumNumberOfActiveBundles"
      | "getName"
      | "getOneYearDuration"
      | "getOwner"
      | "getProtectedMinDepegPrice"
      | "getRegistry"
      | "getRiskpoolCapitalCap"
      | "getStaking"
      | "getState"
      | "getSumInsuredPercentage"
      | "getSumOfSumInsuredCap"
      | "getSupportedCapitalAmount"
      | "getTotalValueLocked"
      | "getType"
      | "getWallet"
      | "isAllowAllAccountsEnabled"
      | "isAllowed"
      | "isHigherPriorityBundle"
      | "isOracle"
      | "isProduct"
      | "isRiskpool"
      | "lockBundle"
      | "owner"
      | "pauseCallback"
      | "processPolicyPayout"
      | "processPolicyPremium"
      | "proposalCallback"
      | "releasePolicy"
      | "renounceOwnership"
      | "resumeCallback"
      | "setAllowAccount"
      | "setAllowAllAccounts"
      | "setCapitalCaps"
      | "setId"
      | "setMaximumNumberOfActiveBundles"
      | "setStakingAddress"
      | "suspendCallback"
      | "transferOwnership"
      | "unlockBundle"
      | "unpauseCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "APR_100_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_FILTER_DATA_STRUCTURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMPTY_STRING_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FULL_COLLATERALIZATION_LEVEL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_APR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_BUNDLE_LIFETIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_POLICY_COVERAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_POLICY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BUNDLE_LIFETIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_POLICY_COVERAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_POLICY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_YEAR_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeBundles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "archiveCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bundleMatchesApplication",
    values: [IBundle.BundleStruct, IPolicy.ApplicationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bundleMatchesApplication2",
    values: [IBundle.BundleStruct, IPolicy.ApplicationStruct]
  ): string;
  encodeFunctionData(functionFragment: "bundles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSumInsured",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizePolicy",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBundle(bytes,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "declineCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeApplicationParameterFromData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeBundleParamsFromFilter",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "defundBundle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depegPriceIsBelowProtectedDepegPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "detailedBundleApplicationMatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IPolicy.ApplicationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeApplicationParameterAsData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBundleParamsAsFilter",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundBundle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveBundleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveBundleIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePolicies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApr100PercentLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleCapitalCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleFilter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCapital",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralizationLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getErc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFilterDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFullCollateralizationLevel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxBundleLifetime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumNumberOfActiveBundles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOneYearDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProtectedMinDepegPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolCapitalCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSumInsuredPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSumOfSumInsuredCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedCapitalAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getType", values?: undefined): string;
  encodeFunctionData(functionFragment: "getWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAllowAllAccountsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isHigherPriorityBundle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "isProduct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRiskpool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processPolicyPayout",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPolicyPremium",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasePolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowAllAccounts",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCapitalCaps",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumNumberOfActiveBundles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCallback",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "APR_100_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_FILTER_DATA_STRUCTURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMPTY_STRING_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FULL_COLLATERALIZATION_LEVEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_APR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BUNDLE_LIFETIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_POLICY_COVERAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_POLICY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BUNDLE_LIFETIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_POLICY_COVERAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_POLICY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_YEAR_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archiveCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bundleMatchesApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bundleMatchesApplication2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bundles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSumInsured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBundle(bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeApplicationParameterFromData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeBundleParamsFromFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defundBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depegPriceIsBelowProtectedDepegPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detailedBundleApplicationMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeApplicationParameterAsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeBundleParamsAsFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundBundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBundleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBundleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApr100PercentLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBundleCapitalCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleFilter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCapital", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralizationLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getErc20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFilterDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullCollateralizationLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBundleLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumNumberOfActiveBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOneYearDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProtectedMinDepegPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolCapitalCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSumInsuredPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSumOfSumInsuredCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedCapitalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowAllAccountsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHigherPriorityBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRiskpool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPolicyPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPolicyPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowAllAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCapitalCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumNumberOfActiveBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCallback",
    data: BytesLike
  ): Result;

  events: {
    "LogAllowAccountSet(address,bool)": EventFragment;
    "LogAllowAllAccountsSet(bool)": EventFragment;
    "LogBasicRiskpoolCandidateBundleAmountCheck(uint256,uint256,uint256,uint256)": EventFragment;
    "LogBasicRiskpoolCapitalCheck(uint256,uint256)": EventFragment;
    "LogBasicRiskpoolCapitalization(uint256,uint256,uint256,uint256,bool)": EventFragment;
    "LogBundleCapitalSet(uint256,uint256)": EventFragment;
    "LogBundleExpired(uint256,uint256,uint256)": EventFragment;
    "LogBundleMatchesApplication(uint256,bool,bool,bool)": EventFragment;
    "LogBundleMismatch(uint256,uint256)": EventFragment;
    "LogComponentApproved(uint256)": EventFragment;
    "LogComponentArchived(uint256)": EventFragment;
    "LogComponentCreated(bytes32,uint8,address,address)": EventFragment;
    "LogComponentDeclined(uint256)": EventFragment;
    "LogComponentPaused(uint256)": EventFragment;
    "LogComponentProposed(bytes32,uint8,address,uint256)": EventFragment;
    "LogComponentResumed(uint256)": EventFragment;
    "LogComponentStateChanged(uint256,uint8,uint8)": EventFragment;
    "LogComponentSuspended(uint256)": EventFragment;
    "LogComponentUnpaused(uint256)": EventFragment;
    "LogMaximumNumberOfActiveBundlesSet(uint256)": EventFragment;
    "LogRiskpoolApproved(uint256)": EventFragment;
    "LogRiskpoolBundleBurned(uint256)": EventFragment;
    "LogRiskpoolBundleClosed(uint256)": EventFragment;
    "LogRiskpoolBundleCreated(uint256,uint256)": EventFragment;
    "LogRiskpoolBundleDefunded(uint256,uint256)": EventFragment;
    "LogRiskpoolBundleFunded(uint256,uint256)": EventFragment;
    "LogRiskpoolBundleLocked(uint256)": EventFragment;
    "LogRiskpoolBundleMatchesPolicy(uint256,bool)": EventFragment;
    "LogRiskpoolBundleUnlocked(uint256)": EventFragment;
    "LogRiskpoolCapitalSet(uint256,uint256)": EventFragment;
    "LogRiskpoolCollateralLocked(bytes32,uint256,bool)": EventFragment;
    "LogRiskpoolCollateralReleased(bytes32,uint256)": EventFragment;
    "LogRiskpoolCreated(address)": EventFragment;
    "LogRiskpoolDeclined(uint256)": EventFragment;
    "LogRiskpoolPayoutProcessed(bytes32,uint256)": EventFragment;
    "LogRiskpoolPremiumProcessed(bytes32,uint256)": EventFragment;
    "LogRiskpoolProposed(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAllowAccountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAllowAllAccountsSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBasicRiskpoolCandidateBundleAmountCheck"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBasicRiskpoolCapitalCheck"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBasicRiskpoolCapitalization"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundleCapitalSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundleExpired"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBundleMatchesApplication"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundleMismatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentUnpaused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogMaximumNumberOfActiveBundlesSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolBundleBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolBundleClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolBundleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolBundleDefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolBundleFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolBundleLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRiskpoolBundleMatchesPolicy"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolBundleUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolCapitalSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRiskpoolCollateralLocked"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRiskpoolCollateralReleased"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolPayoutProcessed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRiskpoolPremiumProcessed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskpoolProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogAllowAccountSetEventObject {
  account: string;
  allowAccount: boolean;
}
export type LogAllowAccountSetEvent = TypedEvent<
  [string, boolean],
  LogAllowAccountSetEventObject
>;

export type LogAllowAccountSetEventFilter =
  TypedEventFilter<LogAllowAccountSetEvent>;

export interface LogAllowAllAccountsSetEventObject {
  allowAllAccounts: boolean;
}
export type LogAllowAllAccountsSetEvent = TypedEvent<
  [boolean],
  LogAllowAllAccountsSetEventObject
>;

export type LogAllowAllAccountsSetEventFilter =
  TypedEventFilter<LogAllowAllAccountsSetEvent>;

export interface LogBasicRiskpoolCandidateBundleAmountCheckEventObject {
  index: BigNumber;
  bundleId: BigNumber;
  maxAmount: BigNumber;
  collateralAmount: BigNumber;
}
export type LogBasicRiskpoolCandidateBundleAmountCheckEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogBasicRiskpoolCandidateBundleAmountCheckEventObject
>;

export type LogBasicRiskpoolCandidateBundleAmountCheckEventFilter =
  TypedEventFilter<LogBasicRiskpoolCandidateBundleAmountCheckEvent>;

export interface LogBasicRiskpoolCapitalCheckEventObject {
  activeBundles: BigNumber;
  policies: BigNumber;
}
export type LogBasicRiskpoolCapitalCheckEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBasicRiskpoolCapitalCheckEventObject
>;

export type LogBasicRiskpoolCapitalCheckEventFilter =
  TypedEventFilter<LogBasicRiskpoolCapitalCheckEvent>;

export interface LogBasicRiskpoolCapitalizationEventObject {
  activeBundles: BigNumber;
  capital: BigNumber;
  lockedCapital: BigNumber;
  collateralAmount: BigNumber;
  capacityIsAvailable: boolean;
}
export type LogBasicRiskpoolCapitalizationEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  LogBasicRiskpoolCapitalizationEventObject
>;

export type LogBasicRiskpoolCapitalizationEventFilter =
  TypedEventFilter<LogBasicRiskpoolCapitalizationEvent>;

export interface LogBundleCapitalSetEventObject {
  bundleCapitalNew: BigNumber;
  bundleCapitalOld: BigNumber;
}
export type LogBundleCapitalSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBundleCapitalSetEventObject
>;

export type LogBundleCapitalSetEventFilter =
  TypedEventFilter<LogBundleCapitalSetEvent>;

export interface LogBundleExpiredEventObject {
  bundleId: BigNumber;
  createdAt: BigNumber;
  lifetime: BigNumber;
}
export type LogBundleExpiredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogBundleExpiredEventObject
>;

export type LogBundleExpiredEventFilter =
  TypedEventFilter<LogBundleExpiredEvent>;

export interface LogBundleMatchesApplicationEventObject {
  bundleId: BigNumber;
  sumInsuredOk: boolean;
  durationOk: boolean;
  premiumOk: boolean;
}
export type LogBundleMatchesApplicationEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean],
  LogBundleMatchesApplicationEventObject
>;

export type LogBundleMatchesApplicationEventFilter =
  TypedEventFilter<LogBundleMatchesApplicationEvent>;

export interface LogBundleMismatchEventObject {
  bundleId: BigNumber;
  bundleIdRequested: BigNumber;
}
export type LogBundleMismatchEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBundleMismatchEventObject
>;

export type LogBundleMismatchEventFilter =
  TypedEventFilter<LogBundleMismatchEvent>;

export interface LogComponentApprovedEventObject {
  id: BigNumber;
}
export type LogComponentApprovedEvent = TypedEvent<
  [BigNumber],
  LogComponentApprovedEventObject
>;

export type LogComponentApprovedEventFilter =
  TypedEventFilter<LogComponentApprovedEvent>;

export interface LogComponentArchivedEventObject {
  id: BigNumber;
}
export type LogComponentArchivedEvent = TypedEvent<
  [BigNumber],
  LogComponentArchivedEventObject
>;

export type LogComponentArchivedEventFilter =
  TypedEventFilter<LogComponentArchivedEvent>;

export interface LogComponentCreatedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  registryAddress: string;
}
export type LogComponentCreatedEvent = TypedEvent<
  [string, number, string, string],
  LogComponentCreatedEventObject
>;

export type LogComponentCreatedEventFilter =
  TypedEventFilter<LogComponentCreatedEvent>;

export interface LogComponentDeclinedEventObject {
  id: BigNumber;
}
export type LogComponentDeclinedEvent = TypedEvent<
  [BigNumber],
  LogComponentDeclinedEventObject
>;

export type LogComponentDeclinedEventFilter =
  TypedEventFilter<LogComponentDeclinedEvent>;

export interface LogComponentPausedEventObject {
  id: BigNumber;
}
export type LogComponentPausedEvent = TypedEvent<
  [BigNumber],
  LogComponentPausedEventObject
>;

export type LogComponentPausedEventFilter =
  TypedEventFilter<LogComponentPausedEvent>;

export interface LogComponentProposedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  id: BigNumber;
}
export type LogComponentProposedEvent = TypedEvent<
  [string, number, string, BigNumber],
  LogComponentProposedEventObject
>;

export type LogComponentProposedEventFilter =
  TypedEventFilter<LogComponentProposedEvent>;

export interface LogComponentResumedEventObject {
  id: BigNumber;
}
export type LogComponentResumedEvent = TypedEvent<
  [BigNumber],
  LogComponentResumedEventObject
>;

export type LogComponentResumedEventFilter =
  TypedEventFilter<LogComponentResumedEvent>;

export interface LogComponentStateChangedEventObject {
  id: BigNumber;
  stateOld: number;
  stateNew: number;
}
export type LogComponentStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogComponentStateChangedEventObject
>;

export type LogComponentStateChangedEventFilter =
  TypedEventFilter<LogComponentStateChangedEvent>;

export interface LogComponentSuspendedEventObject {
  id: BigNumber;
}
export type LogComponentSuspendedEvent = TypedEvent<
  [BigNumber],
  LogComponentSuspendedEventObject
>;

export type LogComponentSuspendedEventFilter =
  TypedEventFilter<LogComponentSuspendedEvent>;

export interface LogComponentUnpausedEventObject {
  id: BigNumber;
}
export type LogComponentUnpausedEvent = TypedEvent<
  [BigNumber],
  LogComponentUnpausedEventObject
>;

export type LogComponentUnpausedEventFilter =
  TypedEventFilter<LogComponentUnpausedEvent>;

export interface LogMaximumNumberOfActiveBundlesSetEventObject {
  numberOfBundles: BigNumber;
}
export type LogMaximumNumberOfActiveBundlesSetEvent = TypedEvent<
  [BigNumber],
  LogMaximumNumberOfActiveBundlesSetEventObject
>;

export type LogMaximumNumberOfActiveBundlesSetEventFilter =
  TypedEventFilter<LogMaximumNumberOfActiveBundlesSetEvent>;

export interface LogRiskpoolApprovedEventObject {
  id: BigNumber;
}
export type LogRiskpoolApprovedEvent = TypedEvent<
  [BigNumber],
  LogRiskpoolApprovedEventObject
>;

export type LogRiskpoolApprovedEventFilter =
  TypedEventFilter<LogRiskpoolApprovedEvent>;

export interface LogRiskpoolBundleBurnedEventObject {
  bundleId: BigNumber;
}
export type LogRiskpoolBundleBurnedEvent = TypedEvent<
  [BigNumber],
  LogRiskpoolBundleBurnedEventObject
>;

export type LogRiskpoolBundleBurnedEventFilter =
  TypedEventFilter<LogRiskpoolBundleBurnedEvent>;

export interface LogRiskpoolBundleClosedEventObject {
  bundleId: BigNumber;
}
export type LogRiskpoolBundleClosedEvent = TypedEvent<
  [BigNumber],
  LogRiskpoolBundleClosedEventObject
>;

export type LogRiskpoolBundleClosedEventFilter =
  TypedEventFilter<LogRiskpoolBundleClosedEvent>;

export interface LogRiskpoolBundleCreatedEventObject {
  bundleId: BigNumber;
  amount: BigNumber;
}
export type LogRiskpoolBundleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogRiskpoolBundleCreatedEventObject
>;

export type LogRiskpoolBundleCreatedEventFilter =
  TypedEventFilter<LogRiskpoolBundleCreatedEvent>;

export interface LogRiskpoolBundleDefundedEventObject {
  bundleId: BigNumber;
  amount: BigNumber;
}
export type LogRiskpoolBundleDefundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogRiskpoolBundleDefundedEventObject
>;

export type LogRiskpoolBundleDefundedEventFilter =
  TypedEventFilter<LogRiskpoolBundleDefundedEvent>;

export interface LogRiskpoolBundleFundedEventObject {
  bundleId: BigNumber;
  amount: BigNumber;
}
export type LogRiskpoolBundleFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogRiskpoolBundleFundedEventObject
>;

export type LogRiskpoolBundleFundedEventFilter =
  TypedEventFilter<LogRiskpoolBundleFundedEvent>;

export interface LogRiskpoolBundleLockedEventObject {
  bundleId: BigNumber;
}
export type LogRiskpoolBundleLockedEvent = TypedEvent<
  [BigNumber],
  LogRiskpoolBundleLockedEventObject
>;

export type LogRiskpoolBundleLockedEventFilter =
  TypedEventFilter<LogRiskpoolBundleLockedEvent>;

export interface LogRiskpoolBundleMatchesPolicyEventObject {
  bundleId: BigNumber;
  isMatching: boolean;
}
export type LogRiskpoolBundleMatchesPolicyEvent = TypedEvent<
  [BigNumber, boolean],
  LogRiskpoolBundleMatchesPolicyEventObject
>;

export type LogRiskpoolBundleMatchesPolicyEventFilter =
  TypedEventFilter<LogRiskpoolBundleMatchesPolicyEvent>;

export interface LogRiskpoolBundleUnlockedEventObject {
  bundleId: BigNumber;
}
export type LogRiskpoolBundleUnlockedEvent = TypedEvent<
  [BigNumber],
  LogRiskpoolBundleUnlockedEventObject
>;

export type LogRiskpoolBundleUnlockedEventFilter =
  TypedEventFilter<LogRiskpoolBundleUnlockedEvent>;

export interface LogRiskpoolCapitalSetEventObject {
  poolCapitalNew: BigNumber;
  poolCapitalOld: BigNumber;
}
export type LogRiskpoolCapitalSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogRiskpoolCapitalSetEventObject
>;

export type LogRiskpoolCapitalSetEventFilter =
  TypedEventFilter<LogRiskpoolCapitalSetEvent>;

export interface LogRiskpoolCollateralLockedEventObject {
  processId: string;
  collateralAmount: BigNumber;
  isSecured: boolean;
}
export type LogRiskpoolCollateralLockedEvent = TypedEvent<
  [string, BigNumber, boolean],
  LogRiskpoolCollateralLockedEventObject
>;

export type LogRiskpoolCollateralLockedEventFilter =
  TypedEventFilter<LogRiskpoolCollateralLockedEvent>;

export interface LogRiskpoolCollateralReleasedEventObject {
  processId: string;
  collateralAmount: BigNumber;
}
export type LogRiskpoolCollateralReleasedEvent = TypedEvent<
  [string, BigNumber],
  LogRiskpoolCollateralReleasedEventObject
>;

export type LogRiskpoolCollateralReleasedEventFilter =
  TypedEventFilter<LogRiskpoolCollateralReleasedEvent>;

export interface LogRiskpoolCreatedEventObject {
  riskpoolAddress: string;
}
export type LogRiskpoolCreatedEvent = TypedEvent<
  [string],
  LogRiskpoolCreatedEventObject
>;

export type LogRiskpoolCreatedEventFilter =
  TypedEventFilter<LogRiskpoolCreatedEvent>;

export interface LogRiskpoolDeclinedEventObject {
  id: BigNumber;
}
export type LogRiskpoolDeclinedEvent = TypedEvent<
  [BigNumber],
  LogRiskpoolDeclinedEventObject
>;

export type LogRiskpoolDeclinedEventFilter =
  TypedEventFilter<LogRiskpoolDeclinedEvent>;

export interface LogRiskpoolPayoutProcessedEventObject {
  processId: string;
  amount: BigNumber;
}
export type LogRiskpoolPayoutProcessedEvent = TypedEvent<
  [string, BigNumber],
  LogRiskpoolPayoutProcessedEventObject
>;

export type LogRiskpoolPayoutProcessedEventFilter =
  TypedEventFilter<LogRiskpoolPayoutProcessedEvent>;

export interface LogRiskpoolPremiumProcessedEventObject {
  processId: string;
  amount: BigNumber;
}
export type LogRiskpoolPremiumProcessedEvent = TypedEvent<
  [string, BigNumber],
  LogRiskpoolPremiumProcessedEventObject
>;

export type LogRiskpoolPremiumProcessedEventFilter =
  TypedEventFilter<LogRiskpoolPremiumProcessedEvent>;

export interface LogRiskpoolProposedEventObject {
  id: BigNumber;
}
export type LogRiskpoolProposedEvent = TypedEvent<
  [BigNumber],
  LogRiskpoolProposedEventObject
>;

export type LogRiskpoolProposedEventFilter =
  TypedEventFilter<LogRiskpoolProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DepegRiskpool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DepegRiskpoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    APR_100_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_FILTER_DATA_STRUCTURE(overrides?: CallOverrides): Promise<[string]>;

    EMPTY_STRING_HASH(overrides?: CallOverrides): Promise<[string]>;

    FULL_COLLATERALIZATION_LEVEL(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_APR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_POLICY_COVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_POLICY_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_POLICY_COVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_POLICY_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeBundles(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bundleMatchesApplication(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isMatching: boolean }>;

    bundleMatchesApplication2(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bundles(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculatePremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premiumAmount: BigNumber }>;

    calculateSumInsured(
      protectedBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sumInsured: BigNumber }>;

    closeBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateralizePolicy(
      processId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      policyMinProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMaxProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMinDuration: PromiseOrValue<BigNumberish>,
      policyMaxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createBundle(bytes,uint256)"(
      filter: PromiseOrValue<BytesLike>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decodeApplicationParameterFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        wallet: string;
        protectedBalance: BigNumber;
        duration: BigNumber;
        bundleId: BigNumber;
        maxPremium: BigNumber;
      }
    >;

    decodeBundleParamsFromFilter(
      filter: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        lifetime: BigNumber;
        minSumInsured: BigNumber;
        maxSumInsured: BigNumber;
        minDuration: BigNumber;
        maxDuration: BigNumber;
        annualPercentageReturn: BigNumber;
      }
    >;

    defundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depegPriceIsBelowProtectedDepegPrice(
      depegPrice: PromiseOrValue<BigNumberish>,
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isBelowProtectedPrice: boolean }>;

    detailedBundleApplicationMatch(
      bundleId: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      application: IPolicy.ApplicationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeApplicationParameterAsData(
      wallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    encodeBundleParamsAsFilter(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { filter: string }>;

    fundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bundleId: BigNumber }>;

    getActiveBundleIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { activeBundleIds: BigNumber[] }>;

    getActivePolicies(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { activePolicies: BigNumber }>;

    getApr100PercentLevel(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { apr100PercentLevel: BigNumber }>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBundle(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBundle.BundleStructOutput]>;

    getBundleCapitalCap(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bundleCapitalCap: BigNumber }>;

    getBundleFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { filter: string }>;

    getBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bundleId: BigNumber }>;

    getBundleInfo(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [DepegRiskpool.BundleInfoStructOutput] & {
        info: DepegRiskpool.BundleInfoStructOutput;
      }
    >;

    getCapacity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCapital(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChainRegistry(overrides?: CallOverrides): Promise<[string]>;

    getCollateralizationLevel(overrides?: CallOverrides): Promise<[BigNumber]>;

    getErc20Token(overrides?: CallOverrides): Promise<[string]>;

    getFilterDataStructure(overrides?: CallOverrides): Promise<[string]>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxBundleLifetime(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxBundleLifetime: BigNumber }>;

    getMaximumNumberOfActiveBundles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maximumNumberOfActiveBundles: BigNumber }>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getOneYearDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yearDuration: BigNumber }>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getProtectedMinDepegPrice(
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { protectedDepegPrice: BigNumber }>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRiskpoolCapitalCap(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { poolCapitalCap: BigNumber }>;

    getStaking(overrides?: CallOverrides): Promise<[string]>;

    getState(overrides?: CallOverrides): Promise<[number]>;

    getSumInsuredPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sumInsuredPercentage: BigNumber }>;

    getSumOfSumInsuredCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSupportedCapitalAmount(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { capitalCap: BigNumber }>;

    getTotalValueLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getType(overrides?: CallOverrides): Promise<[number]>;

    getWallet(overrides?: CallOverrides): Promise<[string]>;

    isAllowAllAccountsEnabled(
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowAllAccounts: boolean }>;

    isAllowed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    isHigherPriorityBundle(
      firstBundleId: PromiseOrValue<BigNumberish>,
      secondBundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { firstBundleIsHigherPriority: boolean }>;

    isOracle(overrides?: CallOverrides): Promise<[boolean]>;

    isProduct(overrides?: CallOverrides): Promise<[boolean]>;

    isRiskpool(overrides?: CallOverrides): Promise<[boolean]>;

    lockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPolicyPayout(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPolicyPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releasePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowAccount(
      account: PromiseOrValue<string>,
      allowAccount: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowAllAccounts(
      allowAllAccounts: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCapitalCaps(
      poolCapitalCap: PromiseOrValue<BigNumberish>,
      bundleCapitalCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaximumNumberOfActiveBundles(
      maximumNumberOfActiveBundles: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingAddress(
      stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  APR_100_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_FILTER_DATA_STRUCTURE(overrides?: CallOverrides): Promise<string>;

  EMPTY_STRING_HASH(overrides?: CallOverrides): Promise<string>;

  FULL_COLLATERALIZATION_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_APR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_POLICY_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_POLICY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_POLICY_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_POLICY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  activeBundles(overrides?: CallOverrides): Promise<BigNumber>;

  approvalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archiveCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bundleMatchesApplication(
    bundle: IBundle.BundleStruct,
    application: IPolicy.ApplicationStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bundleMatchesApplication2(
    bundle: IBundle.BundleStruct,
    application: IPolicy.ApplicationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bundles(overrides?: CallOverrides): Promise<BigNumber>;

  burnBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculatePremium(
    sumInsured: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    annualPercentageReturn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSumInsured(
    protectedBalance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateralizePolicy(
    processId: PromiseOrValue<BytesLike>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    name: PromiseOrValue<string>,
    lifetime: PromiseOrValue<BigNumberish>,
    policyMinProtectedBalance: PromiseOrValue<BigNumberish>,
    policyMaxProtectedBalance: PromiseOrValue<BigNumberish>,
    policyMinDuration: PromiseOrValue<BigNumberish>,
    policyMaxDuration: PromiseOrValue<BigNumberish>,
    annualPercentageReturn: PromiseOrValue<BigNumberish>,
    initialAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createBundle(bytes,uint256)"(
    filter: PromiseOrValue<BytesLike>,
    initialAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decodeApplicationParameterFromData(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      wallet: string;
      protectedBalance: BigNumber;
      duration: BigNumber;
      bundleId: BigNumber;
      maxPremium: BigNumber;
    }
  >;

  decodeBundleParamsFromFilter(
    filter: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      lifetime: BigNumber;
      minSumInsured: BigNumber;
      maxSumInsured: BigNumber;
      minDuration: BigNumber;
      maxDuration: BigNumber;
      annualPercentageReturn: BigNumber;
    }
  >;

  defundBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depegPriceIsBelowProtectedDepegPrice(
    depegPrice: PromiseOrValue<BigNumberish>,
    targetPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  detailedBundleApplicationMatch(
    bundleId: PromiseOrValue<BigNumberish>,
    minSumInsured: PromiseOrValue<BigNumberish>,
    maxSumInsured: PromiseOrValue<BigNumberish>,
    minDuration: PromiseOrValue<BigNumberish>,
    maxDuration: PromiseOrValue<BigNumberish>,
    annualPercentageReturn: PromiseOrValue<BigNumberish>,
    application: IPolicy.ApplicationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeApplicationParameterAsData(
    wallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    maxPremium: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeBundleParamsAsFilter(
    name: PromiseOrValue<string>,
    lifetime: PromiseOrValue<BigNumberish>,
    minSumInsured: PromiseOrValue<BigNumberish>,
    maxSumInsured: PromiseOrValue<BigNumberish>,
    minDuration: PromiseOrValue<BigNumberish>,
    maxDuration: PromiseOrValue<BigNumberish>,
    annualPercentageReturn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  fundBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveBundleId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveBundleIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getActivePolicies(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApr100PercentLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getBundle(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBundle.BundleStructOutput>;

  getBundleCapitalCap(overrides?: CallOverrides): Promise<BigNumber>;

  getBundleFilter(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBundleId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBundleInfo(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DepegRiskpool.BundleInfoStructOutput>;

  getCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  getCapital(overrides?: CallOverrides): Promise<BigNumber>;

  getChainRegistry(overrides?: CallOverrides): Promise<string>;

  getCollateralizationLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getErc20Token(overrides?: CallOverrides): Promise<string>;

  getFilterDataStructure(overrides?: CallOverrides): Promise<string>;

  getFullCollateralizationLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxBundleLifetime(overrides?: CallOverrides): Promise<BigNumber>;

  getMaximumNumberOfActiveBundles(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  getOneYearDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getProtectedMinDepegPrice(
    targetPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getRiskpoolCapitalCap(overrides?: CallOverrides): Promise<BigNumber>;

  getStaking(overrides?: CallOverrides): Promise<string>;

  getState(overrides?: CallOverrides): Promise<number>;

  getSumInsuredPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getSumOfSumInsuredCap(overrides?: CallOverrides): Promise<BigNumber>;

  getSupportedCapitalAmount(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

  getType(overrides?: CallOverrides): Promise<number>;

  getWallet(overrides?: CallOverrides): Promise<string>;

  isAllowAllAccountsEnabled(overrides?: CallOverrides): Promise<boolean>;

  isAllowed(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isHigherPriorityBundle(
    firstBundleId: PromiseOrValue<BigNumberish>,
    secondBundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOracle(overrides?: CallOverrides): Promise<boolean>;

  isProduct(overrides?: CallOverrides): Promise<boolean>;

  isRiskpool(overrides?: CallOverrides): Promise<boolean>;

  lockBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPolicyPayout(
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPolicyPremium(
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releasePolicy(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resumeCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowAccount(
    account: PromiseOrValue<string>,
    allowAccount: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowAllAccounts(
    allowAllAccounts: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCapitalCaps(
    poolCapitalCap: PromiseOrValue<BigNumberish>,
    bundleCapitalCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setId(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaximumNumberOfActiveBundles(
    maximumNumberOfActiveBundles: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingAddress(
    stakingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    APR_100_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_FILTER_DATA_STRUCTURE(overrides?: CallOverrides): Promise<string>;

    EMPTY_STRING_HASH(overrides?: CallOverrides): Promise<string>;

    FULL_COLLATERALIZATION_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_POLICY_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_POLICY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_POLICY_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_POLICY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    activeBundles(overrides?: CallOverrides): Promise<BigNumber>;

    approvalCallback(overrides?: CallOverrides): Promise<void>;

    archiveCallback(overrides?: CallOverrides): Promise<void>;

    bundleMatchesApplication(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bundleMatchesApplication2(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    burnBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSumInsured(
      protectedBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralizePolicy(
      processId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      policyMinProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMaxProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMinDuration: PromiseOrValue<BigNumberish>,
      policyMaxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createBundle(bytes,uint256)"(
      filter: PromiseOrValue<BytesLike>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    declineCallback(overrides?: CallOverrides): Promise<void>;

    decodeApplicationParameterFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        wallet: string;
        protectedBalance: BigNumber;
        duration: BigNumber;
        bundleId: BigNumber;
        maxPremium: BigNumber;
      }
    >;

    decodeBundleParamsFromFilter(
      filter: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        lifetime: BigNumber;
        minSumInsured: BigNumber;
        maxSumInsured: BigNumber;
        minDuration: BigNumber;
        maxDuration: BigNumber;
        annualPercentageReturn: BigNumber;
      }
    >;

    defundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depegPriceIsBelowProtectedDepegPrice(
      depegPrice: PromiseOrValue<BigNumberish>,
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    detailedBundleApplicationMatch(
      bundleId: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      application: IPolicy.ApplicationStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    encodeApplicationParameterAsData(
      wallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeBundleParamsAsFilter(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveBundleIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getActivePolicies(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApr100PercentLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBundle(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBundle.BundleStructOutput>;

    getBundleCapitalCap(overrides?: CallOverrides): Promise<BigNumber>;

    getBundleFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleInfo(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DepegRiskpool.BundleInfoStructOutput>;

    getCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    getCapital(overrides?: CallOverrides): Promise<BigNumber>;

    getChainRegistry(overrides?: CallOverrides): Promise<string>;

    getCollateralizationLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getErc20Token(overrides?: CallOverrides): Promise<string>;

    getFilterDataStructure(overrides?: CallOverrides): Promise<string>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBundleLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumNumberOfActiveBundles(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    getOneYearDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getProtectedMinDepegPrice(
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getRiskpoolCapitalCap(overrides?: CallOverrides): Promise<BigNumber>;

    getStaking(overrides?: CallOverrides): Promise<string>;

    getState(overrides?: CallOverrides): Promise<number>;

    getSumInsuredPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getSumOfSumInsuredCap(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedCapitalAmount(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getType(overrides?: CallOverrides): Promise<number>;

    getWallet(overrides?: CallOverrides): Promise<string>;

    isAllowAllAccountsEnabled(overrides?: CallOverrides): Promise<boolean>;

    isAllowed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isHigherPriorityBundle(
      firstBundleId: PromiseOrValue<BigNumberish>,
      secondBundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOracle(overrides?: CallOverrides): Promise<boolean>;

    isProduct(overrides?: CallOverrides): Promise<boolean>;

    isRiskpool(overrides?: CallOverrides): Promise<boolean>;

    lockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseCallback(overrides?: CallOverrides): Promise<void>;

    processPolicyPayout(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    processPolicyPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCallback(overrides?: CallOverrides): Promise<void>;

    releasePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resumeCallback(overrides?: CallOverrides): Promise<void>;

    setAllowAccount(
      account: PromiseOrValue<string>,
      allowAccount: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowAllAccounts(
      allowAllAccounts: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCapitalCaps(
      poolCapitalCap: PromiseOrValue<BigNumberish>,
      bundleCapitalCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaximumNumberOfActiveBundles(
      maximumNumberOfActiveBundles: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingAddress(
      stakingAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    suspendCallback(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseCallback(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogAllowAccountSet(address,bool)"(
      account?: null,
      allowAccount?: null
    ): LogAllowAccountSetEventFilter;
    LogAllowAccountSet(
      account?: null,
      allowAccount?: null
    ): LogAllowAccountSetEventFilter;

    "LogAllowAllAccountsSet(bool)"(
      allowAllAccounts?: null
    ): LogAllowAllAccountsSetEventFilter;
    LogAllowAllAccountsSet(
      allowAllAccounts?: null
    ): LogAllowAllAccountsSetEventFilter;

    "LogBasicRiskpoolCandidateBundleAmountCheck(uint256,uint256,uint256,uint256)"(
      index?: null,
      bundleId?: null,
      maxAmount?: null,
      collateralAmount?: null
    ): LogBasicRiskpoolCandidateBundleAmountCheckEventFilter;
    LogBasicRiskpoolCandidateBundleAmountCheck(
      index?: null,
      bundleId?: null,
      maxAmount?: null,
      collateralAmount?: null
    ): LogBasicRiskpoolCandidateBundleAmountCheckEventFilter;

    "LogBasicRiskpoolCapitalCheck(uint256,uint256)"(
      activeBundles?: null,
      policies?: null
    ): LogBasicRiskpoolCapitalCheckEventFilter;
    LogBasicRiskpoolCapitalCheck(
      activeBundles?: null,
      policies?: null
    ): LogBasicRiskpoolCapitalCheckEventFilter;

    "LogBasicRiskpoolCapitalization(uint256,uint256,uint256,uint256,bool)"(
      activeBundles?: null,
      capital?: null,
      lockedCapital?: null,
      collateralAmount?: null,
      capacityIsAvailable?: null
    ): LogBasicRiskpoolCapitalizationEventFilter;
    LogBasicRiskpoolCapitalization(
      activeBundles?: null,
      capital?: null,
      lockedCapital?: null,
      collateralAmount?: null,
      capacityIsAvailable?: null
    ): LogBasicRiskpoolCapitalizationEventFilter;

    "LogBundleCapitalSet(uint256,uint256)"(
      bundleCapitalNew?: null,
      bundleCapitalOld?: null
    ): LogBundleCapitalSetEventFilter;
    LogBundleCapitalSet(
      bundleCapitalNew?: null,
      bundleCapitalOld?: null
    ): LogBundleCapitalSetEventFilter;

    "LogBundleExpired(uint256,uint256,uint256)"(
      bundleId?: null,
      createdAt?: null,
      lifetime?: null
    ): LogBundleExpiredEventFilter;
    LogBundleExpired(
      bundleId?: null,
      createdAt?: null,
      lifetime?: null
    ): LogBundleExpiredEventFilter;

    "LogBundleMatchesApplication(uint256,bool,bool,bool)"(
      bundleId?: null,
      sumInsuredOk?: null,
      durationOk?: null,
      premiumOk?: null
    ): LogBundleMatchesApplicationEventFilter;
    LogBundleMatchesApplication(
      bundleId?: null,
      sumInsuredOk?: null,
      durationOk?: null,
      premiumOk?: null
    ): LogBundleMatchesApplicationEventFilter;

    "LogBundleMismatch(uint256,uint256)"(
      bundleId?: null,
      bundleIdRequested?: null
    ): LogBundleMismatchEventFilter;
    LogBundleMismatch(
      bundleId?: null,
      bundleIdRequested?: null
    ): LogBundleMismatchEventFilter;

    "LogComponentApproved(uint256)"(id?: null): LogComponentApprovedEventFilter;
    LogComponentApproved(id?: null): LogComponentApprovedEventFilter;

    "LogComponentArchived(uint256)"(id?: null): LogComponentArchivedEventFilter;
    LogComponentArchived(id?: null): LogComponentArchivedEventFilter;

    "LogComponentCreated(bytes32,uint8,address,address)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;
    LogComponentCreated(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;

    "LogComponentDeclined(uint256)"(id?: null): LogComponentDeclinedEventFilter;
    LogComponentDeclined(id?: null): LogComponentDeclinedEventFilter;

    "LogComponentPaused(uint256)"(id?: null): LogComponentPausedEventFilter;
    LogComponentPaused(id?: null): LogComponentPausedEventFilter;

    "LogComponentProposed(bytes32,uint8,address,uint256)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;
    LogComponentProposed(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;

    "LogComponentResumed(uint256)"(id?: null): LogComponentResumedEventFilter;
    LogComponentResumed(id?: null): LogComponentResumedEventFilter;

    "LogComponentStateChanged(uint256,uint8,uint8)"(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;
    LogComponentStateChanged(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;

    "LogComponentSuspended(uint256)"(
      id?: null
    ): LogComponentSuspendedEventFilter;
    LogComponentSuspended(id?: null): LogComponentSuspendedEventFilter;

    "LogComponentUnpaused(uint256)"(id?: null): LogComponentUnpausedEventFilter;
    LogComponentUnpaused(id?: null): LogComponentUnpausedEventFilter;

    "LogMaximumNumberOfActiveBundlesSet(uint256)"(
      numberOfBundles?: null
    ): LogMaximumNumberOfActiveBundlesSetEventFilter;
    LogMaximumNumberOfActiveBundlesSet(
      numberOfBundles?: null
    ): LogMaximumNumberOfActiveBundlesSetEventFilter;

    "LogRiskpoolApproved(uint256)"(id?: null): LogRiskpoolApprovedEventFilter;
    LogRiskpoolApproved(id?: null): LogRiskpoolApprovedEventFilter;

    "LogRiskpoolBundleBurned(uint256)"(
      bundleId?: null
    ): LogRiskpoolBundleBurnedEventFilter;
    LogRiskpoolBundleBurned(
      bundleId?: null
    ): LogRiskpoolBundleBurnedEventFilter;

    "LogRiskpoolBundleClosed(uint256)"(
      bundleId?: null
    ): LogRiskpoolBundleClosedEventFilter;
    LogRiskpoolBundleClosed(
      bundleId?: null
    ): LogRiskpoolBundleClosedEventFilter;

    "LogRiskpoolBundleCreated(uint256,uint256)"(
      bundleId?: null,
      amount?: null
    ): LogRiskpoolBundleCreatedEventFilter;
    LogRiskpoolBundleCreated(
      bundleId?: null,
      amount?: null
    ): LogRiskpoolBundleCreatedEventFilter;

    "LogRiskpoolBundleDefunded(uint256,uint256)"(
      bundleId?: null,
      amount?: null
    ): LogRiskpoolBundleDefundedEventFilter;
    LogRiskpoolBundleDefunded(
      bundleId?: null,
      amount?: null
    ): LogRiskpoolBundleDefundedEventFilter;

    "LogRiskpoolBundleFunded(uint256,uint256)"(
      bundleId?: null,
      amount?: null
    ): LogRiskpoolBundleFundedEventFilter;
    LogRiskpoolBundleFunded(
      bundleId?: null,
      amount?: null
    ): LogRiskpoolBundleFundedEventFilter;

    "LogRiskpoolBundleLocked(uint256)"(
      bundleId?: null
    ): LogRiskpoolBundleLockedEventFilter;
    LogRiskpoolBundleLocked(
      bundleId?: null
    ): LogRiskpoolBundleLockedEventFilter;

    "LogRiskpoolBundleMatchesPolicy(uint256,bool)"(
      bundleId?: null,
      isMatching?: null
    ): LogRiskpoolBundleMatchesPolicyEventFilter;
    LogRiskpoolBundleMatchesPolicy(
      bundleId?: null,
      isMatching?: null
    ): LogRiskpoolBundleMatchesPolicyEventFilter;

    "LogRiskpoolBundleUnlocked(uint256)"(
      bundleId?: null
    ): LogRiskpoolBundleUnlockedEventFilter;
    LogRiskpoolBundleUnlocked(
      bundleId?: null
    ): LogRiskpoolBundleUnlockedEventFilter;

    "LogRiskpoolCapitalSet(uint256,uint256)"(
      poolCapitalNew?: null,
      poolCapitalOld?: null
    ): LogRiskpoolCapitalSetEventFilter;
    LogRiskpoolCapitalSet(
      poolCapitalNew?: null,
      poolCapitalOld?: null
    ): LogRiskpoolCapitalSetEventFilter;

    "LogRiskpoolCollateralLocked(bytes32,uint256,bool)"(
      processId?: null,
      collateralAmount?: null,
      isSecured?: null
    ): LogRiskpoolCollateralLockedEventFilter;
    LogRiskpoolCollateralLocked(
      processId?: null,
      collateralAmount?: null,
      isSecured?: null
    ): LogRiskpoolCollateralLockedEventFilter;

    "LogRiskpoolCollateralReleased(bytes32,uint256)"(
      processId?: null,
      collateralAmount?: null
    ): LogRiskpoolCollateralReleasedEventFilter;
    LogRiskpoolCollateralReleased(
      processId?: null,
      collateralAmount?: null
    ): LogRiskpoolCollateralReleasedEventFilter;

    "LogRiskpoolCreated(address)"(
      riskpoolAddress?: null
    ): LogRiskpoolCreatedEventFilter;
    LogRiskpoolCreated(riskpoolAddress?: null): LogRiskpoolCreatedEventFilter;

    "LogRiskpoolDeclined(uint256)"(id?: null): LogRiskpoolDeclinedEventFilter;
    LogRiskpoolDeclined(id?: null): LogRiskpoolDeclinedEventFilter;

    "LogRiskpoolPayoutProcessed(bytes32,uint256)"(
      processId?: null,
      amount?: null
    ): LogRiskpoolPayoutProcessedEventFilter;
    LogRiskpoolPayoutProcessed(
      processId?: null,
      amount?: null
    ): LogRiskpoolPayoutProcessedEventFilter;

    "LogRiskpoolPremiumProcessed(bytes32,uint256)"(
      processId?: null,
      amount?: null
    ): LogRiskpoolPremiumProcessedEventFilter;
    LogRiskpoolPremiumProcessed(
      processId?: null,
      amount?: null
    ): LogRiskpoolPremiumProcessedEventFilter;

    "LogRiskpoolProposed(uint256)"(id?: null): LogRiskpoolProposedEventFilter;
    LogRiskpoolProposed(id?: null): LogRiskpoolProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    APR_100_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_FILTER_DATA_STRUCTURE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EMPTY_STRING_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    FULL_COLLATERALIZATION_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_POLICY_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_POLICY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BUNDLE_LIFETIME(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_POLICY_COVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_POLICY_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    activeBundles(overrides?: CallOverrides): Promise<BigNumber>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bundleMatchesApplication(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bundleMatchesApplication2(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    burnBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculatePremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSumInsured(
      protectedBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateralizePolicy(
      processId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      policyMinProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMaxProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMinDuration: PromiseOrValue<BigNumberish>,
      policyMaxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createBundle(bytes,uint256)"(
      filter: PromiseOrValue<BytesLike>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decodeApplicationParameterFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeBundleParamsFromFilter(
      filter: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depegPriceIsBelowProtectedDepegPrice(
      depegPrice: PromiseOrValue<BigNumberish>,
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    detailedBundleApplicationMatch(
      bundleId: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      application: IPolicy.ApplicationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeApplicationParameterAsData(
      wallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeBundleParamsAsFilter(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveBundleIds(overrides?: CallOverrides): Promise<BigNumber>;

    getActivePolicies(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApr100PercentLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBundle(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleCapitalCap(overrides?: CallOverrides): Promise<BigNumber>;

    getBundleFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleInfo(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    getCapital(overrides?: CallOverrides): Promise<BigNumber>;

    getChainRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralizationLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getErc20Token(overrides?: CallOverrides): Promise<BigNumber>;

    getFilterDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBundleLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumNumberOfActiveBundles(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getOneYearDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getProtectedMinDepegPrice(
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskpoolCapitalCap(overrides?: CallOverrides): Promise<BigNumber>;

    getStaking(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getSumInsuredPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getSumOfSumInsuredCap(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedCapitalAmount(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getType(overrides?: CallOverrides): Promise<BigNumber>;

    getWallet(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowAllAccountsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHigherPriorityBundle(
      firstBundleId: PromiseOrValue<BigNumberish>,
      secondBundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isProduct(overrides?: CallOverrides): Promise<BigNumber>;

    isRiskpool(overrides?: CallOverrides): Promise<BigNumber>;

    lockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPolicyPayout(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPolicyPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releasePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowAccount(
      account: PromiseOrValue<string>,
      allowAccount: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowAllAccounts(
      allowAllAccounts: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCapitalCaps(
      poolCapitalCap: PromiseOrValue<BigNumberish>,
      bundleCapitalCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaximumNumberOfActiveBundles(
      maximumNumberOfActiveBundles: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingAddress(
      stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APR_100_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_FILTER_DATA_STRUCTURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMPTY_STRING_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FULL_COLLATERALIZATION_LEVEL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BUNDLE_LIFETIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_POLICY_COVERAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_POLICY_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_BUNDLE_LIFETIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_POLICY_COVERAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_POLICY_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeBundles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bundleMatchesApplication(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bundleMatchesApplication2(
      bundle: IBundle.BundleStruct,
      application: IPolicy.ApplicationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bundles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculatePremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSumInsured(
      protectedBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateralizePolicy(
      processId: PromiseOrValue<BytesLike>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createBundle(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      policyMinProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMaxProtectedBalance: PromiseOrValue<BigNumberish>,
      policyMinDuration: PromiseOrValue<BigNumberish>,
      policyMaxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createBundle(bytes,uint256)"(
      filter: PromiseOrValue<BytesLike>,
      initialAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decodeApplicationParameterFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeBundleParamsFromFilter(
      filter: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depegPriceIsBelowProtectedDepegPrice(
      depegPrice: PromiseOrValue<BigNumberish>,
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    detailedBundleApplicationMatch(
      bundleId: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      application: IPolicy.ApplicationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeApplicationParameterAsData(
      wallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      maxPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBundleParamsAsFilter(
      name: PromiseOrValue<string>,
      lifetime: PromiseOrValue<BigNumberish>,
      minSumInsured: PromiseOrValue<BigNumberish>,
      maxSumInsured: PromiseOrValue<BigNumberish>,
      minDuration: PromiseOrValue<BigNumberish>,
      maxDuration: PromiseOrValue<BigNumberish>,
      annualPercentageReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveBundleIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivePolicies(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApr100PercentLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBundle(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleCapitalCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleInfo(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCapacity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCapital(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getErc20Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFilterDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxBundleLifetime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumNumberOfActiveBundles(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOneYearDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtectedMinDepegPrice(
      targetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskpoolCapitalCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSumInsuredPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSumOfSumInsuredCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedCapitalAmount(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValueLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowAllAccountsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHigherPriorityBundle(
      firstBundleId: PromiseOrValue<BigNumberish>,
      secondBundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProduct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRiskpool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPolicyPayout(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPolicyPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releasePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowAccount(
      account: PromiseOrValue<string>,
      allowAccount: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowAllAccounts(
      allowAllAccounts: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCapitalCaps(
      poolCapitalCap: PromiseOrValue<BigNumberish>,
      bundleCapitalCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumNumberOfActiveBundles(
      maximumNumberOfActiveBundles: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingAddress(
      stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
