/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FixedMathInterface extends utils.Interface {
  functions: {
    "EXP()": FunctionFragment;
    "MULTIPLIER()": FunctionFragment;
    "MULTIPLIER_HALF()": FunctionFragment;
    "ROUNDING_DEFAULT()": FunctionFragment;
    "div(uint256,uint256)": FunctionFragment;
    "ftoi(uint256,uint8)": FunctionFragment;
    "ftoi(uint256)": FunctionFragment;
    "getMultiplier()": FunctionFragment;
    "itof(uint256)": FunctionFragment;
    "itof(uint256,int8)": FunctionFragment;
    "mul(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXP"
      | "MULTIPLIER"
      | "MULTIPLIER_HALF"
      | "ROUNDING_DEFAULT"
      | "div"
      | "ftoi(uint256,uint8)"
      | "ftoi(uint256)"
      | "getMultiplier"
      | "itof(uint256)"
      | "itof(uint256,int8)"
      | "mul"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EXP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER_HALF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUNDING_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "div",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ftoi(uint256,uint8)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ftoi(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "itof(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "itof(uint256,int8)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mul",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "EXP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MULTIPLIER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MULTIPLIER_HALF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUNDING_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "div", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ftoi(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftoi(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itof(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itof(uint256,int8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mul", data: BytesLike): Result;

  events: {};
}

export interface FixedMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXP(overrides?: CallOverrides): Promise<[number]>;

    MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MULTIPLIER_HALF(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROUNDING_DEFAULT(overrides?: CallOverrides): Promise<[number]>;

    div(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { a_bf: BigNumber }>;

    "ftoi(uint256,uint8)"(
      af: PromiseOrValue<BigNumberish>,
      rounding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { a: BigNumber }>;

    "ftoi(uint256)"(
      af: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { a: BigNumber }>;

    getMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { multiplier: BigNumber }>;

    "itof(uint256)"(
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { aUFixed: BigNumber }>;

    "itof(uint256,int8)"(
      a: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { af: BigNumber }>;

    mul(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { abf: BigNumber }>;
  };

  EXP(overrides?: CallOverrides): Promise<number>;

  MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  MULTIPLIER_HALF(overrides?: CallOverrides): Promise<BigNumber>;

  ROUNDING_DEFAULT(overrides?: CallOverrides): Promise<number>;

  div(
    af: PromiseOrValue<BigNumberish>,
    bf: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ftoi(uint256,uint8)"(
    af: PromiseOrValue<BigNumberish>,
    rounding: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ftoi(uint256)"(
    af: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "itof(uint256)"(
    a: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "itof(uint256,int8)"(
    a: PromiseOrValue<BigNumberish>,
    exp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mul(
    af: PromiseOrValue<BigNumberish>,
    bf: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    EXP(overrides?: CallOverrides): Promise<number>;

    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER_HALF(overrides?: CallOverrides): Promise<BigNumber>;

    ROUNDING_DEFAULT(overrides?: CallOverrides): Promise<number>;

    div(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ftoi(uint256,uint8)"(
      af: PromiseOrValue<BigNumberish>,
      rounding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ftoi(uint256)"(
      af: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "itof(uint256)"(
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "itof(uint256,int8)"(
      a: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    EXP(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER_HALF(overrides?: CallOverrides): Promise<BigNumber>;

    ROUNDING_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    div(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ftoi(uint256,uint8)"(
      af: PromiseOrValue<BigNumberish>,
      rounding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ftoi(uint256)"(
      af: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "itof(uint256)"(
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "itof(uint256,int8)"(
      a: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MULTIPLIER_HALF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUNDING_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    div(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ftoi(uint256,uint8)"(
      af: PromiseOrValue<BigNumberish>,
      rounding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ftoi(uint256)"(
      af: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "itof(uint256)"(
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "itof(uint256,int8)"(
      a: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mul(
      af: PromiseOrValue<BigNumberish>,
      bf: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
