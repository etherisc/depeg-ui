/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPriceDataProvider {
  export type PriceInfoStruct = {
    id: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type PriceInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    id: BigNumber;
    price: BigNumber;
    createdAt: BigNumber;
  };
}

export interface IPriceDataProviderInterface extends utils.Interface {
  functions: {
    "getAggregatorAddress()": FunctionFragment;
    "getAggregatorDecimals()": FunctionFragment;
    "getLatestPriceInfo()": FunctionFragment;
    "getPriceInfo(uint256)": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAggregatorAddress"
      | "getAggregatorDecimals"
      | "getLatestPriceInfo"
      | "getPriceInfo"
      | "getTokenAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAggregatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregatorDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAggregatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregatorDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPriceDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPriceDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAggregatorAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { priceInfoSourceAddress: string }>;

    getAggregatorDecimals(
      overrides?: CallOverrides
    ): Promise<[number] & { priceInfoDecimals: number }>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [IPriceDataProvider.PriceInfoStructOutput] & {
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
      }
    >;

    getPriceInfo(
      priceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPriceDataProvider.PriceInfoStructOutput] & {
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
      }
    >;

    getTokenAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenAddress: string }>;
  };

  getAggregatorAddress(overrides?: CallOverrides): Promise<string>;

  getAggregatorDecimals(overrides?: CallOverrides): Promise<number>;

  getLatestPriceInfo(
    overrides?: CallOverrides
  ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

  getPriceInfo(
    priceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAggregatorAddress(overrides?: CallOverrides): Promise<string>;

    getAggregatorDecimals(overrides?: CallOverrides): Promise<number>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    getPriceInfo(
      priceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAggregatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getAggregatorDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPriceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceInfo(
      priceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAggregatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAggregatorDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceInfo(
      priceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
