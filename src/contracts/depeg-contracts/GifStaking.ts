/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace GifStaking {
  export type BundleKeyStruct = {
    instanceId: PromiseOrValue<BytesLike>;
    bundleId: PromiseOrValue<BigNumberish>;
  };

  export type BundleKeyStructOutput = [string, BigNumber] & {
    instanceId: string;
    bundleId: BigNumber;
  };

  export type StakeInfoStruct = {
    staker: PromiseOrValue<string>;
    key: GifStaking.BundleKeyStruct;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type StakeInfoStructOutput = [
    string,
    GifStaking.BundleKeyStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    staker: string;
    key: GifStaking.BundleKeyStructOutput;
    balance: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type BundleInfoStruct = {
    key: GifStaking.BundleKeyStruct;
    chainId: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    state: PromiseOrValue<BigNumberish>;
    closedSince: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleInfoStructOutput = [
    GifStaking.BundleKeyStructOutput,
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    key: GifStaking.BundleKeyStructOutput;
    chainId: BigNumber;
    token: string;
    state: number;
    closedSince: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type InstanceInfoStruct = {
    id: PromiseOrValue<BytesLike>;
    chainId: PromiseOrValue<BigNumberish>;
    registry: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type InstanceInfoStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    id: string;
    chainId: BigNumber;
    registry: string;
    createdAt: BigNumber;
  };
}

export interface GifStakingInterface extends utils.Interface {
  functions: {
    "DIP_CONTRACT_ADDRESS()": FunctionFragment;
    "DIP_DECIMALS()": FunctionFragment;
    "DIP_TO_TOKEN_PARITY_LEVEL()": FunctionFragment;
    "DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS()": FunctionFragment;
    "MAINNET_ID()": FunctionFragment;
    "ONE_YEAR_DURATION()": FunctionFragment;
    "REWARD_100_PERCENTAGE()": FunctionFragment;
    "REWARD_MAX_PERCENTAGE()": FunctionFragment;
    "bundles()": FunctionFragment;
    "calculateRewards(uint256,uint256)": FunctionFragment;
    "calculateRewardsIncrement((address,(bytes32,uint256),uint256,uint256,uint256))": FunctionFragment;
    "calculateTokenAmountFromStaking(uint256,uint256,address)": FunctionFragment;
    "getBundleInfo(bytes32,uint256)": FunctionFragment;
    "getBundleKey(uint256)": FunctionFragment;
    "getBundleStakes(bytes32,uint256)": FunctionFragment;
    "getDip()": FunctionFragment;
    "getDipStakingRate(uint256,address)": FunctionFragment;
    "getDipToTokenParityLevel()": FunctionFragment;
    "getInstanceId(uint256)": FunctionFragment;
    "getInstanceInfo(bytes32)": FunctionFragment;
    "getOneYearDuration()": FunctionFragment;
    "getReward100PercentLevel()": FunctionFragment;
    "getStakeInfo(bytes32,uint256,address)": FunctionFragment;
    "getStakingWallet()": FunctionFragment;
    "getSupportedCapitalAmount(bytes32,uint256,address)": FunctionFragment;
    "instances()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerGifInstance(bytes32,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDipContract(address)": FunctionFragment;
    "setDipStakingRate(uint256,address,uint256,uint256)": FunctionFragment;
    "setRewardPercentage(uint256)": FunctionFragment;
    "stake(bytes32,uint256,uint256)": FunctionFragment;
    "stakes(bytes32,uint256)": FunctionFragment;
    "stakes(bytes32)": FunctionFragment;
    "stakes()": FunctionFragment;
    "stakes(bytes32,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBundleState(bytes32,uint256,address,uint8)": FunctionFragment;
    "updateBundleState(bytes32,uint256)": FunctionFragment;
    "withdraw(bytes32,uint256)": FunctionFragment;
    "withdraw(bytes32,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DIP_CONTRACT_ADDRESS"
      | "DIP_DECIMALS"
      | "DIP_TO_TOKEN_PARITY_LEVEL"
      | "DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS"
      | "MAINNET_ID"
      | "ONE_YEAR_DURATION"
      | "REWARD_100_PERCENTAGE"
      | "REWARD_MAX_PERCENTAGE"
      | "bundles"
      | "calculateRewards"
      | "calculateRewardsIncrement"
      | "calculateTokenAmountFromStaking"
      | "getBundleInfo"
      | "getBundleKey"
      | "getBundleStakes"
      | "getDip"
      | "getDipStakingRate"
      | "getDipToTokenParityLevel"
      | "getInstanceId"
      | "getInstanceInfo"
      | "getOneYearDuration"
      | "getReward100PercentLevel"
      | "getStakeInfo"
      | "getStakingWallet"
      | "getSupportedCapitalAmount"
      | "instances"
      | "owner"
      | "registerGifInstance"
      | "renounceOwnership"
      | "setDipContract"
      | "setDipStakingRate"
      | "setRewardPercentage"
      | "stake"
      | "stakes(bytes32,uint256)"
      | "stakes(bytes32)"
      | "stakes()"
      | "stakes(bytes32,uint256,address)"
      | "transferOwnership"
      | "updateBundleState(bytes32,uint256,address,uint8)"
      | "updateBundleState(bytes32,uint256)"
      | "withdraw(bytes32,uint256)"
      | "withdraw(bytes32,uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DIP_CONTRACT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIP_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIP_TO_TOKEN_PARITY_LEVEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINNET_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_YEAR_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_100_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bundles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsIncrement",
    values: [GifStaking.StakeInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenAmountFromStaking",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleStakes",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getDip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDipStakingRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDipToTokenParityLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOneYearDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward100PercentLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedCapitalAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "instances", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerGifInstance",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDipContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDipStakingRate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "stakes()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakes(bytes32,uint256,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBundleState(bytes32,uint256,address,uint8)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBundleState(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes32,uint256,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DIP_CONTRACT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIP_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIP_TO_TOKEN_PARITY_LEVEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAINNET_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ONE_YEAR_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_100_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bundles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenAmountFromStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDipStakingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDipToTokenParityLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOneYearDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward100PercentLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedCapitalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerGifInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDipContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDipStakingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakes(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakes(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakes(bytes32,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBundleState(bytes32,uint256,address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBundleState(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes32,uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface GifStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GifStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DIP_TO_TOKEN_PARITY_LEVEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAINNET_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_100_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    bundles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfBundles: BigNumber }>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardAmount: BigNumber }>;

    calculateRewardsIncrement(
      stakeInfo: GifStaking.StakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardsAmount: BigNumber }>;

    calculateTokenAmountFromStaking(
      dipAmount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmount: BigNumber }>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [GifStaking.BundleInfoStructOutput] & {
        info: GifStaking.BundleInfoStructOutput;
      }
    >;

    getBundleKey(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [GifStaking.BundleKeyStructOutput] & {
        key: GifStaking.BundleKeyStructOutput;
      }
    >;

    getBundleStakes(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakedDipAmount: BigNumber }>;

    getDip(overrides?: CallOverrides): Promise<[string] & { dip: string }>;

    getDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakingRate: BigNumber }>;

    getDipToTokenParityLevel(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { parityLevel: BigNumber }>;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { instanceId: string }>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GifStaking.InstanceInfoStructOutput] & {
        info: GifStaking.InstanceInfoStructOutput;
      }
    >;

    getOneYearDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yearDuration: BigNumber }>;

    getReward100PercentLevel(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward100PercentLevel: BigNumber }>;

    getStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [GifStaking.StakeInfoStructOutput] & {
        stakeInfo: GifStaking.StakeInfoStructOutput;
      }
    >;

    getStakingWallet(
      overrides?: CallOverrides
    ): Promise<[string] & { instanceWallet: string }>;

    getSupportedCapitalAmount(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { captialCap: BigNumber }>;

    instances(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfInstances: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerGifInstance(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      stakingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardPercentage(
      rewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "stakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "stakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "stakes()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "stakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateBundleState(bytes32,uint256,address,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateBundleState(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  DIP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  DIP_TO_TOKEN_PARITY_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

  DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAINNET_ID(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_100_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  bundles(overrides?: CallOverrides): Promise<BigNumber>;

  calculateRewards(
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewardsIncrement(
    stakeInfo: GifStaking.StakeInfoStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenAmountFromStaking(
    dipAmount: PromiseOrValue<BigNumberish>,
    chainId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBundleInfo(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GifStaking.BundleInfoStructOutput>;

  getBundleKey(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GifStaking.BundleKeyStructOutput>;

  getBundleStakes(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDip(overrides?: CallOverrides): Promise<string>;

  getDipStakingRate(
    chainId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDipToTokenParityLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getInstanceId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInstanceInfo(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GifStaking.InstanceInfoStructOutput>;

  getOneYearDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getReward100PercentLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeInfo(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<GifStaking.StakeInfoStructOutput>;

  getStakingWallet(overrides?: CallOverrides): Promise<string>;

  getSupportedCapitalAmount(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  instances(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerGifInstance(
    instanceId: PromiseOrValue<BytesLike>,
    chainId: PromiseOrValue<BigNumberish>,
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDipContract(
    dipTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDipStakingRate(
    chainId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenDecimals: PromiseOrValue<BigNumberish>,
    stakingRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardPercentage(
    rewardPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "stakes(bytes32,uint256)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakes(bytes32)"(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakes()"(overrides?: CallOverrides): Promise<BigNumber>;

  "stakes(bytes32,uint256,address)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateBundleState(bytes32,uint256,address,uint8)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    state: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateBundleState(bytes32,uint256)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes32,uint256)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes32,uint256,uint256)"(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    DIP_TO_TOKEN_PARITY_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

    DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAINNET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_100_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsIncrement(
      stakeInfo: GifStaking.StakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmountFromStaking(
      dipAmount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GifStaking.BundleInfoStructOutput>;

    getBundleKey(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GifStaking.BundleKeyStructOutput>;

    getBundleStakes(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDip(overrides?: CallOverrides): Promise<string>;

    getDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDipToTokenParityLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GifStaking.InstanceInfoStructOutput>;

    getOneYearDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getReward100PercentLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<GifStaking.StakeInfoStructOutput>;

    getStakingWallet(overrides?: CallOverrides): Promise<string>;

    getSupportedCapitalAmount(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instances(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerGifInstance(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      stakingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPercentage(
      rewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakes()"(overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBundleState(bytes32,uint256,address,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBundleState(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DIP_CONTRACT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    DIP_TO_TOKEN_PARITY_LEVEL(overrides?: CallOverrides): Promise<BigNumber>;

    DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAINNET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_100_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsIncrement(
      stakeInfo: GifStaking.StakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmountFromStaking(
      dipAmount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleKey(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleStakes(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDip(overrides?: CallOverrides): Promise<BigNumber>;

    getDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDipToTokenParityLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOneYearDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getReward100PercentLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedCapitalAmount(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instances(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerGifInstance(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      stakingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardPercentage(
      rewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "stakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakes()"(overrides?: CallOverrides): Promise<BigNumber>;

    "stakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateBundleState(bytes32,uint256,address,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateBundleState(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DIP_CONTRACT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DIP_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DIP_TO_TOKEN_PARITY_LEVEL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DIP_TO_TOKEN_PARITY_LEVEL_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAINNET_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_YEAR_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_100_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_MAX_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bundles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewards(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardsIncrement(
      stakeInfo: GifStaking.StakeInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenAmountFromStaking(
      dipAmount: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleKey(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleStakes(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDipToTokenParityLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOneYearDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward100PercentLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupportedCapitalAmount(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerGifInstance(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDipContract(
      dipTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDipStakingRate(
      chainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      stakingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPercentage(
      rewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "stakes(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakes(bytes32)"(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakes(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateBundleState(bytes32,uint256,address,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateBundleState(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes32,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes32,uint256,uint256)"(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
