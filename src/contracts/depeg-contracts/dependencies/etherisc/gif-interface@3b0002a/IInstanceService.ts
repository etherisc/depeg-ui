/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPolicy {
  export type ApplicationStruct = {
    state: PromiseOrValue<BigNumberish>;
    premiumAmount: PromiseOrValue<BigNumberish>;
    sumInsuredAmount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type ApplicationStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    premiumAmount: BigNumber;
    sumInsuredAmount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type ClaimStruct = {
    state: PromiseOrValue<BigNumberish>;
    claimAmount: PromiseOrValue<BigNumberish>;
    paidAmount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type ClaimStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    claimAmount: BigNumber;
    paidAmount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type MetadataStruct = {
    owner: PromiseOrValue<string>;
    productId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type MetadataStructOutput = [
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    productId: BigNumber;
    state: number;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type PayoutStruct = {
    claimId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type PayoutStructOutput = [
    BigNumber,
    number,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    claimId: BigNumber;
    state: number;
    amount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type PolicyStruct = {
    state: PromiseOrValue<BigNumberish>;
    premiumExpectedAmount: PromiseOrValue<BigNumberish>;
    premiumPaidAmount: PromiseOrValue<BigNumberish>;
    claimsCount: PromiseOrValue<BigNumberish>;
    openClaimsCount: PromiseOrValue<BigNumberish>;
    payoutMaxAmount: PromiseOrValue<BigNumberish>;
    payoutAmount: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type PolicyStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    premiumExpectedAmount: BigNumber;
    premiumPaidAmount: BigNumber;
    claimsCount: BigNumber;
    openClaimsCount: BigNumber;
    payoutMaxAmount: BigNumber;
    payoutAmount: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export declare namespace IBundle {
  export type BundleStruct = {
    id: PromiseOrValue<BigNumberish>;
    riskpoolId: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    filter: PromiseOrValue<BytesLike>;
    capital: PromiseOrValue<BigNumberish>;
    lockedCapital: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    riskpoolId: BigNumber;
    tokenId: BigNumber;
    state: number;
    filter: string;
    capital: BigNumber;
    lockedCapital: BigNumber;
    balance: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export declare namespace IPool {
  export type PoolStruct = {
    id: PromiseOrValue<BigNumberish>;
    wallet: PromiseOrValue<string>;
    erc20Token: PromiseOrValue<string>;
    collateralizationLevel: PromiseOrValue<BigNumberish>;
    sumOfSumInsuredCap: PromiseOrValue<BigNumberish>;
    sumOfSumInsuredAtRisk: PromiseOrValue<BigNumberish>;
    capital: PromiseOrValue<BigNumberish>;
    lockedCapital: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type PoolStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    wallet: string;
    erc20Token: string;
    collateralizationLevel: BigNumber;
    sumOfSumInsuredCap: BigNumber;
    sumOfSumInsuredAtRisk: BigNumber;
    capital: BigNumber;
    lockedCapital: BigNumber;
    balance: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface IInstanceServiceInterface extends utils.Interface {
  functions: {
    "activeBundles(uint256)": FunctionFragment;
    "bundles()": FunctionFragment;
    "claims(bytes32)": FunctionFragment;
    "contractName(uint256)": FunctionFragment;
    "contracts()": FunctionFragment;
    "getActiveBundleId(uint256,uint256)": FunctionFragment;
    "getApplication(bytes32)": FunctionFragment;
    "getBalance(uint256)": FunctionFragment;
    "getBundle(uint256)": FunctionFragment;
    "getBundleToken()": FunctionFragment;
    "getCapacity(uint256)": FunctionFragment;
    "getCapital(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getChainName()": FunctionFragment;
    "getClaim(bytes32,uint256)": FunctionFragment;
    "getComponent(uint256)": FunctionFragment;
    "getComponentId(address)": FunctionFragment;
    "getComponentOwnerService()": FunctionFragment;
    "getComponentState(uint256)": FunctionFragment;
    "getComponentToken(uint256)": FunctionFragment;
    "getComponentType(uint256)": FunctionFragment;
    "getDefaultAdminRole()": FunctionFragment;
    "getFeeFractionFullUnit()": FunctionFragment;
    "getFullCollateralizationLevel()": FunctionFragment;
    "getInstanceId()": FunctionFragment;
    "getInstanceOperator()": FunctionFragment;
    "getInstanceOperatorService()": FunctionFragment;
    "getInstanceWallet()": FunctionFragment;
    "getMaximumNumberOfActiveBundles(uint256)": FunctionFragment;
    "getMetadata(bytes32)": FunctionFragment;
    "getOracleProviderRole()": FunctionFragment;
    "getOracleService()": FunctionFragment;
    "getPayout(bytes32,uint256)": FunctionFragment;
    "getPolicy(bytes32)": FunctionFragment;
    "getProductOwnerRole()": FunctionFragment;
    "getProductService()": FunctionFragment;
    "getRiskpool(uint256)": FunctionFragment;
    "getRiskpoolKeeperRole()": FunctionFragment;
    "getRiskpoolService()": FunctionFragment;
    "getRiskpoolWallet(uint256)": FunctionFragment;
    "getStakedAssets(uint256)": FunctionFragment;
    "getStakingRequirements(uint256)": FunctionFragment;
    "getTotalValueLocked(uint256)": FunctionFragment;
    "getTreasuryAddress()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "oracles()": FunctionFragment;
    "payouts(bytes32)": FunctionFragment;
    "processIds()": FunctionFragment;
    "products()": FunctionFragment;
    "riskpools()": FunctionFragment;
    "unburntBundles(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeBundles"
      | "bundles"
      | "claims"
      | "contractName"
      | "contracts"
      | "getActiveBundleId"
      | "getApplication"
      | "getBalance"
      | "getBundle"
      | "getBundleToken"
      | "getCapacity"
      | "getCapital"
      | "getChainId"
      | "getChainName"
      | "getClaim"
      | "getComponent"
      | "getComponentId"
      | "getComponentOwnerService"
      | "getComponentState"
      | "getComponentToken"
      | "getComponentType"
      | "getDefaultAdminRole"
      | "getFeeFractionFullUnit"
      | "getFullCollateralizationLevel"
      | "getInstanceId"
      | "getInstanceOperator"
      | "getInstanceOperatorService"
      | "getInstanceWallet"
      | "getMaximumNumberOfActiveBundles"
      | "getMetadata"
      | "getOracleProviderRole"
      | "getOracleService"
      | "getPayout"
      | "getPolicy"
      | "getProductOwnerRole"
      | "getProductService"
      | "getRiskpool"
      | "getRiskpoolKeeperRole"
      | "getRiskpoolService"
      | "getRiskpoolWallet"
      | "getStakedAssets"
      | "getStakingRequirements"
      | "getTotalValueLocked"
      | "getTreasuryAddress"
      | "hasRole"
      | "oracles"
      | "payouts"
      | "processIds"
      | "products"
      | "riskpools"
      | "unburntBundles"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeBundles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "bundles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "contracts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveBundleId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplication",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCapacity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapital",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentOwnerService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeFractionFullUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFullCollateralizationLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceOperatorService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumNumberOfActiveBundles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleProviderRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayout",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductOwnerRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolKeeperRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolWallet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingRequirements",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oracles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payouts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processIds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "products", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskpools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unburntBundles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bundles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBundleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBundleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCapital", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentOwnerService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeFractionFullUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullCollateralizationLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceOperatorService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumNumberOfActiveBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleProviderRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductOwnerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolKeeperRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payouts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "processIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskpools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unburntBundles",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IInstanceService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInstanceServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfActiveBundles: BigNumber }>;

    bundles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfBundles: BigNumber }>;

    claims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfClaims: BigNumber }>;

    contractName(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { name: string }>;

    contracts(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfContracts: BigNumber }>;

    getActiveBundleId(
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bundleId: BigNumber }>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.ApplicationStructOutput] & {
        application: IPolicy.ApplicationStructOutput;
      }
    >;

    getBalance(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balanceAmount: BigNumber }>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IBundle.BundleStructOutput] & { bundle: IBundle.BundleStructOutput }
    >;

    getBundleToken(
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getCapacity(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { capacityAmount: BigNumber }>;

    getCapital(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { capitalAmount: BigNumber }>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    getChainName(
      overrides?: CallOverrides
    ): Promise<[string] & { chainName: string }>;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.ClaimStructOutput] & { claim: IPolicy.ClaimStructOutput }
    >;

    getComponent(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { component: string }>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { componentId: BigNumber }>;

    getComponentOwnerService(
      overrides?: CallOverrides
    ): Promise<[string] & { service: string }>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { componentState: number }>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { componentType: number }>;

    getDefaultAdminRole(
      overrides?: CallOverrides
    ): Promise<[string] & { role: string }>;

    getFeeFractionFullUnit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fullUnit: BigNumber }>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInstanceId(
      overrides?: CallOverrides
    ): Promise<[string] & { instanceId: string }>;

    getInstanceOperator(
      overrides?: CallOverrides
    ): Promise<[string] & { instanceOperator: string }>;

    getInstanceOperatorService(
      overrides?: CallOverrides
    ): Promise<[string] & { service: string }>;

    getInstanceWallet(
      overrides?: CallOverrides
    ): Promise<[string] & { walletAddress: string }>;

    getMaximumNumberOfActiveBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maximumNumberOfActiveBundles: BigNumber }>;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.MetadataStructOutput] & {
        metadata: IPolicy.MetadataStructOutput;
      }
    >;

    getOracleProviderRole(
      overrides?: CallOverrides
    ): Promise<[string] & { role: string }>;

    getOracleService(
      overrides?: CallOverrides
    ): Promise<[string] & { service: string }>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.PayoutStructOutput] & { payout: IPolicy.PayoutStructOutput }
    >;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.PolicyStructOutput] & { policy: IPolicy.PolicyStructOutput }
    >;

    getProductOwnerRole(
      overrides?: CallOverrides
    ): Promise<[string] & { role: string }>;

    getProductService(
      overrides?: CallOverrides
    ): Promise<[string] & { service: string }>;

    getRiskpool(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPool.PoolStructOutput] & { riskPool: IPool.PoolStructOutput }>;

    getRiskpoolKeeperRole(
      overrides?: CallOverrides
    ): Promise<[string] & { role: string }>;

    getRiskpoolService(
      overrides?: CallOverrides
    ): Promise<[string] & { service: string }>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { walletAddress: string }>;

    getStakedAssets(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getStakingRequirements(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getTotalValueLocked(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalValueLockedAmount: BigNumber }>;

    getTreasuryAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { treasuryAddress: string }>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { roleIsAssigned: boolean }>;

    oracles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfOracles: BigNumber }>;

    payouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfPayouts: BigNumber }>;

    processIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfProcessIds: BigNumber }>;

    products(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfProducts: BigNumber }>;

    riskpools(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfRiskpools: BigNumber }>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfUnburntBundles: BigNumber }>;
  };

  activeBundles(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bundles(overrides?: CallOverrides): Promise<BigNumber>;

  claims(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractName(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  contracts(overrides?: CallOverrides): Promise<BigNumber>;

  getActiveBundleId(
    riskpoolId: PromiseOrValue<BigNumberish>,
    bundleIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApplication(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPolicy.ApplicationStructOutput>;

  getBalance(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBundle.BundleStructOutput>;

  getBundleToken(overrides?: CallOverrides): Promise<string>;

  getCapacity(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCapital(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getChainName(overrides?: CallOverrides): Promise<string>;

  getClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPolicy.ClaimStructOutput>;

  getComponent(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getComponentId(
    componentAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getComponentOwnerService(overrides?: CallOverrides): Promise<string>;

  getComponentState(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getComponentToken(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getComponentType(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDefaultAdminRole(overrides?: CallOverrides): Promise<string>;

  getFeeFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

  getFullCollateralizationLevel(overrides?: CallOverrides): Promise<BigNumber>;

  getInstanceId(overrides?: CallOverrides): Promise<string>;

  getInstanceOperator(overrides?: CallOverrides): Promise<string>;

  getInstanceOperatorService(overrides?: CallOverrides): Promise<string>;

  getInstanceWallet(overrides?: CallOverrides): Promise<string>;

  getMaximumNumberOfActiveBundles(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMetadata(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPolicy.MetadataStructOutput>;

  getOracleProviderRole(overrides?: CallOverrides): Promise<string>;

  getOracleService(overrides?: CallOverrides): Promise<string>;

  getPayout(
    processId: PromiseOrValue<BytesLike>,
    payoutId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPolicy.PayoutStructOutput>;

  getPolicy(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPolicy.PolicyStructOutput>;

  getProductOwnerRole(overrides?: CallOverrides): Promise<string>;

  getProductService(overrides?: CallOverrides): Promise<string>;

  getRiskpool(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPool.PoolStructOutput>;

  getRiskpoolKeeperRole(overrides?: CallOverrides): Promise<string>;

  getRiskpoolService(overrides?: CallOverrides): Promise<string>;

  getRiskpoolWallet(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakedAssets(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakingRequirements(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalValueLocked(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    principal: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracles(overrides?: CallOverrides): Promise<BigNumber>;

  payouts(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processIds(overrides?: CallOverrides): Promise<BigNumber>;

  products(overrides?: CallOverrides): Promise<BigNumber>;

  riskpools(overrides?: CallOverrides): Promise<BigNumber>;

  unburntBundles(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    activeBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    claims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractName(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    contracts(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveBundleId(
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPolicy.ApplicationStructOutput>;

    getBalance(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBundle.BundleStructOutput>;

    getBundleToken(overrides?: CallOverrides): Promise<string>;

    getCapacity(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapital(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainName(overrides?: CallOverrides): Promise<string>;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPolicy.ClaimStructOutput>;

    getComponent(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentOwnerService(overrides?: CallOverrides): Promise<string>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDefaultAdminRole(overrides?: CallOverrides): Promise<string>;

    getFeeFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceId(overrides?: CallOverrides): Promise<string>;

    getInstanceOperator(overrides?: CallOverrides): Promise<string>;

    getInstanceOperatorService(overrides?: CallOverrides): Promise<string>;

    getInstanceWallet(overrides?: CallOverrides): Promise<string>;

    getMaximumNumberOfActiveBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPolicy.MetadataStructOutput>;

    getOracleProviderRole(overrides?: CallOverrides): Promise<string>;

    getOracleService(overrides?: CallOverrides): Promise<string>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPolicy.PayoutStructOutput>;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPolicy.PolicyStructOutput>;

    getProductOwnerRole(overrides?: CallOverrides): Promise<string>;

    getProductService(overrides?: CallOverrides): Promise<string>;

    getRiskpool(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPool.PoolStructOutput>;

    getRiskpoolKeeperRole(overrides?: CallOverrides): Promise<string>;

    getRiskpoolService(overrides?: CallOverrides): Promise<string>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakedAssets(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakingRequirements(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalValueLocked(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracles(overrides?: CallOverrides): Promise<BigNumber>;

    payouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processIds(overrides?: CallOverrides): Promise<BigNumber>;

    products(overrides?: CallOverrides): Promise<BigNumber>;

    riskpools(overrides?: CallOverrides): Promise<BigNumber>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    activeBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    claims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractName(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contracts(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveBundleId(
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleToken(overrides?: CallOverrides): Promise<BigNumber>;

    getCapacity(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapital(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainName(overrides?: CallOverrides): Promise<BigNumber>;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponent(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentOwnerService(overrides?: CallOverrides): Promise<BigNumber>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultAdminRole(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceId(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceOperatorService(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumNumberOfActiveBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleProviderRole(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleService(overrides?: CallOverrides): Promise<BigNumber>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductOwnerRole(overrides?: CallOverrides): Promise<BigNumber>;

    getProductService(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskpool(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskpoolKeeperRole(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskpoolService(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedAssets(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingRequirements(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValueLocked(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(overrides?: CallOverrides): Promise<BigNumber>;

    payouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processIds(overrides?: CallOverrides): Promise<BigNumber>;

    products(overrides?: CallOverrides): Promise<BigNumber>;

    riskpools(overrides?: CallOverrides): Promise<BigNumber>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bundles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractName(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveBundleId(
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCapacity(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCapital(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponent(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentOwnerService(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultAdminRole(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeFractionFullUnit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullCollateralizationLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInstanceOperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceOperatorService(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaximumNumberOfActiveBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleProviderRole(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductOwnerRole(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskpool(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskpoolKeeperRole(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskpoolService(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedAssets(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingRequirements(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValueLocked(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    products(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskpools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
