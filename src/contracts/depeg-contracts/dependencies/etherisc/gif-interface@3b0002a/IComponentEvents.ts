/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IComponentEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "LogComponentApproved(uint256)": EventFragment;
    "LogComponentArchived(uint256)": EventFragment;
    "LogComponentDeclined(uint256)": EventFragment;
    "LogComponentPaused(uint256)": EventFragment;
    "LogComponentProposed(bytes32,uint8,address,uint256)": EventFragment;
    "LogComponentResumed(uint256)": EventFragment;
    "LogComponentStateChanged(uint256,uint8,uint8)": EventFragment;
    "LogComponentSuspended(uint256)": EventFragment;
    "LogComponentUnpaused(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogComponentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentUnpaused"): EventFragment;
}

export interface LogComponentApprovedEventObject {
  id: BigNumber;
}
export type LogComponentApprovedEvent = TypedEvent<
  [BigNumber],
  LogComponentApprovedEventObject
>;

export type LogComponentApprovedEventFilter =
  TypedEventFilter<LogComponentApprovedEvent>;

export interface LogComponentArchivedEventObject {
  id: BigNumber;
}
export type LogComponentArchivedEvent = TypedEvent<
  [BigNumber],
  LogComponentArchivedEventObject
>;

export type LogComponentArchivedEventFilter =
  TypedEventFilter<LogComponentArchivedEvent>;

export interface LogComponentDeclinedEventObject {
  id: BigNumber;
}
export type LogComponentDeclinedEvent = TypedEvent<
  [BigNumber],
  LogComponentDeclinedEventObject
>;

export type LogComponentDeclinedEventFilter =
  TypedEventFilter<LogComponentDeclinedEvent>;

export interface LogComponentPausedEventObject {
  id: BigNumber;
}
export type LogComponentPausedEvent = TypedEvent<
  [BigNumber],
  LogComponentPausedEventObject
>;

export type LogComponentPausedEventFilter =
  TypedEventFilter<LogComponentPausedEvent>;

export interface LogComponentProposedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  id: BigNumber;
}
export type LogComponentProposedEvent = TypedEvent<
  [string, number, string, BigNumber],
  LogComponentProposedEventObject
>;

export type LogComponentProposedEventFilter =
  TypedEventFilter<LogComponentProposedEvent>;

export interface LogComponentResumedEventObject {
  id: BigNumber;
}
export type LogComponentResumedEvent = TypedEvent<
  [BigNumber],
  LogComponentResumedEventObject
>;

export type LogComponentResumedEventFilter =
  TypedEventFilter<LogComponentResumedEvent>;

export interface LogComponentStateChangedEventObject {
  id: BigNumber;
  stateOld: number;
  stateNew: number;
}
export type LogComponentStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogComponentStateChangedEventObject
>;

export type LogComponentStateChangedEventFilter =
  TypedEventFilter<LogComponentStateChangedEvent>;

export interface LogComponentSuspendedEventObject {
  id: BigNumber;
}
export type LogComponentSuspendedEvent = TypedEvent<
  [BigNumber],
  LogComponentSuspendedEventObject
>;

export type LogComponentSuspendedEventFilter =
  TypedEventFilter<LogComponentSuspendedEvent>;

export interface LogComponentUnpausedEventObject {
  id: BigNumber;
}
export type LogComponentUnpausedEvent = TypedEvent<
  [BigNumber],
  LogComponentUnpausedEventObject
>;

export type LogComponentUnpausedEventFilter =
  TypedEventFilter<LogComponentUnpausedEvent>;

export interface IComponentEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IComponentEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "LogComponentApproved(uint256)"(id?: null): LogComponentApprovedEventFilter;
    LogComponentApproved(id?: null): LogComponentApprovedEventFilter;

    "LogComponentArchived(uint256)"(id?: null): LogComponentArchivedEventFilter;
    LogComponentArchived(id?: null): LogComponentArchivedEventFilter;

    "LogComponentDeclined(uint256)"(id?: null): LogComponentDeclinedEventFilter;
    LogComponentDeclined(id?: null): LogComponentDeclinedEventFilter;

    "LogComponentPaused(uint256)"(id?: null): LogComponentPausedEventFilter;
    LogComponentPaused(id?: null): LogComponentPausedEventFilter;

    "LogComponentProposed(bytes32,uint8,address,uint256)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;
    LogComponentProposed(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;

    "LogComponentResumed(uint256)"(id?: null): LogComponentResumedEventFilter;
    LogComponentResumed(id?: null): LogComponentResumedEventFilter;

    "LogComponentStateChanged(uint256,uint8,uint8)"(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;
    LogComponentStateChanged(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;

    "LogComponentSuspended(uint256)"(
      id?: null
    ): LogComponentSuspendedEventFilter;
    LogComponentSuspended(id?: null): LogComponentSuspendedEventFilter;

    "LogComponentUnpaused(uint256)"(id?: null): LogComponentUnpausedEventFilter;
    LogComponentUnpaused(id?: null): LogComponentUnpausedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
