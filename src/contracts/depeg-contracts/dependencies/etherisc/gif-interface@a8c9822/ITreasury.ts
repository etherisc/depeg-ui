/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace ITreasury {
  export type FeeSpecificationStruct = {
    componentId: PromiseOrValue<BigNumberish>;
    fixedFee: PromiseOrValue<BigNumberish>;
    fractionalFee: PromiseOrValue<BigNumberish>;
    feeCalculationData: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type FeeSpecificationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    componentId: BigNumber;
    fixedFee: BigNumber;
    fractionalFee: BigNumber;
    feeCalculationData: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface ITreasuryInterface extends utils.Interface {
  functions: {
    "createFeeSpecification(uint256,uint256,uint256,bytes)": FunctionFragment;
    "getComponentToken(uint256)": FunctionFragment;
    "getFeeSpecification(uint256)": FunctionFragment;
    "getFractionFullUnit()": FunctionFragment;
    "getInstanceWallet()": FunctionFragment;
    "getRiskpoolWallet(uint256)": FunctionFragment;
    "processCapital(uint256,uint256)": FunctionFragment;
    "processPayout(bytes32,uint256)": FunctionFragment;
    "processPremium(bytes32,uint256)": FunctionFragment;
    "processPremium(bytes32)": FunctionFragment;
    "processWithdrawal(uint256,uint256)": FunctionFragment;
    "setCapitalFees((uint256,uint256,uint256,bytes,uint256,uint256))": FunctionFragment;
    "setInstanceWallet(address)": FunctionFragment;
    "setPremiumFees((uint256,uint256,uint256,bytes,uint256,uint256))": FunctionFragment;
    "setProductToken(uint256,address)": FunctionFragment;
    "setRiskpoolWallet(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createFeeSpecification"
      | "getComponentToken"
      | "getFeeSpecification"
      | "getFractionFullUnit"
      | "getInstanceWallet"
      | "getRiskpoolWallet"
      | "processCapital"
      | "processPayout"
      | "processPremium(bytes32,uint256)"
      | "processPremium(bytes32)"
      | "processWithdrawal"
      | "setCapitalFees"
      | "setInstanceWallet"
      | "setPremiumFees"
      | "setProductToken"
      | "setRiskpoolWallet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFeeSpecification",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeSpecification",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionFullUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolWallet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processCapital",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPayout",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPremium(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPremium(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCapitalFees",
    values: [ITreasury.FeeSpecificationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstanceWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumFees",
    values: [ITreasury.FeeSpecificationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskpoolWallet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFeeSpecification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeSpecification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionFullUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processCapital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPremium(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPremium(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCapitalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstanceWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskpoolWallet",
    data: BytesLike
  ): Result;

  events: {
    "LogTreasuryCapitalFeesSet(uint256,uint256,uint256)": EventFragment;
    "LogTreasuryCapitalProcessed(uint256,uint256,uint256)": EventFragment;
    "LogTreasuryCapitalTransferred(address,address,uint256)": EventFragment;
    "LogTreasuryFeesTransferred(address,address,uint256)": EventFragment;
    "LogTreasuryInstanceWalletSet(address)": EventFragment;
    "LogTreasuryPayoutProcessed(uint256,address,uint256)": EventFragment;
    "LogTreasuryPayoutTransferred(address,address,uint256)": EventFragment;
    "LogTreasuryPremiumFeesSet(uint256,uint256,uint256)": EventFragment;
    "LogTreasuryPremiumProcessed(bytes32,uint256)": EventFragment;
    "LogTreasuryPremiumTransferred(address,address,uint256)": EventFragment;
    "LogTreasuryProductTokenSet(uint256,uint256,address)": EventFragment;
    "LogTreasuryResumed()": EventFragment;
    "LogTreasuryRiskpoolWalletSet(uint256,address)": EventFragment;
    "LogTreasurySuspended()": EventFragment;
    "LogTreasuryWithdrawalProcessed(uint256,uint256,uint256)": EventFragment;
    "LogTreasuryWithdrawalTransferred(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogTreasuryCapitalFeesSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryCapitalProcessed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryCapitalTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTreasuryFeesTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryInstanceWalletSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTreasuryPayoutProcessed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryPayoutTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTreasuryPremiumFeesSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryPremiumProcessed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryPremiumTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTreasuryProductTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTreasuryResumed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryRiskpoolWalletSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTreasurySuspended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryWithdrawalProcessed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTreasuryWithdrawalTransferred"
  ): EventFragment;
}

export interface LogTreasuryCapitalFeesSetEventObject {
  riskpoolId: BigNumber;
  fixedFee: BigNumber;
  fractionalFee: BigNumber;
}
export type LogTreasuryCapitalFeesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogTreasuryCapitalFeesSetEventObject
>;

export type LogTreasuryCapitalFeesSetEventFilter =
  TypedEventFilter<LogTreasuryCapitalFeesSetEvent>;

export interface LogTreasuryCapitalProcessedEventObject {
  riskpoolId: BigNumber;
  bundleId: BigNumber;
  amount: BigNumber;
}
export type LogTreasuryCapitalProcessedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogTreasuryCapitalProcessedEventObject
>;

export type LogTreasuryCapitalProcessedEventFilter =
  TypedEventFilter<LogTreasuryCapitalProcessedEvent>;

export interface LogTreasuryCapitalTransferredEventObject {
  from: string;
  riskpoolWalletAddress: string;
  amount: BigNumber;
}
export type LogTreasuryCapitalTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  LogTreasuryCapitalTransferredEventObject
>;

export type LogTreasuryCapitalTransferredEventFilter =
  TypedEventFilter<LogTreasuryCapitalTransferredEvent>;

export interface LogTreasuryFeesTransferredEventObject {
  from: string;
  instanceWalletAddress: string;
  amount: BigNumber;
}
export type LogTreasuryFeesTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  LogTreasuryFeesTransferredEventObject
>;

export type LogTreasuryFeesTransferredEventFilter =
  TypedEventFilter<LogTreasuryFeesTransferredEvent>;

export interface LogTreasuryInstanceWalletSetEventObject {
  walletAddress: string;
}
export type LogTreasuryInstanceWalletSetEvent = TypedEvent<
  [string],
  LogTreasuryInstanceWalletSetEventObject
>;

export type LogTreasuryInstanceWalletSetEventFilter =
  TypedEventFilter<LogTreasuryInstanceWalletSetEvent>;

export interface LogTreasuryPayoutProcessedEventObject {
  riskpoolId: BigNumber;
  to: string;
  amount: BigNumber;
}
export type LogTreasuryPayoutProcessedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogTreasuryPayoutProcessedEventObject
>;

export type LogTreasuryPayoutProcessedEventFilter =
  TypedEventFilter<LogTreasuryPayoutProcessedEvent>;

export interface LogTreasuryPayoutTransferredEventObject {
  riskpoolWalletAddress: string;
  to: string;
  amount: BigNumber;
}
export type LogTreasuryPayoutTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  LogTreasuryPayoutTransferredEventObject
>;

export type LogTreasuryPayoutTransferredEventFilter =
  TypedEventFilter<LogTreasuryPayoutTransferredEvent>;

export interface LogTreasuryPremiumFeesSetEventObject {
  productId: BigNumber;
  fixedFee: BigNumber;
  fractionalFee: BigNumber;
}
export type LogTreasuryPremiumFeesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogTreasuryPremiumFeesSetEventObject
>;

export type LogTreasuryPremiumFeesSetEventFilter =
  TypedEventFilter<LogTreasuryPremiumFeesSetEvent>;

export interface LogTreasuryPremiumProcessedEventObject {
  processId: string;
  amount: BigNumber;
}
export type LogTreasuryPremiumProcessedEvent = TypedEvent<
  [string, BigNumber],
  LogTreasuryPremiumProcessedEventObject
>;

export type LogTreasuryPremiumProcessedEventFilter =
  TypedEventFilter<LogTreasuryPremiumProcessedEvent>;

export interface LogTreasuryPremiumTransferredEventObject {
  from: string;
  riskpoolWalletAddress: string;
  amount: BigNumber;
}
export type LogTreasuryPremiumTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  LogTreasuryPremiumTransferredEventObject
>;

export type LogTreasuryPremiumTransferredEventFilter =
  TypedEventFilter<LogTreasuryPremiumTransferredEvent>;

export interface LogTreasuryProductTokenSetEventObject {
  productId: BigNumber;
  riskpoolId: BigNumber;
  erc20Address: string;
}
export type LogTreasuryProductTokenSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LogTreasuryProductTokenSetEventObject
>;

export type LogTreasuryProductTokenSetEventFilter =
  TypedEventFilter<LogTreasuryProductTokenSetEvent>;

export interface LogTreasuryResumedEventObject {}
export type LogTreasuryResumedEvent = TypedEvent<
  [],
  LogTreasuryResumedEventObject
>;

export type LogTreasuryResumedEventFilter =
  TypedEventFilter<LogTreasuryResumedEvent>;

export interface LogTreasuryRiskpoolWalletSetEventObject {
  riskpoolId: BigNumber;
  walletAddress: string;
}
export type LogTreasuryRiskpoolWalletSetEvent = TypedEvent<
  [BigNumber, string],
  LogTreasuryRiskpoolWalletSetEventObject
>;

export type LogTreasuryRiskpoolWalletSetEventFilter =
  TypedEventFilter<LogTreasuryRiskpoolWalletSetEvent>;

export interface LogTreasurySuspendedEventObject {}
export type LogTreasurySuspendedEvent = TypedEvent<
  [],
  LogTreasurySuspendedEventObject
>;

export type LogTreasurySuspendedEventFilter =
  TypedEventFilter<LogTreasurySuspendedEvent>;

export interface LogTreasuryWithdrawalProcessedEventObject {
  riskpoolId: BigNumber;
  bundleId: BigNumber;
  amount: BigNumber;
}
export type LogTreasuryWithdrawalProcessedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogTreasuryWithdrawalProcessedEventObject
>;

export type LogTreasuryWithdrawalProcessedEventFilter =
  TypedEventFilter<LogTreasuryWithdrawalProcessedEvent>;

export interface LogTreasuryWithdrawalTransferredEventObject {
  riskpoolWalletAddress: string;
  to: string;
  amount: BigNumber;
}
export type LogTreasuryWithdrawalTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  LogTreasuryWithdrawalTransferredEventObject
>;

export type LogTreasuryWithdrawalTransferredEventFilter =
  TypedEventFilter<LogTreasuryWithdrawalTransferredEvent>;

export interface ITreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      fixedFee: PromiseOrValue<BigNumberish>,
      fractionalFee: PromiseOrValue<BigNumberish>,
      feeCalculationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITreasury.FeeSpecificationStructOutput] & {
        feeSpec: ITreasury.FeeSpecificationStructOutput;
      }
    >;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ITreasury.FeeSpecificationStructOutput] & {
        feeSpecification: ITreasury.FeeSpecificationStructOutput;
      }
    >;

    getFractionFullUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInstanceWallet(
      overrides?: CallOverrides
    ): Promise<[string] & { instanceWalletAddress: string }>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { riskpoolWalletAddress: string }>;

    processCapital(
      bundleId: PromiseOrValue<BigNumberish>,
      capitalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "processPremium(bytes32,uint256)"(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "processPremium(bytes32)"(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processWithdrawal(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCapitalFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInstanceWallet(
      instanceWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPremiumFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProductToken(
      productId: PromiseOrValue<BigNumberish>,
      erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      riskpoolWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createFeeSpecification(
    componentId: PromiseOrValue<BigNumberish>,
    fixedFee: PromiseOrValue<BigNumberish>,
    fractionalFee: PromiseOrValue<BigNumberish>,
    feeCalculationData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITreasury.FeeSpecificationStructOutput>;

  getComponentToken(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeeSpecification(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ITreasury.FeeSpecificationStructOutput>;

  getFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

  getInstanceWallet(overrides?: CallOverrides): Promise<string>;

  getRiskpoolWallet(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  processCapital(
    bundleId: PromiseOrValue<BigNumberish>,
    capitalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPayout(
    processId: PromiseOrValue<BytesLike>,
    payoutId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "processPremium(bytes32,uint256)"(
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "processPremium(bytes32)"(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processWithdrawal(
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCapitalFees(
    feeSpec: ITreasury.FeeSpecificationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInstanceWallet(
    instanceWalletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPremiumFees(
    feeSpec: ITreasury.FeeSpecificationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProductToken(
    productId: PromiseOrValue<BigNumberish>,
    erc20Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRiskpoolWallet(
    riskpoolId: PromiseOrValue<BigNumberish>,
    riskpoolWalletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      fixedFee: PromiseOrValue<BigNumberish>,
      fractionalFee: PromiseOrValue<BigNumberish>,
      feeCalculationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITreasury.FeeSpecificationStructOutput>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ITreasury.FeeSpecificationStructOutput>;

    getFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceWallet(overrides?: CallOverrides): Promise<string>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    processCapital(
      bundleId: PromiseOrValue<BigNumberish>,
      capitalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeAmount: BigNumber;
        netCapitalAmount: BigNumber;
      }
    >;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeAmount: BigNumber;
        netPayoutAmount: BigNumber;
      }
    >;

    "processPremium(bytes32,uint256)"(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        feeAmount: BigNumber;
        netPremiumAmount: BigNumber;
      }
    >;

    "processPremium(bytes32)"(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        feeAmount: BigNumber;
        netPremiumAmount: BigNumber;
      }
    >;

    processWithdrawal(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; netAmount: BigNumber }
    >;

    setCapitalFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstanceWallet(
      instanceWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductToken(
      productId: PromiseOrValue<BigNumberish>,
      erc20Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      riskpoolWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogTreasuryCapitalFeesSet(uint256,uint256,uint256)"(
      riskpoolId?: null,
      fixedFee?: null,
      fractionalFee?: null
    ): LogTreasuryCapitalFeesSetEventFilter;
    LogTreasuryCapitalFeesSet(
      riskpoolId?: null,
      fixedFee?: null,
      fractionalFee?: null
    ): LogTreasuryCapitalFeesSetEventFilter;

    "LogTreasuryCapitalProcessed(uint256,uint256,uint256)"(
      riskpoolId?: null,
      bundleId?: null,
      amount?: null
    ): LogTreasuryCapitalProcessedEventFilter;
    LogTreasuryCapitalProcessed(
      riskpoolId?: null,
      bundleId?: null,
      amount?: null
    ): LogTreasuryCapitalProcessedEventFilter;

    "LogTreasuryCapitalTransferred(address,address,uint256)"(
      from?: null,
      riskpoolWalletAddress?: null,
      amount?: null
    ): LogTreasuryCapitalTransferredEventFilter;
    LogTreasuryCapitalTransferred(
      from?: null,
      riskpoolWalletAddress?: null,
      amount?: null
    ): LogTreasuryCapitalTransferredEventFilter;

    "LogTreasuryFeesTransferred(address,address,uint256)"(
      from?: null,
      instanceWalletAddress?: null,
      amount?: null
    ): LogTreasuryFeesTransferredEventFilter;
    LogTreasuryFeesTransferred(
      from?: null,
      instanceWalletAddress?: null,
      amount?: null
    ): LogTreasuryFeesTransferredEventFilter;

    "LogTreasuryInstanceWalletSet(address)"(
      walletAddress?: null
    ): LogTreasuryInstanceWalletSetEventFilter;
    LogTreasuryInstanceWalletSet(
      walletAddress?: null
    ): LogTreasuryInstanceWalletSetEventFilter;

    "LogTreasuryPayoutProcessed(uint256,address,uint256)"(
      riskpoolId?: null,
      to?: null,
      amount?: null
    ): LogTreasuryPayoutProcessedEventFilter;
    LogTreasuryPayoutProcessed(
      riskpoolId?: null,
      to?: null,
      amount?: null
    ): LogTreasuryPayoutProcessedEventFilter;

    "LogTreasuryPayoutTransferred(address,address,uint256)"(
      riskpoolWalletAddress?: null,
      to?: null,
      amount?: null
    ): LogTreasuryPayoutTransferredEventFilter;
    LogTreasuryPayoutTransferred(
      riskpoolWalletAddress?: null,
      to?: null,
      amount?: null
    ): LogTreasuryPayoutTransferredEventFilter;

    "LogTreasuryPremiumFeesSet(uint256,uint256,uint256)"(
      productId?: null,
      fixedFee?: null,
      fractionalFee?: null
    ): LogTreasuryPremiumFeesSetEventFilter;
    LogTreasuryPremiumFeesSet(
      productId?: null,
      fixedFee?: null,
      fractionalFee?: null
    ): LogTreasuryPremiumFeesSetEventFilter;

    "LogTreasuryPremiumProcessed(bytes32,uint256)"(
      processId?: null,
      amount?: null
    ): LogTreasuryPremiumProcessedEventFilter;
    LogTreasuryPremiumProcessed(
      processId?: null,
      amount?: null
    ): LogTreasuryPremiumProcessedEventFilter;

    "LogTreasuryPremiumTransferred(address,address,uint256)"(
      from?: null,
      riskpoolWalletAddress?: null,
      amount?: null
    ): LogTreasuryPremiumTransferredEventFilter;
    LogTreasuryPremiumTransferred(
      from?: null,
      riskpoolWalletAddress?: null,
      amount?: null
    ): LogTreasuryPremiumTransferredEventFilter;

    "LogTreasuryProductTokenSet(uint256,uint256,address)"(
      productId?: null,
      riskpoolId?: null,
      erc20Address?: null
    ): LogTreasuryProductTokenSetEventFilter;
    LogTreasuryProductTokenSet(
      productId?: null,
      riskpoolId?: null,
      erc20Address?: null
    ): LogTreasuryProductTokenSetEventFilter;

    "LogTreasuryResumed()"(): LogTreasuryResumedEventFilter;
    LogTreasuryResumed(): LogTreasuryResumedEventFilter;

    "LogTreasuryRiskpoolWalletSet(uint256,address)"(
      riskpoolId?: null,
      walletAddress?: null
    ): LogTreasuryRiskpoolWalletSetEventFilter;
    LogTreasuryRiskpoolWalletSet(
      riskpoolId?: null,
      walletAddress?: null
    ): LogTreasuryRiskpoolWalletSetEventFilter;

    "LogTreasurySuspended()"(): LogTreasurySuspendedEventFilter;
    LogTreasurySuspended(): LogTreasurySuspendedEventFilter;

    "LogTreasuryWithdrawalProcessed(uint256,uint256,uint256)"(
      riskpoolId?: null,
      bundleId?: null,
      amount?: null
    ): LogTreasuryWithdrawalProcessedEventFilter;
    LogTreasuryWithdrawalProcessed(
      riskpoolId?: null,
      bundleId?: null,
      amount?: null
    ): LogTreasuryWithdrawalProcessedEventFilter;

    "LogTreasuryWithdrawalTransferred(address,address,uint256)"(
      riskpoolWalletAddress?: null,
      to?: null,
      amount?: null
    ): LogTreasuryWithdrawalTransferredEventFilter;
    LogTreasuryWithdrawalTransferred(
      riskpoolWalletAddress?: null,
      to?: null,
      amount?: null
    ): LogTreasuryWithdrawalTransferredEventFilter;
  };

  estimateGas: {
    createFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      fixedFee: PromiseOrValue<BigNumberish>,
      fractionalFee: PromiseOrValue<BigNumberish>,
      feeCalculationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processCapital(
      bundleId: PromiseOrValue<BigNumberish>,
      capitalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "processPremium(bytes32,uint256)"(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "processPremium(bytes32)"(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processWithdrawal(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCapitalFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInstanceWallet(
      instanceWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPremiumFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProductToken(
      productId: PromiseOrValue<BigNumberish>,
      erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      riskpoolWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      fixedFee: PromiseOrValue<BigNumberish>,
      fractionalFee: PromiseOrValue<BigNumberish>,
      feeCalculationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFractionFullUnit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processCapital(
      bundleId: PromiseOrValue<BigNumberish>,
      capitalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "processPremium(bytes32,uint256)"(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "processPremium(bytes32)"(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processWithdrawal(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCapitalFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInstanceWallet(
      instanceWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumFees(
      feeSpec: ITreasury.FeeSpecificationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProductToken(
      productId: PromiseOrValue<BigNumberish>,
      erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRiskpoolWallet(
      riskpoolId: PromiseOrValue<BigNumberish>,
      riskpoolWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
