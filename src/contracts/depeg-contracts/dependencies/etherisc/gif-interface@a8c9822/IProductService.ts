/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IProductServiceInterface extends utils.Interface {
  functions: {
    "adjustPremiumSumInsured(bytes32,uint256,uint256)": FunctionFragment;
    "cancelRequest(uint256)": FunctionFragment;
    "close(bytes32)": FunctionFragment;
    "closeClaim(bytes32,uint256)": FunctionFragment;
    "collectPremium(bytes32,uint256)": FunctionFragment;
    "confirmClaim(bytes32,uint256,uint256)": FunctionFragment;
    "decline(bytes32)": FunctionFragment;
    "declineClaim(bytes32,uint256)": FunctionFragment;
    "expire(bytes32)": FunctionFragment;
    "newApplication(address,uint256,uint256,bytes,bytes)": FunctionFragment;
    "newClaim(bytes32,uint256,bytes)": FunctionFragment;
    "newPayout(bytes32,uint256,uint256,bytes)": FunctionFragment;
    "processPayout(bytes32,uint256)": FunctionFragment;
    "request(bytes32,bytes,string,address,uint256)": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "underwrite(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustPremiumSumInsured"
      | "cancelRequest"
      | "close"
      | "closeClaim"
      | "collectPremium"
      | "confirmClaim"
      | "decline"
      | "declineClaim"
      | "expire"
      | "newApplication"
      | "newClaim"
      | "newPayout"
      | "processPayout"
      | "request"
      | "revoke"
      | "underwrite"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustPremiumSumInsured",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPremium",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmClaim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decline",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "declineClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expire",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newClaim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newPayout",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processPayout",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "underwrite",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustPremiumSumInsured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "declineClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underwrite", data: BytesLike): Result;

  events: {};
}

export interface IProductService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProductServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    close(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expire(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newApplication(
      owner: PromiseOrValue<string>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    request(
      processId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjustPremiumSumInsured(
    processId: PromiseOrValue<BytesLike>,
    expectedPremiumAmount: PromiseOrValue<BigNumberish>,
    sumInsuredAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  close(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectPremium(
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    confirmedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decline(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expire(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newApplication(
    owner: PromiseOrValue<string>,
    premiumAmount: PromiseOrValue<BigNumberish>,
    sumInsuredAmount: PromiseOrValue<BigNumberish>,
    metaData: PromiseOrValue<BytesLike>,
    applicationData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newClaim(
    processId: PromiseOrValue<BytesLike>,
    claimAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newPayout(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPayout(
    processId: PromiseOrValue<BytesLike>,
    payoutId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  request(
    processId: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    callbackMethodName: PromiseOrValue<string>,
    callbackContractAddress: PromiseOrValue<string>,
    responsibleOracleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revoke(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underwrite(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    close(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        feeAmount: BigNumber;
        netPremiumAmount: BigNumber;
      }
    >;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expire(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    newApplication(
      owner: PromiseOrValue<string>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    newClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeAmount: BigNumber;
        netPayoutAmount: BigNumber;
      }
    >;

    request(
      processId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    close(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expire(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newApplication(
      owner: PromiseOrValue<string>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    request(
      processId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    close(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decline(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expire(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newApplication(
      owner: PromiseOrValue<string>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      metaData: PromiseOrValue<BytesLike>,
      applicationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    request(
      processId: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underwrite(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
