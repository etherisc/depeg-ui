/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPolicy {
  export type ApplicationStruct = {
    state: PromiseOrValue<BigNumberish>;
    premiumAmount: PromiseOrValue<BigNumberish>;
    sumInsuredAmount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type ApplicationStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    premiumAmount: BigNumber;
    sumInsuredAmount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type ClaimStruct = {
    state: PromiseOrValue<BigNumberish>;
    claimAmount: PromiseOrValue<BigNumberish>;
    paidAmount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type ClaimStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    claimAmount: BigNumber;
    paidAmount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type MetadataStruct = {
    owner: PromiseOrValue<string>;
    productId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type MetadataStructOutput = [
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    productId: BigNumber;
    state: number;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type PayoutStruct = {
    claimId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type PayoutStructOutput = [
    BigNumber,
    number,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    claimId: BigNumber;
    state: number;
    amount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type PolicyStruct = {
    state: PromiseOrValue<BigNumberish>;
    premiumExpectedAmount: PromiseOrValue<BigNumberish>;
    premiumPaidAmount: PromiseOrValue<BigNumberish>;
    claimsCount: PromiseOrValue<BigNumberish>;
    openClaimsCount: PromiseOrValue<BigNumberish>;
    payoutMaxAmount: PromiseOrValue<BigNumberish>;
    payoutAmount: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type PolicyStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    premiumExpectedAmount: BigNumber;
    premiumPaidAmount: BigNumber;
    claimsCount: BigNumber;
    openClaimsCount: BigNumber;
    payoutMaxAmount: BigNumber;
    payoutAmount: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface PolicyControllerInterface extends utils.Interface {
  functions: {
    "adjustPremiumSumInsured(bytes32,uint256,uint256)": FunctionFragment;
    "applications(bytes32)": FunctionFragment;
    "claims(bytes32,uint256)": FunctionFragment;
    "closeClaim(bytes32,uint256)": FunctionFragment;
    "closePolicy(bytes32)": FunctionFragment;
    "collectPremium(bytes32,uint256)": FunctionFragment;
    "confirmClaim(bytes32,uint256,uint256)": FunctionFragment;
    "createApplication(bytes32,uint256,uint256,bytes)": FunctionFragment;
    "createClaim(bytes32,uint256,bytes)": FunctionFragment;
    "createPayout(bytes32,uint256,uint256,bytes)": FunctionFragment;
    "createPolicy(bytes32)": FunctionFragment;
    "createPolicyFlow(address,uint256,bytes)": FunctionFragment;
    "declineApplication(bytes32)": FunctionFragment;
    "declineClaim(bytes32,uint256)": FunctionFragment;
    "expirePolicy(bytes32)": FunctionFragment;
    "getApplication(bytes32)": FunctionFragment;
    "getClaim(bytes32,uint256)": FunctionFragment;
    "getMetadata(bytes32)": FunctionFragment;
    "getNumberOfClaims(bytes32)": FunctionFragment;
    "getNumberOfPayouts(bytes32)": FunctionFragment;
    "getPayout(bytes32,uint256)": FunctionFragment;
    "getPolicy(bytes32)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "metadata(bytes32)": FunctionFragment;
    "payoutCount(bytes32)": FunctionFragment;
    "payouts(bytes32,uint256)": FunctionFragment;
    "policies(bytes32)": FunctionFragment;
    "processIds()": FunctionFragment;
    "processPayout(bytes32,uint256)": FunctionFragment;
    "revokeApplication(bytes32)": FunctionFragment;
    "underwriteApplication(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustPremiumSumInsured"
      | "applications"
      | "claims"
      | "closeClaim"
      | "closePolicy"
      | "collectPremium"
      | "confirmClaim"
      | "createApplication"
      | "createClaim"
      | "createPayout"
      | "createPolicy"
      | "createPolicyFlow"
      | "declineApplication"
      | "declineClaim"
      | "expirePolicy"
      | "getApplication"
      | "getClaim"
      | "getMetadata"
      | "getNumberOfClaims"
      | "getNumberOfPayouts"
      | "getPayout"
      | "getPolicy"
      | "initialize"
      | "metadata"
      | "payoutCount"
      | "payouts"
      | "policies"
      | "processIds"
      | "processPayout"
      | "revokeApplication"
      | "underwriteApplication"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustPremiumSumInsured",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closePolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPremium",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmClaim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createApplication",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPayout",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicyFlow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "declineApplication",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "declineClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expirePolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplication",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfClaims",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfPayouts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayout",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "payouts",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processPayout",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeApplication",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "underwriteApplication",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustPremiumSumInsured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicyFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payouts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "processIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underwriteApplication",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LogApplicationCreated(bytes32,uint256,uint256)": EventFragment;
    "LogApplicationDeclined(bytes32)": EventFragment;
    "LogApplicationPremiumAdjusted(bytes32,uint256,uint256)": EventFragment;
    "LogApplicationRevoked(bytes32)": EventFragment;
    "LogApplicationSumInsuredAdjusted(bytes32,uint256,uint256)": EventFragment;
    "LogApplicationUnderwritten(bytes32)": EventFragment;
    "LogClaimClosed(bytes32,uint256)": EventFragment;
    "LogClaimConfirmed(bytes32,uint256,uint256)": EventFragment;
    "LogClaimCreated(bytes32,uint256,uint256)": EventFragment;
    "LogClaimDeclined(bytes32,uint256)": EventFragment;
    "LogMetadataCreated(address,bytes32,uint256,uint8)": EventFragment;
    "LogMetadataStateChanged(bytes32,uint8)": EventFragment;
    "LogPayoutCreated(bytes32,uint256,uint256,uint256)": EventFragment;
    "LogPayoutProcessed(bytes32,uint256)": EventFragment;
    "LogPolicyClosed(bytes32)": EventFragment;
    "LogPolicyCreated(bytes32)": EventFragment;
    "LogPolicyExpired(bytes32)": EventFragment;
    "LogPolicyPremiumAdjusted(bytes32,uint256,uint256)": EventFragment;
    "LogPremiumCollected(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogApplicationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogApplicationDeclined"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogApplicationPremiumAdjusted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogApplicationRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogApplicationSumInsuredAdjusted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogApplicationUnderwritten"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaimClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaimConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaimDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMetadataCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMetadataStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPayoutCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPayoutProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPolicyClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPolicyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPolicyExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPolicyPremiumAdjusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPremiumCollected"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LogApplicationCreatedEventObject {
  processId: string;
  premiumAmount: BigNumber;
  sumInsuredAmount: BigNumber;
}
export type LogApplicationCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogApplicationCreatedEventObject
>;

export type LogApplicationCreatedEventFilter =
  TypedEventFilter<LogApplicationCreatedEvent>;

export interface LogApplicationDeclinedEventObject {
  processId: string;
}
export type LogApplicationDeclinedEvent = TypedEvent<
  [string],
  LogApplicationDeclinedEventObject
>;

export type LogApplicationDeclinedEventFilter =
  TypedEventFilter<LogApplicationDeclinedEvent>;

export interface LogApplicationPremiumAdjustedEventObject {
  processId: string;
  premiumAmountOld: BigNumber;
  premiumAmount: BigNumber;
}
export type LogApplicationPremiumAdjustedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogApplicationPremiumAdjustedEventObject
>;

export type LogApplicationPremiumAdjustedEventFilter =
  TypedEventFilter<LogApplicationPremiumAdjustedEvent>;

export interface LogApplicationRevokedEventObject {
  processId: string;
}
export type LogApplicationRevokedEvent = TypedEvent<
  [string],
  LogApplicationRevokedEventObject
>;

export type LogApplicationRevokedEventFilter =
  TypedEventFilter<LogApplicationRevokedEvent>;

export interface LogApplicationSumInsuredAdjustedEventObject {
  processId: string;
  sumInsuredAmountOld: BigNumber;
  sumInsuredAmount: BigNumber;
}
export type LogApplicationSumInsuredAdjustedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogApplicationSumInsuredAdjustedEventObject
>;

export type LogApplicationSumInsuredAdjustedEventFilter =
  TypedEventFilter<LogApplicationSumInsuredAdjustedEvent>;

export interface LogApplicationUnderwrittenEventObject {
  processId: string;
}
export type LogApplicationUnderwrittenEvent = TypedEvent<
  [string],
  LogApplicationUnderwrittenEventObject
>;

export type LogApplicationUnderwrittenEventFilter =
  TypedEventFilter<LogApplicationUnderwrittenEvent>;

export interface LogClaimClosedEventObject {
  processId: string;
  claimId: BigNumber;
}
export type LogClaimClosedEvent = TypedEvent<
  [string, BigNumber],
  LogClaimClosedEventObject
>;

export type LogClaimClosedEventFilter = TypedEventFilter<LogClaimClosedEvent>;

export interface LogClaimConfirmedEventObject {
  processId: string;
  claimId: BigNumber;
  confirmedAmount: BigNumber;
}
export type LogClaimConfirmedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogClaimConfirmedEventObject
>;

export type LogClaimConfirmedEventFilter =
  TypedEventFilter<LogClaimConfirmedEvent>;

export interface LogClaimCreatedEventObject {
  processId: string;
  claimId: BigNumber;
  claimAmount: BigNumber;
}
export type LogClaimCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogClaimCreatedEventObject
>;

export type LogClaimCreatedEventFilter = TypedEventFilter<LogClaimCreatedEvent>;

export interface LogClaimDeclinedEventObject {
  processId: string;
  claimId: BigNumber;
}
export type LogClaimDeclinedEvent = TypedEvent<
  [string, BigNumber],
  LogClaimDeclinedEventObject
>;

export type LogClaimDeclinedEventFilter =
  TypedEventFilter<LogClaimDeclinedEvent>;

export interface LogMetadataCreatedEventObject {
  owner: string;
  processId: string;
  productId: BigNumber;
  state: number;
}
export type LogMetadataCreatedEvent = TypedEvent<
  [string, string, BigNumber, number],
  LogMetadataCreatedEventObject
>;

export type LogMetadataCreatedEventFilter =
  TypedEventFilter<LogMetadataCreatedEvent>;

export interface LogMetadataStateChangedEventObject {
  processId: string;
  state: number;
}
export type LogMetadataStateChangedEvent = TypedEvent<
  [string, number],
  LogMetadataStateChangedEventObject
>;

export type LogMetadataStateChangedEventFilter =
  TypedEventFilter<LogMetadataStateChangedEvent>;

export interface LogPayoutCreatedEventObject {
  processId: string;
  claimId: BigNumber;
  payoutId: BigNumber;
  amount: BigNumber;
}
export type LogPayoutCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogPayoutCreatedEventObject
>;

export type LogPayoutCreatedEventFilter =
  TypedEventFilter<LogPayoutCreatedEvent>;

export interface LogPayoutProcessedEventObject {
  processId: string;
  payoutId: BigNumber;
}
export type LogPayoutProcessedEvent = TypedEvent<
  [string, BigNumber],
  LogPayoutProcessedEventObject
>;

export type LogPayoutProcessedEventFilter =
  TypedEventFilter<LogPayoutProcessedEvent>;

export interface LogPolicyClosedEventObject {
  processId: string;
}
export type LogPolicyClosedEvent = TypedEvent<
  [string],
  LogPolicyClosedEventObject
>;

export type LogPolicyClosedEventFilter = TypedEventFilter<LogPolicyClosedEvent>;

export interface LogPolicyCreatedEventObject {
  processId: string;
}
export type LogPolicyCreatedEvent = TypedEvent<
  [string],
  LogPolicyCreatedEventObject
>;

export type LogPolicyCreatedEventFilter =
  TypedEventFilter<LogPolicyCreatedEvent>;

export interface LogPolicyExpiredEventObject {
  processId: string;
}
export type LogPolicyExpiredEvent = TypedEvent<
  [string],
  LogPolicyExpiredEventObject
>;

export type LogPolicyExpiredEventFilter =
  TypedEventFilter<LogPolicyExpiredEvent>;

export interface LogPolicyPremiumAdjustedEventObject {
  processId: string;
  premiumExpectedAmountOld: BigNumber;
  premiumExpectedAmount: BigNumber;
}
export type LogPolicyPremiumAdjustedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogPolicyPremiumAdjustedEventObject
>;

export type LogPolicyPremiumAdjustedEventFilter =
  TypedEventFilter<LogPolicyPremiumAdjustedEvent>;

export interface LogPremiumCollectedEventObject {
  processId: string;
  amount: BigNumber;
}
export type LogPremiumCollectedEvent = TypedEvent<
  [string, BigNumber],
  LogPremiumCollectedEventObject
>;

export type LogPremiumCollectedEventFilter =
  TypedEventFilter<LogPremiumCollectedEvent>;

export interface PolicyController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolicyControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        state: number;
        premiumAmount: BigNumber;
        sumInsuredAmount: BigNumber;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    claims(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        state: number;
        claimAmount: BigNumber;
        paidAmount: BigNumber;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createApplication(
      processId: PromiseOrValue<BytesLike>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPolicyFlow(
      owner: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expirePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.ApplicationStructOutput] & {
        application: IPolicy.ApplicationStructOutput;
      }
    >;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.ClaimStructOutput] & { claim: IPolicy.ClaimStructOutput }
    >;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.MetadataStructOutput] & {
        _metadata: IPolicy.MetadataStructOutput;
      }
    >;

    getNumberOfClaims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfClaims: BigNumber }>;

    getNumberOfPayouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfPayouts: BigNumber }>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.PayoutStructOutput] & { payout: IPolicy.PayoutStructOutput }
    >;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.PolicyStructOutput] & { policy: IPolicy.PolicyStructOutput }
    >;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    metadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, string, BigNumber, BigNumber] & {
        owner: string;
        productId: BigNumber;
        state: number;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    payoutCount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payouts(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, BigNumber, BigNumber] & {
        claimId: BigNumber;
        state: number;
        amount: BigNumber;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    policies(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        state: number;
        premiumExpectedAmount: BigNumber;
        premiumPaidAmount: BigNumber;
        claimsCount: BigNumber;
        openClaimsCount: BigNumber;
        payoutMaxAmount: BigNumber;
        payoutAmount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    processIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underwriteApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjustPremiumSumInsured(
    processId: PromiseOrValue<BytesLike>,
    expectedPremiumAmount: PromiseOrValue<BigNumberish>,
    sumInsuredAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applications(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      state: number;
      premiumAmount: BigNumber;
      sumInsuredAmount: BigNumber;
      data: string;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  claims(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      state: number;
      claimAmount: BigNumber;
      paidAmount: BigNumber;
      data: string;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  closeClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closePolicy(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectPremium(
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    confirmedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createApplication(
    processId: PromiseOrValue<BytesLike>,
    premiumAmount: PromiseOrValue<BigNumberish>,
    sumInsuredAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createClaim(
    processId: PromiseOrValue<BytesLike>,
    claimAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPayout(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    payoutAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPolicy(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPolicyFlow(
    owner: PromiseOrValue<string>,
    productId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineApplication(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expirePolicy(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApplication(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPolicy.ApplicationStructOutput>;

  getClaim(
    processId: PromiseOrValue<BytesLike>,
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPolicy.ClaimStructOutput>;

  getMetadata(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPolicy.MetadataStructOutput>;

  getNumberOfClaims(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfPayouts(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayout(
    processId: PromiseOrValue<BytesLike>,
    payoutId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPolicy.PayoutStructOutput>;

  getPolicy(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPolicy.PolicyStructOutput>;

  initialize(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  metadata(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, string, BigNumber, BigNumber] & {
      owner: string;
      productId: BigNumber;
      state: number;
      data: string;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  payoutCount(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payouts(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string, BigNumber, BigNumber] & {
      claimId: BigNumber;
      state: number;
      amount: BigNumber;
      data: string;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  policies(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      state: number;
      premiumExpectedAmount: BigNumber;
      premiumPaidAmount: BigNumber;
      claimsCount: BigNumber;
      openClaimsCount: BigNumber;
      payoutMaxAmount: BigNumber;
      payoutAmount: BigNumber;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  processIds(overrides?: CallOverrides): Promise<BigNumber>;

  processPayout(
    processId: PromiseOrValue<BytesLike>,
    payoutId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeApplication(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underwriteApplication(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    applications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        state: number;
        premiumAmount: BigNumber;
        sumInsuredAmount: BigNumber;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    claims(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        state: number;
        claimAmount: BigNumber;
        paidAmount: BigNumber;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createApplication(
      processId: PromiseOrValue<BytesLike>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPolicyFlow(
      owner: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    declineApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expirePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPolicy.ApplicationStructOutput>;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPolicy.ClaimStructOutput>;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPolicy.MetadataStructOutput>;

    getNumberOfClaims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfPayouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPolicy.PayoutStructOutput>;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPolicy.PolicyStructOutput>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    metadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, string, BigNumber, BigNumber] & {
        owner: string;
        productId: BigNumber;
        state: number;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    payoutCount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payouts(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, BigNumber, BigNumber] & {
        claimId: BigNumber;
        state: number;
        amount: BigNumber;
        data: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    policies(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        state: number;
        premiumExpectedAmount: BigNumber;
        premiumPaidAmount: BigNumber;
        claimsCount: BigNumber;
        openClaimsCount: BigNumber;
        payoutMaxAmount: BigNumber;
        payoutAmount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    processIds(overrides?: CallOverrides): Promise<BigNumber>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    underwriteApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LogApplicationCreated(bytes32,uint256,uint256)"(
      processId?: null,
      premiumAmount?: null,
      sumInsuredAmount?: null
    ): LogApplicationCreatedEventFilter;
    LogApplicationCreated(
      processId?: null,
      premiumAmount?: null,
      sumInsuredAmount?: null
    ): LogApplicationCreatedEventFilter;

    "LogApplicationDeclined(bytes32)"(
      processId?: null
    ): LogApplicationDeclinedEventFilter;
    LogApplicationDeclined(processId?: null): LogApplicationDeclinedEventFilter;

    "LogApplicationPremiumAdjusted(bytes32,uint256,uint256)"(
      processId?: null,
      premiumAmountOld?: null,
      premiumAmount?: null
    ): LogApplicationPremiumAdjustedEventFilter;
    LogApplicationPremiumAdjusted(
      processId?: null,
      premiumAmountOld?: null,
      premiumAmount?: null
    ): LogApplicationPremiumAdjustedEventFilter;

    "LogApplicationRevoked(bytes32)"(
      processId?: null
    ): LogApplicationRevokedEventFilter;
    LogApplicationRevoked(processId?: null): LogApplicationRevokedEventFilter;

    "LogApplicationSumInsuredAdjusted(bytes32,uint256,uint256)"(
      processId?: null,
      sumInsuredAmountOld?: null,
      sumInsuredAmount?: null
    ): LogApplicationSumInsuredAdjustedEventFilter;
    LogApplicationSumInsuredAdjusted(
      processId?: null,
      sumInsuredAmountOld?: null,
      sumInsuredAmount?: null
    ): LogApplicationSumInsuredAdjustedEventFilter;

    "LogApplicationUnderwritten(bytes32)"(
      processId?: null
    ): LogApplicationUnderwrittenEventFilter;
    LogApplicationUnderwritten(
      processId?: null
    ): LogApplicationUnderwrittenEventFilter;

    "LogClaimClosed(bytes32,uint256)"(
      processId?: null,
      claimId?: null
    ): LogClaimClosedEventFilter;
    LogClaimClosed(processId?: null, claimId?: null): LogClaimClosedEventFilter;

    "LogClaimConfirmed(bytes32,uint256,uint256)"(
      processId?: null,
      claimId?: null,
      confirmedAmount?: null
    ): LogClaimConfirmedEventFilter;
    LogClaimConfirmed(
      processId?: null,
      claimId?: null,
      confirmedAmount?: null
    ): LogClaimConfirmedEventFilter;

    "LogClaimCreated(bytes32,uint256,uint256)"(
      processId?: null,
      claimId?: null,
      claimAmount?: null
    ): LogClaimCreatedEventFilter;
    LogClaimCreated(
      processId?: null,
      claimId?: null,
      claimAmount?: null
    ): LogClaimCreatedEventFilter;

    "LogClaimDeclined(bytes32,uint256)"(
      processId?: null,
      claimId?: null
    ): LogClaimDeclinedEventFilter;
    LogClaimDeclined(
      processId?: null,
      claimId?: null
    ): LogClaimDeclinedEventFilter;

    "LogMetadataCreated(address,bytes32,uint256,uint8)"(
      owner?: null,
      processId?: null,
      productId?: null,
      state?: null
    ): LogMetadataCreatedEventFilter;
    LogMetadataCreated(
      owner?: null,
      processId?: null,
      productId?: null,
      state?: null
    ): LogMetadataCreatedEventFilter;

    "LogMetadataStateChanged(bytes32,uint8)"(
      processId?: null,
      state?: null
    ): LogMetadataStateChangedEventFilter;
    LogMetadataStateChanged(
      processId?: null,
      state?: null
    ): LogMetadataStateChangedEventFilter;

    "LogPayoutCreated(bytes32,uint256,uint256,uint256)"(
      processId?: null,
      claimId?: null,
      payoutId?: null,
      amount?: null
    ): LogPayoutCreatedEventFilter;
    LogPayoutCreated(
      processId?: null,
      claimId?: null,
      payoutId?: null,
      amount?: null
    ): LogPayoutCreatedEventFilter;

    "LogPayoutProcessed(bytes32,uint256)"(
      processId?: null,
      payoutId?: null
    ): LogPayoutProcessedEventFilter;
    LogPayoutProcessed(
      processId?: null,
      payoutId?: null
    ): LogPayoutProcessedEventFilter;

    "LogPolicyClosed(bytes32)"(processId?: null): LogPolicyClosedEventFilter;
    LogPolicyClosed(processId?: null): LogPolicyClosedEventFilter;

    "LogPolicyCreated(bytes32)"(processId?: null): LogPolicyCreatedEventFilter;
    LogPolicyCreated(processId?: null): LogPolicyCreatedEventFilter;

    "LogPolicyExpired(bytes32)"(processId?: null): LogPolicyExpiredEventFilter;
    LogPolicyExpired(processId?: null): LogPolicyExpiredEventFilter;

    "LogPolicyPremiumAdjusted(bytes32,uint256,uint256)"(
      processId?: null,
      premiumExpectedAmountOld?: null,
      premiumExpectedAmount?: null
    ): LogPolicyPremiumAdjustedEventFilter;
    LogPolicyPremiumAdjusted(
      processId?: null,
      premiumExpectedAmountOld?: null,
      premiumExpectedAmount?: null
    ): LogPolicyPremiumAdjustedEventFilter;

    "LogPremiumCollected(bytes32,uint256)"(
      processId?: null,
      amount?: null
    ): LogPremiumCollectedEventFilter;
    LogPremiumCollected(
      processId?: null,
      amount?: null
    ): LogPremiumCollectedEventFilter;
  };

  estimateGas: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claims(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createApplication(
      processId: PromiseOrValue<BytesLike>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPolicyFlow(
      owner: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expirePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfClaims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfPayouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    metadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutCount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payouts(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policies(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processIds(overrides?: CallOverrides): Promise<BigNumber>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underwriteApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustPremiumSumInsured(
      processId: PromiseOrValue<BytesLike>,
      expectedPremiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applications(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claims(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectPremium(
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      confirmedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createApplication(
      processId: PromiseOrValue<BytesLike>,
      premiumAmount: PromiseOrValue<BigNumberish>,
      sumInsuredAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createClaim(
      processId: PromiseOrValue<BytesLike>,
      claimAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPayout(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      payoutAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPolicyFlow(
      owner: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expirePolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaim(
      processId: PromiseOrValue<BytesLike>,
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfClaims(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfPayouts(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    metadata(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutCount(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payouts(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policies(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processPayout(
      processId: PromiseOrValue<BytesLike>,
      payoutId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underwriteApplication(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
