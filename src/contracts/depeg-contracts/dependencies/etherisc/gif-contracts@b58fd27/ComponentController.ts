/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ComponentControllerInterface extends utils.Interface {
  functions: {
    "approve(uint256)": FunctionFragment;
    "archiveFromComponentOwner(uint256)": FunctionFragment;
    "archiveFromInstanceOperator(uint256)": FunctionFragment;
    "components()": FunctionFragment;
    "decline(uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getComponent(uint256)": FunctionFragment;
    "getComponentId(address)": FunctionFragment;
    "getComponentState(uint256)": FunctionFragment;
    "getComponentType(uint256)": FunctionFragment;
    "getOracleId(uint256)": FunctionFragment;
    "getPolicyFlow(uint256)": FunctionFragment;
    "getProductId(uint256)": FunctionFragment;
    "getRequiredRole(uint8)": FunctionFragment;
    "getRiskpoolId(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isOracle(uint256)": FunctionFragment;
    "isProduct(uint256)": FunctionFragment;
    "isRiskpool(uint256)": FunctionFragment;
    "oracles()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "products()": FunctionFragment;
    "propose(address)": FunctionFragment;
    "resume(uint256)": FunctionFragment;
    "riskpools()": FunctionFragment;
    "suspend(uint256)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "archiveFromComponentOwner"
      | "archiveFromInstanceOperator"
      | "components"
      | "decline"
      | "exists"
      | "getComponent"
      | "getComponentId"
      | "getComponentState"
      | "getComponentType"
      | "getOracleId"
      | "getPolicyFlow"
      | "getProductId"
      | "getRequiredRole"
      | "getRiskpoolId"
      | "initialize"
      | "isOracle"
      | "isProduct"
      | "isRiskpool"
      | "oracles"
      | "pause"
      | "products"
      | "propose"
      | "resume"
      | "riskpools"
      | "suspend"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "archiveFromComponentOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "archiveFromInstanceOperator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "components",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decline",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyFlow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredRole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOracle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProduct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRiskpool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "oracles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "products", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resume",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "riskpools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "suspend",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "archiveFromComponentOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archiveFromInstanceOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "components", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRiskpool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskpools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "suspend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LogComponentApproved(uint256)": EventFragment;
    "LogComponentArchived(uint256)": EventFragment;
    "LogComponentDeclined(uint256)": EventFragment;
    "LogComponentPaused(uint256)": EventFragment;
    "LogComponentProposed(bytes32,uint8,address,uint256)": EventFragment;
    "LogComponentResumed(uint256)": EventFragment;
    "LogComponentStateChanged(uint256,uint8,uint8)": EventFragment;
    "LogComponentSuspended(uint256)": EventFragment;
    "LogComponentUnpaused(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentUnpaused"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LogComponentApprovedEventObject {
  id: BigNumber;
}
export type LogComponentApprovedEvent = TypedEvent<
  [BigNumber],
  LogComponentApprovedEventObject
>;

export type LogComponentApprovedEventFilter =
  TypedEventFilter<LogComponentApprovedEvent>;

export interface LogComponentArchivedEventObject {
  id: BigNumber;
}
export type LogComponentArchivedEvent = TypedEvent<
  [BigNumber],
  LogComponentArchivedEventObject
>;

export type LogComponentArchivedEventFilter =
  TypedEventFilter<LogComponentArchivedEvent>;

export interface LogComponentDeclinedEventObject {
  id: BigNumber;
}
export type LogComponentDeclinedEvent = TypedEvent<
  [BigNumber],
  LogComponentDeclinedEventObject
>;

export type LogComponentDeclinedEventFilter =
  TypedEventFilter<LogComponentDeclinedEvent>;

export interface LogComponentPausedEventObject {
  id: BigNumber;
}
export type LogComponentPausedEvent = TypedEvent<
  [BigNumber],
  LogComponentPausedEventObject
>;

export type LogComponentPausedEventFilter =
  TypedEventFilter<LogComponentPausedEvent>;

export interface LogComponentProposedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  id: BigNumber;
}
export type LogComponentProposedEvent = TypedEvent<
  [string, number, string, BigNumber],
  LogComponentProposedEventObject
>;

export type LogComponentProposedEventFilter =
  TypedEventFilter<LogComponentProposedEvent>;

export interface LogComponentResumedEventObject {
  id: BigNumber;
}
export type LogComponentResumedEvent = TypedEvent<
  [BigNumber],
  LogComponentResumedEventObject
>;

export type LogComponentResumedEventFilter =
  TypedEventFilter<LogComponentResumedEvent>;

export interface LogComponentStateChangedEventObject {
  id: BigNumber;
  stateOld: number;
  stateNew: number;
}
export type LogComponentStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogComponentStateChangedEventObject
>;

export type LogComponentStateChangedEventFilter =
  TypedEventFilter<LogComponentStateChangedEvent>;

export interface LogComponentSuspendedEventObject {
  id: BigNumber;
}
export type LogComponentSuspendedEvent = TypedEvent<
  [BigNumber],
  LogComponentSuspendedEventObject
>;

export type LogComponentSuspendedEventFilter =
  TypedEventFilter<LogComponentSuspendedEvent>;

export interface LogComponentUnpausedEventObject {
  id: BigNumber;
}
export type LogComponentUnpausedEvent = TypedEvent<
  [BigNumber],
  LogComponentUnpausedEventObject
>;

export type LogComponentUnpausedEventFilter =
  TypedEventFilter<LogComponentUnpausedEvent>;

export interface ComponentController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ComponentControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archiveFromComponentOwner(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archiveFromInstanceOperator(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    components(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    decline(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { component: string }>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getComponentState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { componentState: number }>;

    getComponentType(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { componentType: number }>;

    getOracleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { oracleId: BigNumber }>;

    getPolicyFlow(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _policyFlow: string }>;

    getProductId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { productId: BigNumber }>;

    getRequiredRole(
      componentType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRiskpoolId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { riskpoolId: BigNumber }>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOracle(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProduct(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRiskpool(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracles(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    pause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    products(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    propose(
      component: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resume(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    riskpools(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    suspend(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archiveFromComponentOwner(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archiveFromInstanceOperator(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  components(overrides?: CallOverrides): Promise<BigNumber>;

  decline(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exists(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getComponent(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getComponentId(
    componentAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getComponentState(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getComponentType(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getOracleId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPolicyFlow(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProductId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequiredRole(
    componentType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRiskpoolId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOracle(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProduct(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRiskpool(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracles(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  products(overrides?: CallOverrides): Promise<BigNumber>;

  propose(
    component: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resume(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  riskpools(overrides?: CallOverrides): Promise<BigNumber>;

  suspend(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    archiveFromComponentOwner(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    archiveFromInstanceOperator(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    components(overrides?: CallOverrides): Promise<BigNumber>;

    decline(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getComponentType(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getOracleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyFlow(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProductId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredRole(
      componentType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRiskpoolId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOracle(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProduct(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRiskpool(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracles(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    products(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      component: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resume(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    riskpools(overrides?: CallOverrides): Promise<BigNumber>;

    suspend(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LogComponentApproved(uint256)"(id?: null): LogComponentApprovedEventFilter;
    LogComponentApproved(id?: null): LogComponentApprovedEventFilter;

    "LogComponentArchived(uint256)"(id?: null): LogComponentArchivedEventFilter;
    LogComponentArchived(id?: null): LogComponentArchivedEventFilter;

    "LogComponentDeclined(uint256)"(id?: null): LogComponentDeclinedEventFilter;
    LogComponentDeclined(id?: null): LogComponentDeclinedEventFilter;

    "LogComponentPaused(uint256)"(id?: null): LogComponentPausedEventFilter;
    LogComponentPaused(id?: null): LogComponentPausedEventFilter;

    "LogComponentProposed(bytes32,uint8,address,uint256)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;
    LogComponentProposed(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;

    "LogComponentResumed(uint256)"(id?: null): LogComponentResumedEventFilter;
    LogComponentResumed(id?: null): LogComponentResumedEventFilter;

    "LogComponentStateChanged(uint256,uint8,uint8)"(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;
    LogComponentStateChanged(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;

    "LogComponentSuspended(uint256)"(
      id?: null
    ): LogComponentSuspendedEventFilter;
    LogComponentSuspended(id?: null): LogComponentSuspendedEventFilter;

    "LogComponentUnpaused(uint256)"(id?: null): LogComponentUnpausedEventFilter;
    LogComponentUnpaused(id?: null): LogComponentUnpausedEventFilter;
  };

  estimateGas: {
    approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archiveFromComponentOwner(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archiveFromInstanceOperator(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    components(overrides?: CallOverrides): Promise<BigNumber>;

    decline(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentType(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyFlow(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredRole(
      componentType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskpoolId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOracle(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProduct(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRiskpool(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    products(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      component: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resume(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    riskpools(overrides?: CallOverrides): Promise<BigNumber>;

    suspend(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archiveFromComponentOwner(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archiveFromInstanceOperator(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    components(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decline(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponent(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentId(
      componentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentState(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentType(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyFlow(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredRole(
      componentType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskpoolId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOracle(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProduct(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRiskpool(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    products(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      component: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resume(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    riskpools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suspend(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
