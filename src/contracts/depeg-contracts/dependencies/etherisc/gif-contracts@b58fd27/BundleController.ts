/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IBundle {
  export type BundleStruct = {
    id: PromiseOrValue<BigNumberish>;
    riskpoolId: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    filter: PromiseOrValue<BytesLike>;
    capital: PromiseOrValue<BigNumberish>;
    lockedCapital: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    riskpoolId: BigNumber;
    tokenId: BigNumber;
    state: number;
    filter: string;
    capital: BigNumber;
    lockedCapital: BigNumber;
    balance: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface BundleControllerInterface extends utils.Interface {
  functions: {
    "bundles()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "collateralizePolicy(uint256,bytes32,uint256)": FunctionFragment;
    "create(address,uint256,bytes,uint256)": FunctionFragment;
    "defund(uint256,uint256)": FunctionFragment;
    "fund(uint256,uint256)": FunctionFragment;
    "getBalance(uint256)": FunctionFragment;
    "getBundle(uint256)": FunctionFragment;
    "getCapacity(uint256)": FunctionFragment;
    "getFilter(uint256)": FunctionFragment;
    "getOwner(uint256)": FunctionFragment;
    "getState(uint256)": FunctionFragment;
    "getToken()": FunctionFragment;
    "getTotalValueLocked(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "processPayout(uint256,bytes32,uint256)": FunctionFragment;
    "processPremium(uint256,bytes32,uint256)": FunctionFragment;
    "releasePolicy(uint256,bytes32)": FunctionFragment;
    "unburntBundles(uint256)": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bundles"
      | "burn"
      | "close"
      | "collateralizePolicy"
      | "create"
      | "defund"
      | "fund"
      | "getBalance"
      | "getBundle"
      | "getCapacity"
      | "getFilter"
      | "getOwner"
      | "getState"
      | "getToken"
      | "getTotalValueLocked"
      | "initialize"
      | "lock"
      | "processPayout"
      | "processPremium"
      | "releasePolicy"
      | "unburntBundles"
      | "unlock"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bundles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizePolicy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapacity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFilter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processPayout",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processPremium",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "releasePolicy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unburntBundles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "bundles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralizePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "defund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFilter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unburntBundles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LogBundleCapitalProvided(uint256,address,uint256,uint256)": EventFragment;
    "LogBundleCapitalWithdrawn(uint256,address,uint256,uint256)": EventFragment;
    "LogBundleCreated(uint256,uint256,address,uint8,uint256)": EventFragment;
    "LogBundlePayoutProcessed(uint256,bytes32,uint256)": EventFragment;
    "LogBundlePolicyCollateralized(uint256,bytes32,uint256,uint256)": EventFragment;
    "LogBundlePolicyReleased(uint256,bytes32,uint256,uint256)": EventFragment;
    "LogBundleStateChanged(uint256,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundleCapitalProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundleCapitalWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundlePayoutProcessed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBundlePolicyCollateralized"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundlePolicyReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBundleStateChanged"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LogBundleCapitalProvidedEventObject {
  bundleId: BigNumber;
  sender: string;
  amount: BigNumber;
  capacity: BigNumber;
}
export type LogBundleCapitalProvidedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  LogBundleCapitalProvidedEventObject
>;

export type LogBundleCapitalProvidedEventFilter =
  TypedEventFilter<LogBundleCapitalProvidedEvent>;

export interface LogBundleCapitalWithdrawnEventObject {
  bundleId: BigNumber;
  recipient: string;
  amount: BigNumber;
  capacity: BigNumber;
}
export type LogBundleCapitalWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  LogBundleCapitalWithdrawnEventObject
>;

export type LogBundleCapitalWithdrawnEventFilter =
  TypedEventFilter<LogBundleCapitalWithdrawnEvent>;

export interface LogBundleCreatedEventObject {
  bundleId: BigNumber;
  riskpoolId: BigNumber;
  owner: string;
  state: number;
  amount: BigNumber;
}
export type LogBundleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, number, BigNumber],
  LogBundleCreatedEventObject
>;

export type LogBundleCreatedEventFilter =
  TypedEventFilter<LogBundleCreatedEvent>;

export interface LogBundlePayoutProcessedEventObject {
  bundleId: BigNumber;
  processId: string;
  amount: BigNumber;
}
export type LogBundlePayoutProcessedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogBundlePayoutProcessedEventObject
>;

export type LogBundlePayoutProcessedEventFilter =
  TypedEventFilter<LogBundlePayoutProcessedEvent>;

export interface LogBundlePolicyCollateralizedEventObject {
  bundleId: BigNumber;
  processId: string;
  amount: BigNumber;
  capacity: BigNumber;
}
export type LogBundlePolicyCollateralizedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  LogBundlePolicyCollateralizedEventObject
>;

export type LogBundlePolicyCollateralizedEventFilter =
  TypedEventFilter<LogBundlePolicyCollateralizedEvent>;

export interface LogBundlePolicyReleasedEventObject {
  bundleId: BigNumber;
  processId: string;
  amount: BigNumber;
  capacity: BigNumber;
}
export type LogBundlePolicyReleasedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  LogBundlePolicyReleasedEventObject
>;

export type LogBundlePolicyReleasedEventFilter =
  TypedEventFilter<LogBundlePolicyReleasedEvent>;

export interface LogBundleStateChangedEventObject {
  bundleId: BigNumber;
  oldState: number;
  newState: number;
}
export type LogBundleStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogBundleStateChangedEventObject
>;

export type LogBundleStateChangedEventFilter =
  TypedEventFilter<LogBundleStateChangedEvent>;

export interface BundleController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BundleControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bundles(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    close(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateralizePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      owner_: PromiseOrValue<string>,
      riskpoolId_: PromiseOrValue<BigNumberish>,
      filter_: PromiseOrValue<BytesLike>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBundle.BundleStructOutput]>;

    getCapacity(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwner(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getState(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    getTotalValueLocked(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPayout(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPremium(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releasePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bundles(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  close(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateralizePolicy(
    bundleId: PromiseOrValue<BigNumberish>,
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    owner_: PromiseOrValue<string>,
    riskpoolId_: PromiseOrValue<BigNumberish>,
    filter_: PromiseOrValue<BytesLike>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defund(
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fund(
    bundleId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBundle.BundleStructOutput>;

  getCapacity(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFilter(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwner(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getState(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getToken(overrides?: CallOverrides): Promise<string>;

  getTotalValueLocked(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lock(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPayout(
    bundleId: PromiseOrValue<BigNumberish>,
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPremium(
    bundleId: PromiseOrValue<BigNumberish>,
    processId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releasePolicy(
    bundleId: PromiseOrValue<BigNumberish>,
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unburntBundles(
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlock(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    close(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralizePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      owner_: PromiseOrValue<string>,
      riskpoolId_: PromiseOrValue<BigNumberish>,
      filter_: PromiseOrValue<BytesLike>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBundle.BundleStructOutput>;

    getCapacity(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwner(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getState(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getToken(overrides?: CallOverrides): Promise<string>;

    getTotalValueLocked(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    processPayout(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    processPremium(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    releasePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LogBundleCapitalProvided(uint256,address,uint256,uint256)"(
      bundleId?: null,
      sender?: null,
      amount?: null,
      capacity?: null
    ): LogBundleCapitalProvidedEventFilter;
    LogBundleCapitalProvided(
      bundleId?: null,
      sender?: null,
      amount?: null,
      capacity?: null
    ): LogBundleCapitalProvidedEventFilter;

    "LogBundleCapitalWithdrawn(uint256,address,uint256,uint256)"(
      bundleId?: null,
      recipient?: null,
      amount?: null,
      capacity?: null
    ): LogBundleCapitalWithdrawnEventFilter;
    LogBundleCapitalWithdrawn(
      bundleId?: null,
      recipient?: null,
      amount?: null,
      capacity?: null
    ): LogBundleCapitalWithdrawnEventFilter;

    "LogBundleCreated(uint256,uint256,address,uint8,uint256)"(
      bundleId?: null,
      riskpoolId?: null,
      owner?: null,
      state?: null,
      amount?: null
    ): LogBundleCreatedEventFilter;
    LogBundleCreated(
      bundleId?: null,
      riskpoolId?: null,
      owner?: null,
      state?: null,
      amount?: null
    ): LogBundleCreatedEventFilter;

    "LogBundlePayoutProcessed(uint256,bytes32,uint256)"(
      bundleId?: null,
      processId?: null,
      amount?: null
    ): LogBundlePayoutProcessedEventFilter;
    LogBundlePayoutProcessed(
      bundleId?: null,
      processId?: null,
      amount?: null
    ): LogBundlePayoutProcessedEventFilter;

    "LogBundlePolicyCollateralized(uint256,bytes32,uint256,uint256)"(
      bundleId?: null,
      processId?: null,
      amount?: null,
      capacity?: null
    ): LogBundlePolicyCollateralizedEventFilter;
    LogBundlePolicyCollateralized(
      bundleId?: null,
      processId?: null,
      amount?: null,
      capacity?: null
    ): LogBundlePolicyCollateralizedEventFilter;

    "LogBundlePolicyReleased(uint256,bytes32,uint256,uint256)"(
      bundleId?: null,
      processId?: null,
      amount?: null,
      capacity?: null
    ): LogBundlePolicyReleasedEventFilter;
    LogBundlePolicyReleased(
      bundleId?: null,
      processId?: null,
      amount?: null,
      capacity?: null
    ): LogBundlePolicyReleasedEventFilter;

    "LogBundleStateChanged(uint256,uint8,uint8)"(
      bundleId?: null,
      oldState?: null,
      newState?: null
    ): LogBundleStateChangedEventFilter;
    LogBundleStateChanged(
      bundleId?: null,
      oldState?: null,
      newState?: null
    ): LogBundleStateChangedEventFilter;
  };

  estimateGas: {
    bundles(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    close(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateralizePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      owner_: PromiseOrValue<string>,
      riskpoolId_: PromiseOrValue<BigNumberish>,
      filter_: PromiseOrValue<BytesLike>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapacity(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalValueLocked(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPayout(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPremium(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releasePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bundles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    close(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateralizePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      owner_: PromiseOrValue<string>,
      riskpoolId_: PromiseOrValue<BigNumberish>,
      filter_: PromiseOrValue<BytesLike>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      bundleId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCapacity(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFilter(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalValueLocked(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPayout(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPremium(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releasePolicy(
      bundleId: PromiseOrValue<BigNumberish>,
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unburntBundles(
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
