/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IBundleDataProvider {
  export type BundleKeyStruct = {
    instanceId: PromiseOrValue<BytesLike>;
    bundleId: PromiseOrValue<BigNumberish>;
  };

  export type BundleKeyStructOutput = [string, BigNumber] & {
    instanceId: string;
    bundleId: BigNumber;
  };

  export type BundleInfoStruct = {
    key: IBundleDataProvider.BundleKeyStruct;
    riskpoolId: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    state: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    expiryAt: PromiseOrValue<BigNumberish>;
    closedAt: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleInfoStructOutput = [
    IBundleDataProvider.BundleKeyStructOutput,
    BigNumber,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    key: IBundleDataProvider.BundleKeyStructOutput;
    riskpoolId: BigNumber;
    token: string;
    state: number;
    name: string;
    expiryAt: BigNumber;
    closedAt: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export declare namespace IInstanceDataProvider {
  export type TokenKeyStruct = {
    token: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
  };

  export type TokenKeyStructOutput = [string, BigNumber] & {
    token: string;
    chainId: BigNumber;
  };

  export type TokenInfoStruct = {
    key: IInstanceDataProvider.TokenKeyStruct;
    state: PromiseOrValue<BigNumberish>;
    symbol: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type TokenInfoStructOutput = [
    IInstanceDataProvider.TokenKeyStructOutput,
    number,
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    key: IInstanceDataProvider.TokenKeyStructOutput;
    state: number;
    symbol: string;
    decimals: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type InstanceInfoStruct = {
    id: PromiseOrValue<BytesLike>;
    state: PromiseOrValue<BigNumberish>;
    displayName: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
    registry: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type InstanceInfoStructOutput = [
    string,
    number,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: string;
    state: number;
    displayName: string;
    chainId: BigNumber;
    registry: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export declare namespace IComponentDataProvider {
  export type ComponentKeyStruct = {
    instanceId: PromiseOrValue<BytesLike>;
    componentId: PromiseOrValue<BigNumberish>;
  };

  export type ComponentKeyStructOutput = [string, BigNumber] & {
    instanceId: string;
    componentId: BigNumber;
  };

  export type ComponentInfoStruct = {
    key: IComponentDataProvider.ComponentKeyStruct;
    componentType: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type ComponentInfoStructOutput = [
    IComponentDataProvider.ComponentKeyStructOutput,
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    key: IComponentDataProvider.ComponentKeyStructOutput;
    componentType: number;
    state: number;
    token: string;
    chainId: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface BundleRegistryInterface extends utils.Interface {
  functions: {
    "TOKEN_MAX_DECIMALS()": FunctionFragment;
    "bundles(bytes32,uint256)": FunctionFragment;
    "components(bytes32)": FunctionFragment;
    "getBundleId(bytes32,uint256,uint256)": FunctionFragment;
    "getBundleInfo(bytes32,uint256)": FunctionFragment;
    "getBundleToken(bytes32,uint256)": FunctionFragment;
    "getBundleTokenInfo(bytes32,uint256)": FunctionFragment;
    "getComponentId(bytes32,uint256)": FunctionFragment;
    "getComponentInfo(bytes32,uint256)": FunctionFragment;
    "getInstanceId(uint256)": FunctionFragment;
    "getInstanceInfo(bytes32)": FunctionFragment;
    "getTokenId(uint256)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getTokenInfo(address,uint256)": FunctionFragment;
    "instances()": FunctionFragment;
    "isRegisteredBundle(bytes32,uint256)": FunctionFragment;
    "isRegisteredComponent(bytes32,uint256)": FunctionFragment;
    "isRegisteredInstance(bytes32)": FunctionFragment;
    "isRegisteredToken(address)": FunctionFragment;
    "isRegisteredToken(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "probeInstance(address)": FunctionFragment;
    "registerBundle(bytes32,uint256,uint256,string,uint256)": FunctionFragment;
    "registerComponent(bytes32,uint256)": FunctionFragment;
    "registerInstance(address)": FunctionFragment;
    "registerInstance(bytes32,uint256,address)": FunctionFragment;
    "registerToken(address)": FunctionFragment;
    "registerToken(address,uint256,uint8,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBundle(bytes32,uint256)": FunctionFragment;
    "updateComponent(bytes32,uint256)": FunctionFragment;
    "updateInstance(bytes32,string)": FunctionFragment;
    "updateInstance(bytes32,uint8)": FunctionFragment;
    "updateToken(address,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TOKEN_MAX_DECIMALS"
      | "bundles"
      | "components"
      | "getBundleId"
      | "getBundleInfo"
      | "getBundleToken"
      | "getBundleTokenInfo"
      | "getComponentId"
      | "getComponentInfo"
      | "getInstanceId"
      | "getInstanceInfo"
      | "getTokenId"
      | "getTokenInfo(address)"
      | "getTokenInfo(address,uint256)"
      | "instances"
      | "isRegisteredBundle"
      | "isRegisteredComponent"
      | "isRegisteredInstance"
      | "isRegisteredToken(address)"
      | "isRegisteredToken(address,uint256)"
      | "owner"
      | "probeInstance"
      | "registerBundle"
      | "registerComponent"
      | "registerInstance(address)"
      | "registerInstance(bytes32,uint256,address)"
      | "registerToken(address)"
      | "registerToken(address,uint256,uint8,string)"
      | "renounceOwnership"
      | "tokens"
      | "transferOwnership"
      | "updateBundle"
      | "updateComponent"
      | "updateInstance(bytes32,string)"
      | "updateInstance(bytes32,uint8)"
      | "updateToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TOKEN_MAX_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bundles",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "components",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleId",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleToken",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleTokenInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "instances", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegisteredBundle",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredComponent",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredInstance",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredToken(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "probeInstance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBundle",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponent",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstance(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstance(bytes32,uint256,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(address,uint256,uint8,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBundle",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateComponent",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstance(bytes32,string)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstance(bytes32,uint8)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_MAX_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bundles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "components", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBundleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBundleTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "probeInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstance(bytes32,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(address,uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstance(bytes32,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstance(bytes32,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;

  events: {
    "LogInstanceRegistryBundleRegistered(bytes32,uint256,uint256,uint8)": EventFragment;
    "LogInstanceRegistryBundleUpdated(bytes32,uint256,uint8,uint8)": EventFragment;
    "LogInstanceRegistryComponentRegistered(bytes32,uint256,uint8,uint8,bool)": EventFragment;
    "LogInstanceRegistryComponentUpdated(bytes32,uint256,uint8,uint8)": EventFragment;
    "LogInstanceRegistryInstanceDisplayNameUpdated(bytes32,string,string)": EventFragment;
    "LogInstanceRegistryInstanceRegistered(bytes32,uint8,bool)": EventFragment;
    "LogInstanceRegistryInstanceStateUpdated(bytes32,uint8,uint8)": EventFragment;
    "LogInstanceRegistryTokenRegistered(address,uint256,uint8,bool)": EventFragment;
    "LogInstanceRegistryTokenStateUpdated(address,uint256,uint8,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryBundleRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryBundleUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryComponentRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryComponentUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryInstanceDisplayNameUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryInstanceRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryInstanceStateUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryTokenRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryTokenStateUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogInstanceRegistryBundleRegisteredEventObject {
  instanceId: string;
  riskpoolId: BigNumber;
  bundleId: BigNumber;
  state: number;
}
export type LogInstanceRegistryBundleRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  LogInstanceRegistryBundleRegisteredEventObject
>;

export type LogInstanceRegistryBundleRegisteredEventFilter =
  TypedEventFilter<LogInstanceRegistryBundleRegisteredEvent>;

export interface LogInstanceRegistryBundleUpdatedEventObject {
  instanceId: string;
  bundleId: BigNumber;
  oldState: number;
  newState: number;
}
export type LogInstanceRegistryBundleUpdatedEvent = TypedEvent<
  [string, BigNumber, number, number],
  LogInstanceRegistryBundleUpdatedEventObject
>;

export type LogInstanceRegistryBundleUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryBundleUpdatedEvent>;

export interface LogInstanceRegistryComponentRegisteredEventObject {
  instanceId: string;
  componentId: BigNumber;
  componentType: number;
  state: number;
  isNewComponent: boolean;
}
export type LogInstanceRegistryComponentRegisteredEvent = TypedEvent<
  [string, BigNumber, number, number, boolean],
  LogInstanceRegistryComponentRegisteredEventObject
>;

export type LogInstanceRegistryComponentRegisteredEventFilter =
  TypedEventFilter<LogInstanceRegistryComponentRegisteredEvent>;

export interface LogInstanceRegistryComponentUpdatedEventObject {
  instanceId: string;
  componentId: BigNumber;
  oldState: number;
  newState: number;
}
export type LogInstanceRegistryComponentUpdatedEvent = TypedEvent<
  [string, BigNumber, number, number],
  LogInstanceRegistryComponentUpdatedEventObject
>;

export type LogInstanceRegistryComponentUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryComponentUpdatedEvent>;

export interface LogInstanceRegistryInstanceDisplayNameUpdatedEventObject {
  instanceId: string;
  oldDisplayName: string;
  newDisplayName: string;
}
export type LogInstanceRegistryInstanceDisplayNameUpdatedEvent = TypedEvent<
  [string, string, string],
  LogInstanceRegistryInstanceDisplayNameUpdatedEventObject
>;

export type LogInstanceRegistryInstanceDisplayNameUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryInstanceDisplayNameUpdatedEvent>;

export interface LogInstanceRegistryInstanceRegisteredEventObject {
  instanceId: string;
  state: number;
  isNewInstance: boolean;
}
export type LogInstanceRegistryInstanceRegisteredEvent = TypedEvent<
  [string, number, boolean],
  LogInstanceRegistryInstanceRegisteredEventObject
>;

export type LogInstanceRegistryInstanceRegisteredEventFilter =
  TypedEventFilter<LogInstanceRegistryInstanceRegisteredEvent>;

export interface LogInstanceRegistryInstanceStateUpdatedEventObject {
  instanceId: string;
  oldState: number;
  newState: number;
}
export type LogInstanceRegistryInstanceStateUpdatedEvent = TypedEvent<
  [string, number, number],
  LogInstanceRegistryInstanceStateUpdatedEventObject
>;

export type LogInstanceRegistryInstanceStateUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryInstanceStateUpdatedEvent>;

export interface LogInstanceRegistryTokenRegisteredEventObject {
  token: string;
  chainId: BigNumber;
  state: number;
  isNewToken: boolean;
}
export type LogInstanceRegistryTokenRegisteredEvent = TypedEvent<
  [string, BigNumber, number, boolean],
  LogInstanceRegistryTokenRegisteredEventObject
>;

export type LogInstanceRegistryTokenRegisteredEventFilter =
  TypedEventFilter<LogInstanceRegistryTokenRegisteredEvent>;

export interface LogInstanceRegistryTokenStateUpdatedEventObject {
  token: string;
  chainId: BigNumber;
  oldState: number;
  newState: number;
}
export type LogInstanceRegistryTokenStateUpdatedEvent = TypedEvent<
  [string, BigNumber, number, number],
  LogInstanceRegistryTokenStateUpdatedEventObject
>;

export type LogInstanceRegistryTokenStateUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryTokenStateUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BundleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BundleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOKEN_MAX_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    bundles(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfBundles: BigNumber }>;

    components(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfComponents: BigNumber }>;

    getBundleId(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bundleId: BigNumber }>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IBundleDataProvider.BundleInfoStructOutput] & {
        info: IBundleDataProvider.BundleInfoStructOutput;
      }
    >;

    getBundleToken(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getBundleTokenInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceDataProvider.TokenInfoStructOutput] & {
        token: IInstanceDataProvider.TokenInfoStructOutput;
      }
    >;

    getComponentId(
      instanceId: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { componentId: BigNumber }>;

    getComponentInfo(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IComponentDataProvider.ComponentInfoStructOutput] & {
        info: IComponentDataProvider.ComponentInfoStructOutput;
      }
    >;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { instanceId: string }>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceDataProvider.InstanceInfoStructOutput] & {
        info: IInstanceDataProvider.InstanceInfoStructOutput;
      }
    >;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; chainId: BigNumber }>;

    "getTokenInfo(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceDataProvider.TokenInfoStructOutput] & {
        tokenInfo: IInstanceDataProvider.TokenInfoStructOutput;
      }
    >;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceDataProvider.TokenInfoStructOutput] & {
        tokenInfo: IInstanceDataProvider.TokenInfoStructOutput;
      }
    >;

    instances(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfInstances: BigNumber }>;

    isRegisteredBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    isRegisteredComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean, string, string] & {
        isContract: boolean;
        contractSize: BigNumber;
        isValidId: boolean;
        instanceId: string;
        instanceService: string;
      }
    >;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerToken(address,uint256,uint8,string)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfTokens: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      newDisplayName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  TOKEN_MAX_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  bundles(
    instanceId: PromiseOrValue<BytesLike>,
    riskpoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  components(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBundleId(
    instanceId: PromiseOrValue<BytesLike>,
    riskpoolId: PromiseOrValue<BigNumberish>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBundleInfo(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBundleDataProvider.BundleInfoStructOutput>;

  getBundleToken(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBundleTokenInfo(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

  getComponentId(
    instanceId: PromiseOrValue<BytesLike>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getComponentInfo(
    instanceId: PromiseOrValue<BytesLike>,
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IComponentDataProvider.ComponentInfoStructOutput>;

  getInstanceId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInstanceInfo(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IInstanceDataProvider.InstanceInfoStructOutput>;

  getTokenId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; chainId: BigNumber }>;

  "getTokenInfo(address)"(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

  "getTokenInfo(address,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

  instances(overrides?: CallOverrides): Promise<BigNumber>;

  isRegisteredBundle(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredComponent(
    instanceId: PromiseOrValue<BytesLike>,
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredInstance(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegisteredToken(address)"(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegisteredToken(address,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  probeInstance(
    registryAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, boolean, string, string] & {
      isContract: boolean;
      contractSize: BigNumber;
      isValidId: boolean;
      instanceId: string;
      instanceService: string;
    }
  >;

  registerBundle(
    instanceId: PromiseOrValue<BytesLike>,
    riskpoolId: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    expiryAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerComponent(
    instanceId: PromiseOrValue<BytesLike>,
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerInstance(address)"(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerInstance(bytes32,uint256,address)"(
    instanceId: PromiseOrValue<BytesLike>,
    chainId: PromiseOrValue<BigNumberish>,
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerToken(address)"(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerToken(address,uint256,uint8,string)"(
    tokenAddress: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    decimals: PromiseOrValue<BigNumberish>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokens(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBundle(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateComponent(
    instanceId: PromiseOrValue<BytesLike>,
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateInstance(bytes32,string)"(
    instanceId: PromiseOrValue<BytesLike>,
    newDisplayName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateInstance(bytes32,uint8)"(
    instanceId: PromiseOrValue<BytesLike>,
    newState: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateToken(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    newState: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TOKEN_MAX_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    bundles(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    components(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleId(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBundleDataProvider.BundleInfoStructOutput>;

    getBundleToken(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBundleTokenInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

    getComponentId(
      instanceId: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentInfo(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IComponentDataProvider.ComponentInfoStructOutput>;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IInstanceDataProvider.InstanceInfoStructOutput>;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; chainId: BigNumber }>;

    "getTokenInfo(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

    instances(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean, string, string] & {
        isContract: boolean;
        contractSize: BigNumber;
        isValidId: boolean;
        instanceId: string;
        instanceService: string;
      }
    >;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(address,uint256,uint8,string)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      newDisplayName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogInstanceRegistryBundleRegistered(bytes32,uint256,uint256,uint8)"(
      instanceId?: null,
      riskpoolId?: null,
      bundleId?: null,
      state?: null
    ): LogInstanceRegistryBundleRegisteredEventFilter;
    LogInstanceRegistryBundleRegistered(
      instanceId?: null,
      riskpoolId?: null,
      bundleId?: null,
      state?: null
    ): LogInstanceRegistryBundleRegisteredEventFilter;

    "LogInstanceRegistryBundleUpdated(bytes32,uint256,uint8,uint8)"(
      instanceId?: null,
      bundleId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryBundleUpdatedEventFilter;
    LogInstanceRegistryBundleUpdated(
      instanceId?: null,
      bundleId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryBundleUpdatedEventFilter;

    "LogInstanceRegistryComponentRegistered(bytes32,uint256,uint8,uint8,bool)"(
      instanceId?: null,
      componentId?: null,
      componentType?: null,
      state?: null,
      isNewComponent?: null
    ): LogInstanceRegistryComponentRegisteredEventFilter;
    LogInstanceRegistryComponentRegistered(
      instanceId?: null,
      componentId?: null,
      componentType?: null,
      state?: null,
      isNewComponent?: null
    ): LogInstanceRegistryComponentRegisteredEventFilter;

    "LogInstanceRegistryComponentUpdated(bytes32,uint256,uint8,uint8)"(
      instanceId?: null,
      componentId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryComponentUpdatedEventFilter;
    LogInstanceRegistryComponentUpdated(
      instanceId?: null,
      componentId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryComponentUpdatedEventFilter;

    "LogInstanceRegistryInstanceDisplayNameUpdated(bytes32,string,string)"(
      instanceId?: null,
      oldDisplayName?: null,
      newDisplayName?: null
    ): LogInstanceRegistryInstanceDisplayNameUpdatedEventFilter;
    LogInstanceRegistryInstanceDisplayNameUpdated(
      instanceId?: null,
      oldDisplayName?: null,
      newDisplayName?: null
    ): LogInstanceRegistryInstanceDisplayNameUpdatedEventFilter;

    "LogInstanceRegistryInstanceRegistered(bytes32,uint8,bool)"(
      instanceId?: null,
      state?: null,
      isNewInstance?: null
    ): LogInstanceRegistryInstanceRegisteredEventFilter;
    LogInstanceRegistryInstanceRegistered(
      instanceId?: null,
      state?: null,
      isNewInstance?: null
    ): LogInstanceRegistryInstanceRegisteredEventFilter;

    "LogInstanceRegistryInstanceStateUpdated(bytes32,uint8,uint8)"(
      instanceId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryInstanceStateUpdatedEventFilter;
    LogInstanceRegistryInstanceStateUpdated(
      instanceId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryInstanceStateUpdatedEventFilter;

    "LogInstanceRegistryTokenRegistered(address,uint256,uint8,bool)"(
      token?: null,
      chainId?: null,
      state?: null,
      isNewToken?: null
    ): LogInstanceRegistryTokenRegisteredEventFilter;
    LogInstanceRegistryTokenRegistered(
      token?: null,
      chainId?: null,
      state?: null,
      isNewToken?: null
    ): LogInstanceRegistryTokenRegisteredEventFilter;

    "LogInstanceRegistryTokenStateUpdated(address,uint256,uint8,uint8)"(
      token?: null,
      chainId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryTokenStateUpdatedEventFilter;
    LogInstanceRegistryTokenStateUpdated(
      token?: null,
      chainId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryTokenStateUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    TOKEN_MAX_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    bundles(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    components(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleId(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleToken(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleTokenInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentId(
      instanceId: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentInfo(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInfo(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instances(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerToken(address,uint256,uint8,string)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      newDisplayName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_MAX_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bundles(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    components(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleId(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleToken(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleTokenInfo(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentId(
      instanceId: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentInfo(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInfo(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegisteredBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerToken(address,uint256,uint8,string)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBundle(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      newDisplayName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
