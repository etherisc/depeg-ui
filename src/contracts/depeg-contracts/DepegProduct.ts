/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DepegProduct {
  export type DepegBalanceStruct = {
    wallet: PromiseOrValue<string>;
    blockNumber: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
  };

  export type DepegBalanceStructOutput = [string, BigNumber, BigNumber] & {
    wallet: string;
    blockNumber: BigNumber;
    balance: BigNumber;
  };
}

export declare namespace IPolicy {
  export type ClaimStruct = {
    state: PromiseOrValue<BigNumberish>;
    claimAmount: PromiseOrValue<BigNumberish>;
    paidAmount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type ClaimStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    claimAmount: BigNumber;
    paidAmount: BigNumber;
    data: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export declare namespace IPriceDataProvider {
  export type PriceInfoStruct = {
    id: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    compliance: PromiseOrValue<BigNumberish>;
    stability: PromiseOrValue<BigNumberish>;
    eventType: PromiseOrValue<BigNumberish>;
    triggeredAt: PromiseOrValue<BigNumberish>;
    depeggedAt: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type PriceInfoStructOutput = [
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    price: BigNumber;
    compliance: number;
    stability: number;
    eventType: number;
    triggeredAt: BigNumber;
    depeggedAt: BigNumber;
    createdAt: BigNumber;
  };
}

export declare namespace ITreasury {
  export type FeeSpecificationStruct = {
    componentId: PromiseOrValue<BigNumberish>;
    fixedFee: PromiseOrValue<BigNumberish>;
    fractionalFee: PromiseOrValue<BigNumberish>;
    feeCalculationData: PromiseOrValue<BytesLike>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type FeeSpecificationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    componentId: BigNumber;
    fixedFee: BigNumber;
    fractionalFee: BigNumber;
    feeCalculationData: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface DepegProductInterface extends utils.Interface {
  functions: {
    "CLAIM_ID()": FunctionFragment;
    "EIP712_DOMAIN_NAME()": FunctionFragment;
    "EIP712_DOMAIN_VERSION()": FunctionFragment;
    "EIP712_POLICY_TYPE()": FunctionFragment;
    "EIP712_TYPE_HASH()": FunctionFragment;
    "GANACHE()": FunctionFragment;
    "MAINNET()": FunctionFragment;
    "NAME()": FunctionFragment;
    "POLICY_FLOW()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addDepegBalances((address,uint256,uint256)[])": FunctionFragment;
    "applications()": FunctionFragment;
    "applyForPolicyWithBundle(address,uint256,uint256,uint256)": FunctionFragment;
    "applyForPolicyWithBundleAndSignature(address,address,uint256,uint256,uint256,bytes32,bytes)": FunctionFragment;
    "approvalCallback()": FunctionFragment;
    "archiveCallback()": FunctionFragment;
    "calculateClaimAmount(uint256)": FunctionFragment;
    "calculateFee(uint256)": FunctionFragment;
    "calculateNetPremium(uint256,uint256,uint256)": FunctionFragment;
    "calculatePremium(uint256)": FunctionFragment;
    "createDepegBalance(address,uint256,uint256)": FunctionFragment;
    "createDepegClaim(bytes32)": FunctionFragment;
    "declineCallback()": FunctionFragment;
    "decodeClaimInfoFromData(bytes)": FunctionFragment;
    "encodeClaimInfoAsData(uint256,uint256)": FunctionFragment;
    "getApplicationDataStructure()": FunctionFragment;
    "getApplicationId(uint256)": FunctionFragment;
    "getClaimData(bytes32)": FunctionFragment;
    "getClaimDataStructure()": FunctionFragment;
    "getDepegBalance(address)": FunctionFragment;
    "getDepegClaim(bytes32)": FunctionFragment;
    "getDepegPriceInfo()": FunctionFragment;
    "getDepegState()": FunctionFragment;
    "getDepeggedAt()": FunctionFragment;
    "getDepeggedBlockNumber()": FunctionFragment;
    "getFeeFractionFullUnit()": FunctionFragment;
    "getFeeSpecification(uint256)": FunctionFragment;
    "getId()": FunctionFragment;
    "getLatestPriceInfo()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPayoutDataStructure()": FunctionFragment;
    "getPolicyExpirationData(bytes32)": FunctionFragment;
    "getPolicyFlow()": FunctionFragment;
    "getPolicyId(uint256)": FunctionFragment;
    "getPolicyToProcess(uint256)": FunctionFragment;
    "getPriceDataProvider()": FunctionFragment;
    "getProcessId(address,uint256)": FunctionFragment;
    "getProcessedBalance(address)": FunctionFragment;
    "getProtectedBalance(bytes32)": FunctionFragment;
    "getProtectedToken()": FunctionFragment;
    "getProtectedWallet(bytes32)": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRiskpoolId()": FunctionFragment;
    "getSigner(bytes32,bytes)": FunctionFragment;
    "getSignerFromDigestAndSignature(address,uint256,uint256,uint256,bytes32,bytes)": FunctionFragment;
    "getState()": FunctionFragment;
    "getTargetPrice()": FunctionFragment;
    "getToken()": FunctionFragment;
    "getTriggeredAt()": FunctionFragment;
    "getType()": FunctionFragment;
    "getTypedDataV4Hash(bytes32)": FunctionFragment;
    "hasDepegClaim(bytes32)": FunctionFragment;
    "isNewPriceInfoEventAvailable()": FunctionFragment;
    "isOracle()": FunctionFragment;
    "isProduct()": FunctionFragment;
    "isRiskpool()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseCallback()": FunctionFragment;
    "policies()": FunctionFragment;
    "policiesToProcess()": FunctionFragment;
    "policyIsAllowedToClaim(bytes32)": FunctionFragment;
    "processIds(address)": FunctionFragment;
    "processLatestPriceInfo()": FunctionFragment;
    "processPolicies(bytes32[])": FunctionFragment;
    "processPolicy(bytes32)": FunctionFragment;
    "proposalCallback()": FunctionFragment;
    "reactivateProduct()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resumeCallback()": FunctionFragment;
    "riskPoolCapacityCallback(uint256)": FunctionFragment;
    "setDepeggedBlockNumber(uint256,string)": FunctionFragment;
    "setId(uint256)": FunctionFragment;
    "suspendCallback()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpauseCallback()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLAIM_ID"
      | "EIP712_DOMAIN_NAME"
      | "EIP712_DOMAIN_VERSION"
      | "EIP712_POLICY_TYPE"
      | "EIP712_TYPE_HASH"
      | "GANACHE"
      | "MAINNET"
      | "NAME"
      | "POLICY_FLOW"
      | "VERSION"
      | "addDepegBalances"
      | "applications"
      | "applyForPolicyWithBundle"
      | "applyForPolicyWithBundleAndSignature"
      | "approvalCallback"
      | "archiveCallback"
      | "calculateClaimAmount"
      | "calculateFee"
      | "calculateNetPremium"
      | "calculatePremium"
      | "createDepegBalance"
      | "createDepegClaim"
      | "declineCallback"
      | "decodeClaimInfoFromData"
      | "encodeClaimInfoAsData"
      | "getApplicationDataStructure"
      | "getApplicationId"
      | "getClaimData"
      | "getClaimDataStructure"
      | "getDepegBalance"
      | "getDepegClaim"
      | "getDepegPriceInfo"
      | "getDepegState"
      | "getDepeggedAt"
      | "getDepeggedBlockNumber"
      | "getFeeFractionFullUnit"
      | "getFeeSpecification"
      | "getId"
      | "getLatestPriceInfo"
      | "getName"
      | "getOwner"
      | "getPayoutDataStructure"
      | "getPolicyExpirationData"
      | "getPolicyFlow"
      | "getPolicyId"
      | "getPolicyToProcess"
      | "getPriceDataProvider"
      | "getProcessId"
      | "getProcessedBalance"
      | "getProtectedBalance"
      | "getProtectedToken"
      | "getProtectedWallet"
      | "getRegistry"
      | "getRiskpoolId"
      | "getSigner"
      | "getSignerFromDigestAndSignature"
      | "getState"
      | "getTargetPrice"
      | "getToken"
      | "getTriggeredAt"
      | "getType"
      | "getTypedDataV4Hash"
      | "hasDepegClaim"
      | "isNewPriceInfoEventAvailable"
      | "isOracle"
      | "isProduct"
      | "isRiskpool"
      | "owner"
      | "pauseCallback"
      | "policies"
      | "policiesToProcess"
      | "policyIsAllowedToClaim"
      | "processIds"
      | "processLatestPriceInfo"
      | "processPolicies"
      | "processPolicy"
      | "proposalCallback"
      | "reactivateProduct"
      | "renounceOwnership"
      | "resumeCallback"
      | "riskPoolCapacityCallback"
      | "setDepeggedBlockNumber"
      | "setId"
      | "suspendCallback"
      | "transferOwnership"
      | "unpauseCallback"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CLAIM_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_POLICY_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GANACHE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAINNET", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POLICY_FLOW",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addDepegBalances",
    values: [DepegProduct.DepegBalanceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyForPolicyWithBundle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForPolicyWithBundleAndSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "archiveCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClaimAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNetPremium",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDepegBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDepegClaim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "declineCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeClaimInfoFromData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeClaimInfoAsData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApplicationId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepegBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepegClaim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepegPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepegState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepeggedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepeggedBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeFractionFullUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeSpecification",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLatestPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayoutDataStructure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyExpirationData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyFlow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyToProcess",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessedBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtectedBalance",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtectedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtectedWallet",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskpoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSigner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerFromDigestAndSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTargetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTriggeredAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTypedDataV4Hash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDepegClaim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNewPriceInfoEventAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "isProduct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRiskpool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCallback",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "policies", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "policiesToProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "policyIsAllowedToClaim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "processLatestPriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processPolicies",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateProduct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "riskPoolCapacityCallback",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepeggedBlockNumber",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendCallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCallback",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CLAIM_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_POLICY_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GANACHE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAINNET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POLICY_FLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDepegBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForPolicyWithBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForPolicyWithBundleAndSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archiveCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNetPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDepegBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDepegClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeClaimInfoFromData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeClaimInfoAsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplicationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepegBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepegClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepegPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepegState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepeggedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepeggedBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeFractionFullUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeSpecification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutDataStructure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyExpirationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyToProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtectedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtectedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtectedWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskpoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSignerFromDigestAndSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTargetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTriggeredAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataV4Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDepegClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNewPriceInfoEventAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRiskpool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policiesToProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyIsAllowedToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "processIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processLatestPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskPoolCapacityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepeggedBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suspendCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCallback",
    data: BytesLike
  ): Result;

  events: {
    "LogComponentApproved(uint256)": EventFragment;
    "LogComponentArchived(uint256)": EventFragment;
    "LogComponentCreated(bytes32,uint8,address,address)": EventFragment;
    "LogComponentDeclined(uint256)": EventFragment;
    "LogComponentPaused(uint256)": EventFragment;
    "LogComponentProposed(bytes32,uint8,address,uint256)": EventFragment;
    "LogComponentResumed(uint256)": EventFragment;
    "LogComponentStateChanged(uint256,uint8,uint8)": EventFragment;
    "LogComponentSuspended(uint256)": EventFragment;
    "LogComponentUnpaused(uint256)": EventFragment;
    "LogDepegApplicationCreated(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepegBlockNumberSet(uint256,string)": EventFragment;
    "LogDepegClaimConfirmed(bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepegClaimCreated(bytes32,uint256,uint256)": EventFragment;
    "LogDepegDepegBalanceAdded(address,uint256,uint256)": EventFragment;
    "LogDepegDepegBalanceError(address,uint256,uint256,uint256)": EventFragment;
    "LogDepegPayoutProcessed(bytes32,uint256,uint256,uint256)": EventFragment;
    "LogDepegPolicyClosed(bytes32)": EventFragment;
    "LogDepegPolicyCreated(bytes32,address,uint256)": EventFragment;
    "LogDepegPolicyExpired(bytes32)": EventFragment;
    "LogDepegPriceEvent(uint256,uint256,uint8,uint256,uint256,uint256)": EventFragment;
    "LogDepegProcessedAmountReduction(bytes32,uint256,uint256)": EventFragment;
    "LogDepegProductDeactivated(uint256,uint256)": EventFragment;
    "LogDepegProductPaused(uint256,uint256)": EventFragment;
    "LogDepegProductReactivated(uint256)": EventFragment;
    "LogDepegProductUnpaused(uint256,uint256)": EventFragment;
    "LogDepegProtectedAmountReduction(bytes32,uint256,uint256)": EventFragment;
    "LogProductApproved(uint256)": EventFragment;
    "LogProductCreated(address)": EventFragment;
    "LogProductDeclined(uint256)": EventFragment;
    "LogProductProposed(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogComponentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogComponentUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegApplicationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegBlockNumberSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegClaimConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegDepegBalanceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegDepegBalanceError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegPayoutProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegPolicyClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegPolicyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegPolicyExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegPriceEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDepegProcessedAmountReduction"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegProductDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegProductPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegProductReactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepegProductUnpaused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDepegProtectedAmountReduction"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogProductProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogComponentApprovedEventObject {
  id: BigNumber;
}
export type LogComponentApprovedEvent = TypedEvent<
  [BigNumber],
  LogComponentApprovedEventObject
>;

export type LogComponentApprovedEventFilter =
  TypedEventFilter<LogComponentApprovedEvent>;

export interface LogComponentArchivedEventObject {
  id: BigNumber;
}
export type LogComponentArchivedEvent = TypedEvent<
  [BigNumber],
  LogComponentArchivedEventObject
>;

export type LogComponentArchivedEventFilter =
  TypedEventFilter<LogComponentArchivedEvent>;

export interface LogComponentCreatedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  registryAddress: string;
}
export type LogComponentCreatedEvent = TypedEvent<
  [string, number, string, string],
  LogComponentCreatedEventObject
>;

export type LogComponentCreatedEventFilter =
  TypedEventFilter<LogComponentCreatedEvent>;

export interface LogComponentDeclinedEventObject {
  id: BigNumber;
}
export type LogComponentDeclinedEvent = TypedEvent<
  [BigNumber],
  LogComponentDeclinedEventObject
>;

export type LogComponentDeclinedEventFilter =
  TypedEventFilter<LogComponentDeclinedEvent>;

export interface LogComponentPausedEventObject {
  id: BigNumber;
}
export type LogComponentPausedEvent = TypedEvent<
  [BigNumber],
  LogComponentPausedEventObject
>;

export type LogComponentPausedEventFilter =
  TypedEventFilter<LogComponentPausedEvent>;

export interface LogComponentProposedEventObject {
  componentName: string;
  componentType: number;
  componentAddress: string;
  id: BigNumber;
}
export type LogComponentProposedEvent = TypedEvent<
  [string, number, string, BigNumber],
  LogComponentProposedEventObject
>;

export type LogComponentProposedEventFilter =
  TypedEventFilter<LogComponentProposedEvent>;

export interface LogComponentResumedEventObject {
  id: BigNumber;
}
export type LogComponentResumedEvent = TypedEvent<
  [BigNumber],
  LogComponentResumedEventObject
>;

export type LogComponentResumedEventFilter =
  TypedEventFilter<LogComponentResumedEvent>;

export interface LogComponentStateChangedEventObject {
  id: BigNumber;
  stateOld: number;
  stateNew: number;
}
export type LogComponentStateChangedEvent = TypedEvent<
  [BigNumber, number, number],
  LogComponentStateChangedEventObject
>;

export type LogComponentStateChangedEventFilter =
  TypedEventFilter<LogComponentStateChangedEvent>;

export interface LogComponentSuspendedEventObject {
  id: BigNumber;
}
export type LogComponentSuspendedEvent = TypedEvent<
  [BigNumber],
  LogComponentSuspendedEventObject
>;

export type LogComponentSuspendedEventFilter =
  TypedEventFilter<LogComponentSuspendedEvent>;

export interface LogComponentUnpausedEventObject {
  id: BigNumber;
}
export type LogComponentUnpausedEvent = TypedEvent<
  [BigNumber],
  LogComponentUnpausedEventObject
>;

export type LogComponentUnpausedEventFilter =
  TypedEventFilter<LogComponentUnpausedEvent>;

export interface LogDepegApplicationCreatedEventObject {
  processId: string;
  policyHolder: string;
  protectedWallet: string;
  protectedBalance: BigNumber;
  sumInsuredAmount: BigNumber;
  premiumAmount: BigNumber;
  netPremiumAmount: BigNumber;
}
export type LogDepegApplicationCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepegApplicationCreatedEventObject
>;

export type LogDepegApplicationCreatedEventFilter =
  TypedEventFilter<LogDepegApplicationCreatedEvent>;

export interface LogDepegBlockNumberSetEventObject {
  blockNumber: BigNumber;
  comment: string;
}
export type LogDepegBlockNumberSetEvent = TypedEvent<
  [BigNumber, string],
  LogDepegBlockNumberSetEventObject
>;

export type LogDepegBlockNumberSetEventFilter =
  TypedEventFilter<LogDepegBlockNumberSetEvent>;

export interface LogDepegClaimConfirmedEventObject {
  processId: string;
  claimId: BigNumber;
  claimAmount: BigNumber;
  accountBalance: BigNumber;
  payoutAmount: BigNumber;
}
export type LogDepegClaimConfirmedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepegClaimConfirmedEventObject
>;

export type LogDepegClaimConfirmedEventFilter =
  TypedEventFilter<LogDepegClaimConfirmedEvent>;

export interface LogDepegClaimCreatedEventObject {
  processId: string;
  claimId: BigNumber;
  claimAmount: BigNumber;
}
export type LogDepegClaimCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogDepegClaimCreatedEventObject
>;

export type LogDepegClaimCreatedEventFilter =
  TypedEventFilter<LogDepegClaimCreatedEvent>;

export interface LogDepegDepegBalanceAddedEventObject {
  wallet: string;
  blockNumber: BigNumber;
  balance: BigNumber;
}
export type LogDepegDepegBalanceAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogDepegDepegBalanceAddedEventObject
>;

export type LogDepegDepegBalanceAddedEventFilter =
  TypedEventFilter<LogDepegDepegBalanceAddedEvent>;

export interface LogDepegDepegBalanceErrorEventObject {
  wallet: string;
  blockNumber: BigNumber;
  balance: BigNumber;
  depeggedBlockNumber: BigNumber;
}
export type LogDepegDepegBalanceErrorEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogDepegDepegBalanceErrorEventObject
>;

export type LogDepegDepegBalanceErrorEventFilter =
  TypedEventFilter<LogDepegDepegBalanceErrorEvent>;

export interface LogDepegPayoutProcessedEventObject {
  processId: string;
  claimId: BigNumber;
  payoutId: BigNumber;
  payoutAmount: BigNumber;
}
export type LogDepegPayoutProcessedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogDepegPayoutProcessedEventObject
>;

export type LogDepegPayoutProcessedEventFilter =
  TypedEventFilter<LogDepegPayoutProcessedEvent>;

export interface LogDepegPolicyClosedEventObject {
  processId: string;
}
export type LogDepegPolicyClosedEvent = TypedEvent<
  [string],
  LogDepegPolicyClosedEventObject
>;

export type LogDepegPolicyClosedEventFilter =
  TypedEventFilter<LogDepegPolicyClosedEvent>;

export interface LogDepegPolicyCreatedEventObject {
  processId: string;
  policyHolder: string;
  sumInsuredAmount: BigNumber;
}
export type LogDepegPolicyCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  LogDepegPolicyCreatedEventObject
>;

export type LogDepegPolicyCreatedEventFilter =
  TypedEventFilter<LogDepegPolicyCreatedEvent>;

export interface LogDepegPolicyExpiredEventObject {
  processId: string;
}
export type LogDepegPolicyExpiredEvent = TypedEvent<
  [string],
  LogDepegPolicyExpiredEventObject
>;

export type LogDepegPolicyExpiredEventFilter =
  TypedEventFilter<LogDepegPolicyExpiredEvent>;

export interface LogDepegPriceEventEventObject {
  priceId: BigNumber;
  price: BigNumber;
  eventType: number;
  triggeredAt: BigNumber;
  depeggedAt: BigNumber;
  createdAt: BigNumber;
}
export type LogDepegPriceEventEvent = TypedEvent<
  [BigNumber, BigNumber, number, BigNumber, BigNumber, BigNumber],
  LogDepegPriceEventEventObject
>;

export type LogDepegPriceEventEventFilter =
  TypedEventFilter<LogDepegPriceEventEvent>;

export interface LogDepegProcessedAmountReductionEventObject {
  processId: string;
  protectedAmount: BigNumber;
  amountLeftToProcess: BigNumber;
}
export type LogDepegProcessedAmountReductionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogDepegProcessedAmountReductionEventObject
>;

export type LogDepegProcessedAmountReductionEventFilter =
  TypedEventFilter<LogDepegProcessedAmountReductionEvent>;

export interface LogDepegProductDeactivatedEventObject {
  priceId: BigNumber;
  deactivatedAt: BigNumber;
}
export type LogDepegProductDeactivatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogDepegProductDeactivatedEventObject
>;

export type LogDepegProductDeactivatedEventFilter =
  TypedEventFilter<LogDepegProductDeactivatedEvent>;

export interface LogDepegProductPausedEventObject {
  priceId: BigNumber;
  pausedAt: BigNumber;
}
export type LogDepegProductPausedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogDepegProductPausedEventObject
>;

export type LogDepegProductPausedEventFilter =
  TypedEventFilter<LogDepegProductPausedEvent>;

export interface LogDepegProductReactivatedEventObject {
  reactivatedAt: BigNumber;
}
export type LogDepegProductReactivatedEvent = TypedEvent<
  [BigNumber],
  LogDepegProductReactivatedEventObject
>;

export type LogDepegProductReactivatedEventFilter =
  TypedEventFilter<LogDepegProductReactivatedEvent>;

export interface LogDepegProductUnpausedEventObject {
  priceId: BigNumber;
  unpausedAt: BigNumber;
}
export type LogDepegProductUnpausedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogDepegProductUnpausedEventObject
>;

export type LogDepegProductUnpausedEventFilter =
  TypedEventFilter<LogDepegProductUnpausedEvent>;

export interface LogDepegProtectedAmountReductionEventObject {
  processId: string;
  protectedAmount: BigNumber;
  depegBalance: BigNumber;
}
export type LogDepegProtectedAmountReductionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogDepegProtectedAmountReductionEventObject
>;

export type LogDepegProtectedAmountReductionEventFilter =
  TypedEventFilter<LogDepegProtectedAmountReductionEvent>;

export interface LogProductApprovedEventObject {
  componentId: BigNumber;
}
export type LogProductApprovedEvent = TypedEvent<
  [BigNumber],
  LogProductApprovedEventObject
>;

export type LogProductApprovedEventFilter =
  TypedEventFilter<LogProductApprovedEvent>;

export interface LogProductCreatedEventObject {
  productAddress: string;
}
export type LogProductCreatedEvent = TypedEvent<
  [string],
  LogProductCreatedEventObject
>;

export type LogProductCreatedEventFilter =
  TypedEventFilter<LogProductCreatedEvent>;

export interface LogProductDeclinedEventObject {
  componentId: BigNumber;
}
export type LogProductDeclinedEvent = TypedEvent<
  [BigNumber],
  LogProductDeclinedEventObject
>;

export type LogProductDeclinedEventFilter =
  TypedEventFilter<LogProductDeclinedEvent>;

export interface LogProductProposedEventObject {
  componentId: BigNumber;
}
export type LogProductProposedEvent = TypedEvent<
  [BigNumber],
  LogProductProposedEventObject
>;

export type LogProductProposedEventFilter =
  TypedEventFilter<LogProductProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DepegProduct extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DepegProductInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLAIM_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<[string]>;

    EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<[string]>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    GANACHE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAINNET(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addDepegBalances(
      depegBalances: DepegProduct.DepegBalanceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applications(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { applicationCount: BigNumber }>;

    applyForPolicyWithBundle(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyForPolicyWithBundleAndSignature(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateClaimAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimAmount: BigNumber }>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; totalAmount: BigNumber }
    >;

    calculateNetPremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPremium: BigNumber }>;

    calculatePremium(
      netPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premiumAmount: BigNumber }>;

    createDepegBalance(
      wallet: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [DepegProduct.DepegBalanceStructOutput] & {
        depegBalance: DepegProduct.DepegBalanceStructOutput;
      }
    >;

    createDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decodeClaimInfoFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { depegPrice: BigNumber; depeggedAt: BigNumber }
    >;

    encodeClaimInfoAsData(
      depegPrice: PromiseOrValue<BigNumberish>,
      depeggedAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getApplicationDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { processId: string }>;

    getClaimData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        wallet: string;
        protectedAmount: BigNumber;
        actualAmount: BigNumber;
        hasClaim: boolean;
        claimId: BigNumber;
        claimState: number;
        claimAmount: BigNumber;
        claimCreatedAt: BigNumber;
      }
    >;

    getClaimDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getDepegBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [DepegProduct.DepegBalanceStructOutput] & {
        depegBalance: DepegProduct.DepegBalanceStructOutput;
      }
    >;

    getDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IPolicy.ClaimStructOutput] & { claim: IPolicy.ClaimStructOutput }
    >;

    getDepegPriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [IPriceDataProvider.PriceInfoStructOutput] & {
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
      }
    >;

    getDepegState(
      overrides?: CallOverrides
    ): Promise<[number] & { state: number }>;

    getDepeggedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { depeggedAt: BigNumber }>;

    getDepeggedBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    getFeeFractionFullUnit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fractionFullUnit: BigNumber }>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ITreasury.FeeSpecificationStructOutput] & {
        feeSpecification: ITreasury.FeeSpecificationStructOutput;
      }
    >;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [IPriceDataProvider.PriceInfoStructOutput] & {
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
      }
    >;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPayoutDataStructure(
      overrides?: CallOverrides
    ): Promise<[string] & { dataStructure: string }>;

    getPolicyExpirationData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isExpired: boolean; expiredAt: BigNumber }
    >;

    getPolicyFlow(overrides?: CallOverrides): Promise<[string]>;

    getPolicyId(
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { processId: string }>;

    getPolicyToProcess(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { processId: string; wallet: string }>;

    getPriceDataProvider(
      overrides?: CallOverrides
    ): Promise<[string] & { priceDataProvider: string }>;

    getProcessId(
      policyHolder: PromiseOrValue<string>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { processId: string }>;

    getProcessedBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimedBalance: BigNumber }>;

    getProtectedBalance(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { protectedBalance: BigNumber }>;

    getProtectedToken(
      overrides?: CallOverrides
    ): Promise<[string] & { protectedToken: string }>;

    getProtectedWallet(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { wallet: string }>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRiskpoolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { signer: string }>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getState(overrides?: CallOverrides): Promise<[number]>;

    getTargetPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { targetPrice: BigNumber }>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    getTriggeredAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { triggeredAt: BigNumber }>;

    getType(overrides?: CallOverrides): Promise<[number]>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasClaim: boolean }>;

    isNewPriceInfoEventAvailable(
      overrides?: CallOverrides
    ): Promise<
      [boolean, IPriceDataProvider.PriceInfoStructOutput, BigNumber] & {
        newEvent: boolean;
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
        timeSinceEvent: BigNumber;
      }
    >;

    isOracle(overrides?: CallOverrides): Promise<[boolean]>;

    isProduct(overrides?: CallOverrides): Promise<[boolean]>;

    isRiskpool(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policies(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { policyCount: BigNumber }>;

    policiesToProcess(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfPolicies: BigNumber }>;

    policyIsAllowedToClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { mayClaim: boolean }>;

    processIds(
      policyHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfProcessIds: BigNumber }>;

    processLatestPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPolicies(
      _processIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reactivateProduct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepeggedBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CLAIM_ID(overrides?: CallOverrides): Promise<BigNumber>;

  EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

  EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<string>;

  EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  GANACHE(overrides?: CallOverrides): Promise<BigNumber>;

  MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  POLICY_FLOW(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addDepegBalances(
    depegBalances: DepegProduct.DepegBalanceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applications(overrides?: CallOverrides): Promise<BigNumber>;

  applyForPolicyWithBundle(
    protectedWallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyForPolicyWithBundleAndSignature(
    policyHolder: PromiseOrValue<string>,
    protectedWallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    signatureId: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approvalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archiveCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateClaimAmount(
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { feeAmount: BigNumber; totalAmount: BigNumber }
  >;

  calculateNetPremium(
    sumInsured: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePremium(
    netPremium: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createDepegBalance(
    wallet: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DepegProduct.DepegBalanceStructOutput>;

  createDepegClaim(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decodeClaimInfoFromData(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { depegPrice: BigNumber; depeggedAt: BigNumber }
  >;

  encodeClaimInfoAsData(
    depegPrice: PromiseOrValue<BigNumberish>,
    depeggedAt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getApplicationDataStructure(overrides?: CallOverrides): Promise<string>;

  getApplicationId(
    applicationIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaimData(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      wallet: string;
      protectedAmount: BigNumber;
      actualAmount: BigNumber;
      hasClaim: boolean;
      claimId: BigNumber;
      claimState: number;
      claimAmount: BigNumber;
      claimCreatedAt: BigNumber;
    }
  >;

  getClaimDataStructure(overrides?: CallOverrides): Promise<string>;

  getDepegBalance(
    protectedWallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DepegProduct.DepegBalanceStructOutput>;

  getDepegClaim(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IPolicy.ClaimStructOutput>;

  getDepegPriceInfo(
    overrides?: CallOverrides
  ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

  getDepegState(overrides?: CallOverrides): Promise<number>;

  getDepeggedAt(overrides?: CallOverrides): Promise<BigNumber>;

  getDepeggedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeSpecification(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ITreasury.FeeSpecificationStructOutput>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestPriceInfo(
    overrides?: CallOverrides
  ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

  getName(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPayoutDataStructure(overrides?: CallOverrides): Promise<string>;

  getPolicyExpirationData(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isExpired: boolean; expiredAt: BigNumber }
  >;

  getPolicyFlow(overrides?: CallOverrides): Promise<string>;

  getPolicyId(
    policyIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPolicyToProcess(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { processId: string; wallet: string }>;

  getPriceDataProvider(overrides?: CallOverrides): Promise<string>;

  getProcessId(
    policyHolder: PromiseOrValue<string>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProcessedBalance(
    protectedWallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtectedBalance(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtectedToken(overrides?: CallOverrides): Promise<string>;

  getProtectedWallet(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

  getSigner(
    digest: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSignerFromDigestAndSignature(
    protectedWallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    signatureId: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getState(overrides?: CallOverrides): Promise<number>;

  getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getToken(overrides?: CallOverrides): Promise<string>;

  getTriggeredAt(overrides?: CallOverrides): Promise<BigNumber>;

  getType(overrides?: CallOverrides): Promise<number>;

  getTypedDataV4Hash(
    structHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasDepegClaim(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNewPriceInfoEventAvailable(
    overrides?: CallOverrides
  ): Promise<
    [boolean, IPriceDataProvider.PriceInfoStructOutput, BigNumber] & {
      newEvent: boolean;
      priceInfo: IPriceDataProvider.PriceInfoStructOutput;
      timeSinceEvent: BigNumber;
    }
  >;

  isOracle(overrides?: CallOverrides): Promise<boolean>;

  isProduct(overrides?: CallOverrides): Promise<boolean>;

  isRiskpool(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policies(overrides?: CallOverrides): Promise<BigNumber>;

  policiesToProcess(overrides?: CallOverrides): Promise<BigNumber>;

  policyIsAllowedToClaim(
    processId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  processIds(
    policyHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processLatestPriceInfo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPolicies(
    _processIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPolicy(
    processId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reactivateProduct(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resumeCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  riskPoolCapacityCallback(
    capacity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepeggedBlockNumber(
    blockNumber: PromiseOrValue<BigNumberish>,
    comment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setId(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseCallback(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CLAIM_ID(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

    EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<string>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    GANACHE(overrides?: CallOverrides): Promise<BigNumber>;

    MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addDepegBalances(
      depegBalances: DepegProduct.DepegBalanceStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balanceOkCases: BigNumber;
        balanceErrorCases: BigNumber;
      }
    >;

    applications(overrides?: CallOverrides): Promise<BigNumber>;

    applyForPolicyWithBundle(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    applyForPolicyWithBundleAndSignature(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    approvalCallback(overrides?: CallOverrides): Promise<void>;

    archiveCallback(overrides?: CallOverrides): Promise<void>;

    calculateClaimAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; totalAmount: BigNumber }
    >;

    calculateNetPremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      netPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDepegBalance(
      wallet: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DepegProduct.DepegBalanceStructOutput>;

    createDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    declineCallback(overrides?: CallOverrides): Promise<void>;

    decodeClaimInfoFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { depegPrice: BigNumber; depeggedAt: BigNumber }
    >;

    encodeClaimInfoAsData(
      depegPrice: PromiseOrValue<BigNumberish>,
      depeggedAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getApplicationDataStructure(overrides?: CallOverrides): Promise<string>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaimData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        wallet: string;
        protectedAmount: BigNumber;
        actualAmount: BigNumber;
        hasClaim: boolean;
        claimId: BigNumber;
        claimState: number;
        claimAmount: BigNumber;
        claimCreatedAt: BigNumber;
      }
    >;

    getClaimDataStructure(overrides?: CallOverrides): Promise<string>;

    getDepegBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DepegProduct.DepegBalanceStructOutput>;

    getDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPolicy.ClaimStructOutput>;

    getDepegPriceInfo(
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    getDepegState(overrides?: CallOverrides): Promise<number>;

    getDepeggedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDepeggedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ITreasury.FeeSpecificationStructOutput>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    getName(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPayoutDataStructure(overrides?: CallOverrides): Promise<string>;

    getPolicyExpirationData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isExpired: boolean; expiredAt: BigNumber }
    >;

    getPolicyFlow(overrides?: CallOverrides): Promise<string>;

    getPolicyId(
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPolicyToProcess(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { processId: string; wallet: string }>;

    getPriceDataProvider(overrides?: CallOverrides): Promise<string>;

    getProcessId(
      policyHolder: PromiseOrValue<string>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProcessedBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtectedBalance(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtectedToken(overrides?: CallOverrides): Promise<string>;

    getProtectedWallet(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getState(overrides?: CallOverrides): Promise<number>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<string>;

    getTriggeredAt(overrides?: CallOverrides): Promise<BigNumber>;

    getType(overrides?: CallOverrides): Promise<number>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNewPriceInfoEventAvailable(
      overrides?: CallOverrides
    ): Promise<
      [boolean, IPriceDataProvider.PriceInfoStructOutput, BigNumber] & {
        newEvent: boolean;
        priceInfo: IPriceDataProvider.PriceInfoStructOutput;
        timeSinceEvent: BigNumber;
      }
    >;

    isOracle(overrides?: CallOverrides): Promise<boolean>;

    isProduct(overrides?: CallOverrides): Promise<boolean>;

    isRiskpool(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseCallback(overrides?: CallOverrides): Promise<void>;

    policies(overrides?: CallOverrides): Promise<BigNumber>;

    policiesToProcess(overrides?: CallOverrides): Promise<BigNumber>;

    policyIsAllowedToClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processIds(
      policyHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<IPriceDataProvider.PriceInfoStructOutput>;

    processPolicies(
      _processIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    processPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCallback(overrides?: CallOverrides): Promise<void>;

    reactivateProduct(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resumeCallback(overrides?: CallOverrides): Promise<void>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepeggedBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    suspendCallback(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseCallback(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogComponentApproved(uint256)"(id?: null): LogComponentApprovedEventFilter;
    LogComponentApproved(id?: null): LogComponentApprovedEventFilter;

    "LogComponentArchived(uint256)"(id?: null): LogComponentArchivedEventFilter;
    LogComponentArchived(id?: null): LogComponentArchivedEventFilter;

    "LogComponentCreated(bytes32,uint8,address,address)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;
    LogComponentCreated(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      registryAddress?: null
    ): LogComponentCreatedEventFilter;

    "LogComponentDeclined(uint256)"(id?: null): LogComponentDeclinedEventFilter;
    LogComponentDeclined(id?: null): LogComponentDeclinedEventFilter;

    "LogComponentPaused(uint256)"(id?: null): LogComponentPausedEventFilter;
    LogComponentPaused(id?: null): LogComponentPausedEventFilter;

    "LogComponentProposed(bytes32,uint8,address,uint256)"(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;
    LogComponentProposed(
      componentName?: null,
      componentType?: null,
      componentAddress?: null,
      id?: null
    ): LogComponentProposedEventFilter;

    "LogComponentResumed(uint256)"(id?: null): LogComponentResumedEventFilter;
    LogComponentResumed(id?: null): LogComponentResumedEventFilter;

    "LogComponentStateChanged(uint256,uint8,uint8)"(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;
    LogComponentStateChanged(
      id?: null,
      stateOld?: null,
      stateNew?: null
    ): LogComponentStateChangedEventFilter;

    "LogComponentSuspended(uint256)"(
      id?: null
    ): LogComponentSuspendedEventFilter;
    LogComponentSuspended(id?: null): LogComponentSuspendedEventFilter;

    "LogComponentUnpaused(uint256)"(id?: null): LogComponentUnpausedEventFilter;
    LogComponentUnpaused(id?: null): LogComponentUnpausedEventFilter;

    "LogDepegApplicationCreated(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      processId?: null,
      policyHolder?: null,
      protectedWallet?: null,
      protectedBalance?: null,
      sumInsuredAmount?: null,
      premiumAmount?: null,
      netPremiumAmount?: null
    ): LogDepegApplicationCreatedEventFilter;
    LogDepegApplicationCreated(
      processId?: null,
      policyHolder?: null,
      protectedWallet?: null,
      protectedBalance?: null,
      sumInsuredAmount?: null,
      premiumAmount?: null,
      netPremiumAmount?: null
    ): LogDepegApplicationCreatedEventFilter;

    "LogDepegBlockNumberSet(uint256,string)"(
      blockNumber?: null,
      comment?: null
    ): LogDepegBlockNumberSetEventFilter;
    LogDepegBlockNumberSet(
      blockNumber?: null,
      comment?: null
    ): LogDepegBlockNumberSetEventFilter;

    "LogDepegClaimConfirmed(bytes32,uint256,uint256,uint256,uint256)"(
      processId?: null,
      claimId?: null,
      claimAmount?: null,
      accountBalance?: null,
      payoutAmount?: null
    ): LogDepegClaimConfirmedEventFilter;
    LogDepegClaimConfirmed(
      processId?: null,
      claimId?: null,
      claimAmount?: null,
      accountBalance?: null,
      payoutAmount?: null
    ): LogDepegClaimConfirmedEventFilter;

    "LogDepegClaimCreated(bytes32,uint256,uint256)"(
      processId?: null,
      claimId?: null,
      claimAmount?: null
    ): LogDepegClaimCreatedEventFilter;
    LogDepegClaimCreated(
      processId?: null,
      claimId?: null,
      claimAmount?: null
    ): LogDepegClaimCreatedEventFilter;

    "LogDepegDepegBalanceAdded(address,uint256,uint256)"(
      wallet?: null,
      blockNumber?: null,
      balance?: null
    ): LogDepegDepegBalanceAddedEventFilter;
    LogDepegDepegBalanceAdded(
      wallet?: null,
      blockNumber?: null,
      balance?: null
    ): LogDepegDepegBalanceAddedEventFilter;

    "LogDepegDepegBalanceError(address,uint256,uint256,uint256)"(
      wallet?: null,
      blockNumber?: null,
      balance?: null,
      depeggedBlockNumber?: null
    ): LogDepegDepegBalanceErrorEventFilter;
    LogDepegDepegBalanceError(
      wallet?: null,
      blockNumber?: null,
      balance?: null,
      depeggedBlockNumber?: null
    ): LogDepegDepegBalanceErrorEventFilter;

    "LogDepegPayoutProcessed(bytes32,uint256,uint256,uint256)"(
      processId?: null,
      claimId?: null,
      payoutId?: null,
      payoutAmount?: null
    ): LogDepegPayoutProcessedEventFilter;
    LogDepegPayoutProcessed(
      processId?: null,
      claimId?: null,
      payoutId?: null,
      payoutAmount?: null
    ): LogDepegPayoutProcessedEventFilter;

    "LogDepegPolicyClosed(bytes32)"(
      processId?: null
    ): LogDepegPolicyClosedEventFilter;
    LogDepegPolicyClosed(processId?: null): LogDepegPolicyClosedEventFilter;

    "LogDepegPolicyCreated(bytes32,address,uint256)"(
      processId?: null,
      policyHolder?: null,
      sumInsuredAmount?: null
    ): LogDepegPolicyCreatedEventFilter;
    LogDepegPolicyCreated(
      processId?: null,
      policyHolder?: null,
      sumInsuredAmount?: null
    ): LogDepegPolicyCreatedEventFilter;

    "LogDepegPolicyExpired(bytes32)"(
      processId?: null
    ): LogDepegPolicyExpiredEventFilter;
    LogDepegPolicyExpired(processId?: null): LogDepegPolicyExpiredEventFilter;

    "LogDepegPriceEvent(uint256,uint256,uint8,uint256,uint256,uint256)"(
      priceId?: null,
      price?: null,
      eventType?: null,
      triggeredAt?: null,
      depeggedAt?: null,
      createdAt?: null
    ): LogDepegPriceEventEventFilter;
    LogDepegPriceEvent(
      priceId?: null,
      price?: null,
      eventType?: null,
      triggeredAt?: null,
      depeggedAt?: null,
      createdAt?: null
    ): LogDepegPriceEventEventFilter;

    "LogDepegProcessedAmountReduction(bytes32,uint256,uint256)"(
      processId?: null,
      protectedAmount?: null,
      amountLeftToProcess?: null
    ): LogDepegProcessedAmountReductionEventFilter;
    LogDepegProcessedAmountReduction(
      processId?: null,
      protectedAmount?: null,
      amountLeftToProcess?: null
    ): LogDepegProcessedAmountReductionEventFilter;

    "LogDepegProductDeactivated(uint256,uint256)"(
      priceId?: null,
      deactivatedAt?: null
    ): LogDepegProductDeactivatedEventFilter;
    LogDepegProductDeactivated(
      priceId?: null,
      deactivatedAt?: null
    ): LogDepegProductDeactivatedEventFilter;

    "LogDepegProductPaused(uint256,uint256)"(
      priceId?: null,
      pausedAt?: null
    ): LogDepegProductPausedEventFilter;
    LogDepegProductPaused(
      priceId?: null,
      pausedAt?: null
    ): LogDepegProductPausedEventFilter;

    "LogDepegProductReactivated(uint256)"(
      reactivatedAt?: null
    ): LogDepegProductReactivatedEventFilter;
    LogDepegProductReactivated(
      reactivatedAt?: null
    ): LogDepegProductReactivatedEventFilter;

    "LogDepegProductUnpaused(uint256,uint256)"(
      priceId?: null,
      unpausedAt?: null
    ): LogDepegProductUnpausedEventFilter;
    LogDepegProductUnpaused(
      priceId?: null,
      unpausedAt?: null
    ): LogDepegProductUnpausedEventFilter;

    "LogDepegProtectedAmountReduction(bytes32,uint256,uint256)"(
      processId?: null,
      protectedAmount?: null,
      depegBalance?: null
    ): LogDepegProtectedAmountReductionEventFilter;
    LogDepegProtectedAmountReduction(
      processId?: null,
      protectedAmount?: null,
      depegBalance?: null
    ): LogDepegProtectedAmountReductionEventFilter;

    "LogProductApproved(uint256)"(
      componentId?: null
    ): LogProductApprovedEventFilter;
    LogProductApproved(componentId?: null): LogProductApprovedEventFilter;

    "LogProductCreated(address)"(
      productAddress?: null
    ): LogProductCreatedEventFilter;
    LogProductCreated(productAddress?: null): LogProductCreatedEventFilter;

    "LogProductDeclined(uint256)"(
      componentId?: null
    ): LogProductDeclinedEventFilter;
    LogProductDeclined(componentId?: null): LogProductDeclinedEventFilter;

    "LogProductProposed(uint256)"(
      componentId?: null
    ): LogProductProposedEventFilter;
    LogProductProposed(componentId?: null): LogProductProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CLAIM_ID(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    GANACHE(overrides?: CallOverrides): Promise<BigNumber>;

    MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addDepegBalances(
      depegBalances: DepegProduct.DepegBalanceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applications(overrides?: CallOverrides): Promise<BigNumber>;

    applyForPolicyWithBundle(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyForPolicyWithBundleAndSignature(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateClaimAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNetPremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      netPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDepegBalance(
      wallet: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decodeClaimInfoFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeClaimInfoAsData(
      depegPrice: PromiseOrValue<BigNumberish>,
      depeggedAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApplicationDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getDepegBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepegPriceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getDepegState(overrides?: CallOverrides): Promise<BigNumber>;

    getDepeggedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDepeggedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeFractionFullUnit(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPriceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutDataStructure(overrides?: CallOverrides): Promise<BigNumber>;

    getPolicyExpirationData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyFlow(overrides?: CallOverrides): Promise<BigNumber>;

    getPolicyId(
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyToProcess(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getProcessId(
      policyHolder: PromiseOrValue<string>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProcessedBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtectedBalance(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtectedToken(overrides?: CallOverrides): Promise<BigNumber>;

    getProtectedWallet(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskpoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTriggeredAt(overrides?: CallOverrides): Promise<BigNumber>;

    getType(overrides?: CallOverrides): Promise<BigNumber>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNewPriceInfoEventAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    isOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isProduct(overrides?: CallOverrides): Promise<BigNumber>;

    isRiskpool(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policies(overrides?: CallOverrides): Promise<BigNumber>;

    policiesToProcess(overrides?: CallOverrides): Promise<BigNumber>;

    policyIsAllowedToClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processIds(
      policyHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processLatestPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPolicies(
      _processIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reactivateProduct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepeggedBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAIM_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_POLICY_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GANACHE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAINNET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLICY_FLOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDepegBalances(
      depegBalances: DepegProduct.DepegBalanceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applications(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyForPolicyWithBundle(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyForPolicyWithBundleAndSignature(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approvalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archiveCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateClaimAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateNetPremium(
      sumInsured: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePremium(
      netPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDepegBalance(
      wallet: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decodeClaimInfoFromData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeClaimInfoAsData(
      depegPrice: PromiseOrValue<BigNumberish>,
      depeggedAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApplicationDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApplicationId(
      applicationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepegBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepegPriceInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepegState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepeggedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepeggedBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeFractionFullUnit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeSpecification(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPriceInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoutDataStructure(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyExpirationData(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyFlow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPolicyId(
      policyIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyToProcess(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceDataProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProcessId(
      policyHolder: PromiseOrValue<string>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProcessedBalance(
      protectedWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtectedBalance(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtectedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtectedWallet(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskpoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signatureId: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTriggeredAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDepegClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNewPriceInfoEventAvailable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProduct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRiskpool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policiesToProcess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyIsAllowedToClaim(
      processId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processIds(
      policyHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processLatestPriceInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPolicies(
      _processIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPolicy(
      processId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reactivateProduct(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resumeCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    riskPoolCapacityCallback(
      capacity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepeggedBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCallback(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
