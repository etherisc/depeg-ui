/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IInstanceDataProvider {
  export type InstanceInfoStruct = {
    id: PromiseOrValue<BytesLike>;
    state: PromiseOrValue<BigNumberish>;
    displayName: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
    registry: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type InstanceInfoStructOutput = [
    string,
    number,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: string;
    state: number;
    displayName: string;
    chainId: BigNumber;
    registry: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type TokenKeyStruct = {
    token: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
  };

  export type TokenKeyStructOutput = [string, BigNumber] & {
    token: string;
    chainId: BigNumber;
  };

  export type TokenInfoStruct = {
    key: IInstanceDataProvider.TokenKeyStruct;
    state: PromiseOrValue<BigNumberish>;
    symbol: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type TokenInfoStructOutput = [
    IInstanceDataProvider.TokenKeyStructOutput,
    number,
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    key: IInstanceDataProvider.TokenKeyStructOutput;
    state: number;
    symbol: string;
    decimals: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface IInstanceRegistryInterface extends utils.Interface {
  functions: {
    "getInstanceId(uint256)": FunctionFragment;
    "getInstanceInfo(bytes32)": FunctionFragment;
    "getTokenId(uint256)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getTokenInfo(address,uint256)": FunctionFragment;
    "instances()": FunctionFragment;
    "isRegisteredInstance(bytes32)": FunctionFragment;
    "isRegisteredToken(address)": FunctionFragment;
    "isRegisteredToken(address,uint256)": FunctionFragment;
    "registerInstance(address)": FunctionFragment;
    "registerInstance(bytes32,uint256,address)": FunctionFragment;
    "registerToken(address)": FunctionFragment;
    "registerToken(address,uint256,uint8,string)": FunctionFragment;
    "tokens()": FunctionFragment;
    "updateInstance(bytes32,string)": FunctionFragment;
    "updateInstance(bytes32,uint8)": FunctionFragment;
    "updateToken(address,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getInstanceId"
      | "getInstanceInfo"
      | "getTokenId"
      | "getTokenInfo(address)"
      | "getTokenInfo(address,uint256)"
      | "instances"
      | "isRegisteredInstance"
      | "isRegisteredToken(address)"
      | "isRegisteredToken(address,uint256)"
      | "registerInstance(address)"
      | "registerInstance(bytes32,uint256,address)"
      | "registerToken(address)"
      | "registerToken(address,uint256,uint8,string)"
      | "tokens"
      | "updateInstance(bytes32,string)"
      | "updateInstance(bytes32,uint8)"
      | "updateToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getInstanceId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "instances", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegisteredInstance",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredToken(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstance(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstance(bytes32,uint256,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(address,uint256,uint8,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateInstance(bytes32,string)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstance(bytes32,uint8)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInstanceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstance(bytes32,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(address,uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInstance(bytes32,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstance(bytes32,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;

  events: {
    "LogInstanceRegistryInstanceDisplayNameUpdated(bytes32,string,string)": EventFragment;
    "LogInstanceRegistryInstanceRegistered(bytes32,uint8,bool)": EventFragment;
    "LogInstanceRegistryInstanceStateUpdated(bytes32,uint8,uint8)": EventFragment;
    "LogInstanceRegistryTokenRegistered(address,uint256,uint8,bool)": EventFragment;
    "LogInstanceRegistryTokenStateUpdated(address,uint256,uint8,uint8)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryInstanceDisplayNameUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryInstanceRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryInstanceStateUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryTokenRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogInstanceRegistryTokenStateUpdated"
  ): EventFragment;
}

export interface LogInstanceRegistryInstanceDisplayNameUpdatedEventObject {
  instanceId: string;
  oldDisplayName: string;
  newDisplayName: string;
}
export type LogInstanceRegistryInstanceDisplayNameUpdatedEvent = TypedEvent<
  [string, string, string],
  LogInstanceRegistryInstanceDisplayNameUpdatedEventObject
>;

export type LogInstanceRegistryInstanceDisplayNameUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryInstanceDisplayNameUpdatedEvent>;

export interface LogInstanceRegistryInstanceRegisteredEventObject {
  instanceId: string;
  state: number;
  isNewInstance: boolean;
}
export type LogInstanceRegistryInstanceRegisteredEvent = TypedEvent<
  [string, number, boolean],
  LogInstanceRegistryInstanceRegisteredEventObject
>;

export type LogInstanceRegistryInstanceRegisteredEventFilter =
  TypedEventFilter<LogInstanceRegistryInstanceRegisteredEvent>;

export interface LogInstanceRegistryInstanceStateUpdatedEventObject {
  instanceId: string;
  oldState: number;
  newState: number;
}
export type LogInstanceRegistryInstanceStateUpdatedEvent = TypedEvent<
  [string, number, number],
  LogInstanceRegistryInstanceStateUpdatedEventObject
>;

export type LogInstanceRegistryInstanceStateUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryInstanceStateUpdatedEvent>;

export interface LogInstanceRegistryTokenRegisteredEventObject {
  token: string;
  chainId: BigNumber;
  state: number;
  isNewToken: boolean;
}
export type LogInstanceRegistryTokenRegisteredEvent = TypedEvent<
  [string, BigNumber, number, boolean],
  LogInstanceRegistryTokenRegisteredEventObject
>;

export type LogInstanceRegistryTokenRegisteredEventFilter =
  TypedEventFilter<LogInstanceRegistryTokenRegisteredEvent>;

export interface LogInstanceRegistryTokenStateUpdatedEventObject {
  token: string;
  chainId: BigNumber;
  oldState: number;
  newState: number;
}
export type LogInstanceRegistryTokenStateUpdatedEvent = TypedEvent<
  [string, BigNumber, number, number],
  LogInstanceRegistryTokenStateUpdatedEventObject
>;

export type LogInstanceRegistryTokenStateUpdatedEventFilter =
  TypedEventFilter<LogInstanceRegistryTokenStateUpdatedEvent>;

export interface IInstanceRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInstanceRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { instanceId: string }>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceDataProvider.InstanceInfoStructOutput] & {
        info: IInstanceDataProvider.InstanceInfoStructOutput;
      }
    >;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; chainId: BigNumber }
    >;

    "getTokenInfo(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceDataProvider.TokenInfoStructOutput] & {
        info: IInstanceDataProvider.TokenInfoStructOutput;
      }
    >;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceDataProvider.TokenInfoStructOutput] & {
        info: IInstanceDataProvider.TokenInfoStructOutput;
      }
    >;

    instances(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfInstances: BigNumber }>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerToken(address,uint256,uint8,string)"(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfTokens: BigNumber }>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      displayName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getInstanceId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInstanceInfo(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IInstanceDataProvider.InstanceInfoStructOutput>;

  getTokenId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { tokenAddress: string; chainId: BigNumber }
  >;

  "getTokenInfo(address)"(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

  "getTokenInfo(address,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

  instances(overrides?: CallOverrides): Promise<BigNumber>;

  isRegisteredInstance(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegisteredToken(address)"(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegisteredToken(address,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "registerInstance(address)"(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerInstance(bytes32,uint256,address)"(
    instanceId: PromiseOrValue<BytesLike>,
    chainId: PromiseOrValue<BigNumberish>,
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerToken(address)"(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerToken(address,uint256,uint8,string)"(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    decimals: PromiseOrValue<BigNumberish>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokens(overrides?: CallOverrides): Promise<BigNumber>;

  "updateInstance(bytes32,string)"(
    instanceId: PromiseOrValue<BytesLike>,
    displayName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateInstance(bytes32,uint8)"(
    instanceId: PromiseOrValue<BytesLike>,
    state: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateToken(
    token: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    state: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IInstanceDataProvider.InstanceInfoStructOutput>;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; chainId: BigNumber }
    >;

    "getTokenInfo(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IInstanceDataProvider.TokenInfoStructOutput>;

    instances(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(address,uint256,uint8,string)"(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      displayName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogInstanceRegistryInstanceDisplayNameUpdated(bytes32,string,string)"(
      instanceId?: null,
      oldDisplayName?: null,
      newDisplayName?: null
    ): LogInstanceRegistryInstanceDisplayNameUpdatedEventFilter;
    LogInstanceRegistryInstanceDisplayNameUpdated(
      instanceId?: null,
      oldDisplayName?: null,
      newDisplayName?: null
    ): LogInstanceRegistryInstanceDisplayNameUpdatedEventFilter;

    "LogInstanceRegistryInstanceRegistered(bytes32,uint8,bool)"(
      instanceId?: null,
      state?: null,
      isNewInstance?: null
    ): LogInstanceRegistryInstanceRegisteredEventFilter;
    LogInstanceRegistryInstanceRegistered(
      instanceId?: null,
      state?: null,
      isNewInstance?: null
    ): LogInstanceRegistryInstanceRegisteredEventFilter;

    "LogInstanceRegistryInstanceStateUpdated(bytes32,uint8,uint8)"(
      instanceId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryInstanceStateUpdatedEventFilter;
    LogInstanceRegistryInstanceStateUpdated(
      instanceId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryInstanceStateUpdatedEventFilter;

    "LogInstanceRegistryTokenRegistered(address,uint256,uint8,bool)"(
      token?: null,
      chainId?: null,
      state?: null,
      isNewToken?: null
    ): LogInstanceRegistryTokenRegisteredEventFilter;
    LogInstanceRegistryTokenRegistered(
      token?: null,
      chainId?: null,
      state?: null,
      isNewToken?: null
    ): LogInstanceRegistryTokenRegisteredEventFilter;

    "LogInstanceRegistryTokenStateUpdated(address,uint256,uint8,uint8)"(
      token?: null,
      chainId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryTokenStateUpdatedEventFilter;
    LogInstanceRegistryTokenStateUpdated(
      token?: null,
      chainId?: null,
      oldState?: null,
      newState?: null
    ): LogInstanceRegistryTokenStateUpdatedEventFilter;
  };

  estimateGas: {
    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInfo(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instances(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerToken(address,uint256,uint8,string)"(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      displayName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInstanceId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceInfo(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInfo(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInfo(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegisteredInstance(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegisteredToken(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegisteredToken(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registerInstance(address)"(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerInstance(bytes32,uint256,address)"(
      instanceId: PromiseOrValue<BytesLike>,
      chainId: PromiseOrValue<BigNumberish>,
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerToken(address)"(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerToken(address,uint256,uint8,string)"(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "updateInstance(bytes32,string)"(
      instanceId: PromiseOrValue<BytesLike>,
      displayName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateInstance(bytes32,uint8)"(
      instanceId: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateToken(
      token: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
