/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GaslessInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN_NAME()": FunctionFragment;
    "EIP712_DOMAIN_VERSION()": FunctionFragment;
    "EIP712_POLICY_TYPE()": FunctionFragment;
    "EIP712_TYPE_HASH()": FunctionFragment;
    "applyForPolicy(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "getDigest(address,uint256,uint256,uint256)": FunctionFragment;
    "getSigner(bytes32,bytes)": FunctionFragment;
    "getSignerFromDigestAndSignature(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "getStructHash(address,uint256,uint256,uint256)": FunctionFragment;
    "getTypedDataV4Hash(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_DOMAIN_NAME"
      | "EIP712_DOMAIN_VERSION"
      | "EIP712_POLICY_TYPE"
      | "EIP712_TYPE_HASH"
      | "applyForPolicy"
      | "getDigest"
      | "getSigner"
      | "getSignerFromDigestAndSignature"
      | "getStructHash"
      | "getTypedDataV4Hash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_POLICY_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyForPolicy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerFromDigestAndSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStructHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataV4Hash",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_POLICY_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDigest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSignerFromDigestAndSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataV4Hash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Gasless extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaslessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<[string]>;

    EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<[string]>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getDigest(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { signer: string }>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStructHash(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

  EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<string>;

  EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  applyForPolicy(
    policyHolder: PromiseOrValue<string>,
    protectedWallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  getDigest(
    protectedWallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSigner(
    digest: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSignerFromDigestAndSignature(
    protectedWallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStructHash(
    protectedWallet: PromiseOrValue<string>,
    protectedBalance: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTypedDataV4Hash(
    structHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

    EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<string>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDigest(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStructHash(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    EIP712_DOMAIN_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_POLICY_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDigest(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStructHash(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_POLICY_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyForPolicy(
      policyHolder: PromiseOrValue<string>,
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDigest(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigner(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSignerFromDigestAndSignature(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStructHash(
      protectedWallet: PromiseOrValue<string>,
      protectedBalance: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypedDataV4Hash(
      structHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
