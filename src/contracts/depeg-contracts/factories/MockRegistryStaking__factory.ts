/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  MockRegistryStaking,
  MockRegistryStakingInterface,
} from "../MockRegistryStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dipAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "usdtAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes5",
        name: "chain",
        type: "bytes5",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "objectType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "instanceId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "riskpoolId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bundleId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "LogMockBundleRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "BUNDLE",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CHAIN",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "EXP",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "INSTANCE",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MULTIPLIER",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ORACLE",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POLICY",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRODUCT",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REGISTRY",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "RISKPOOL",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "STAKE",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SYMBOL",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TOKEN",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNDEFINED",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint96",
        name: "targetNftId",
        type: "uint96",
      },
    ],
    name: "capitalSupport",
    outputs: [
      {
        internalType: "uint256",
        name: "capitalAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint96",
        name: "tokenId",
        type: "uint96",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "instanceId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "bundleId",
        type: "uint256",
      },
    ],
    name: "getBundleNftId",
    outputs: [
      {
        internalType: "uint96",
        name: "nftId",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "instanceId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "componentId",
        type: "uint256",
      },
    ],
    name: "getComponentNftId",
    outputs: [
      {
        internalType: "uint96",
        name: "nftId",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDip",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "instanceId",
        type: "bytes32",
      },
    ],
    name: "getInstanceNftId",
    outputs: [
      {
        internalType: "uint96",
        name: "id",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNft",
    outputs: [
      {
        internalType: "contract IChainNftFacade",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegistry",
    outputs: [
      {
        internalType: "contract IChainRegistryFacade",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingWallet",
    outputs: [
      {
        internalType: "address",
        name: "stakingWallet",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementsIStaking",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maxRewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "instanceId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "riskpoolId",
        type: "uint256",
      },
    ],
    name: "mockRegisterRiskpool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes5",
        name: "chain",
        type: "bytes5",
      },
      {
        internalType: "uint8",
        name: "objectType",
        type: "uint8",
      },
    ],
    name: "objects",
    outputs: [
      {
        internalType: "uint256",
        name: "numberOfObjects",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rateDecimals",
    outputs: [
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "instanceId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "riskpoolId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bundleId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "displayName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "expiryAt",
        type: "uint256",
      },
    ],
    name: "registerBundle",
    outputs: [
      {
        internalType: "uint96",
        name: "nftId",
        type: "uint96",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "dipAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "dipAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint96",
        name: "targetNftId",
        type: "uint96",
      },
      {
        internalType: "uint256",
        name: "dipAmount",
        type: "uint256",
      },
    ],
    name: "setStakedDip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes5",
        name: "chain",
        type: "bytes5",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setStakingRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes5",
        name: "chain",
        type: "bytes5",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "stakingRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "toChain",
    outputs: [
      {
        internalType: "bytes5",
        name: "chain",
        type: "bytes5",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "int8",
        name: "exp",
        type: "int8",
      },
    ],
    name: "toRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalMinted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint48",
        name: "",
        type: "uint48",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "versionParts",
    outputs: [
      {
        internalType: "uint16",
        name: "major",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "minor",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "patch",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016c9380380620016c98339810160408190526200003491620002f7565b60088054336001600160a01b031991821617909155600f805482166001600160a01b0385811691909117909155601080549092169083161790554660098190556200007f906200015a565b600a805464ffffffffff191660d89290921c919091179055600954620000a59062000165565b600b819055620000b790600a620003fd565b600c556002600d819055620000cc9062000194565b50620000d9600362000194565b50620000e6600462000194565b50620000f3600462000194565b5062000103607d60021962000204565b600655600a54620001529060d81b8262000121600160001962000204565b6001600160d81b031990921660009081526007602090815260408083206001600160a01b0390941683529290522055565b505062000550565b60d881901b5b919050565b60005b81156200016057806200017b816200051c565b91506200018c9050600a836200038f565b915062000168565b6000620001b730604051806020016040528060008152506200021960201b60201c565b600a5460d81b6001600160d81b03191660009081526020818152604080832060ff8716845290915281208054929350600192909190620001f990849062000374565b909155509092915050565b60006200021283836200025c565b9392505050565b60006200022562000284565b6000818152600460205260408120805460ff19166001179055600e80549293509062000251836200051c565b919050555092915050565b60006200026b8260126200032e565b6200027890600a6200040e565b620002129084620004fa565b6000600b54600954600c54600d546200029e9190620004fa565b620002aa919062000374565b620002b7906064620004fa565b620002c3919062000374565b600d80549192506000620002d7836200051c565b919050555090565b80516001600160a01b03811681146200016057600080fd5b600080604083850312156200030a578182fd5b6200031583620002df565b91506200032560208401620002df565b90509250929050565b600081810b83820b82821282607f038213811516156200035257620003526200053a565b82607f190382128116156200036b576200036b6200053a565b50019392505050565b600082198211156200038a576200038a6200053a565b500190565b600082620003ab57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611620003c45750620003f4565b818704821115620003d957620003d96200053a565b80861615620003e757918102915b9490941c938002620003b3565b94509492505050565b60006200021260001984846200041d565b60006200021260001960ff8516845b6000826200042e5750600162000212565b816200043d5750600062000212565b8160018114620004565760028114620004615762000495565b600191505062000212565b60ff8411156200047557620004756200053a565b6001841b9150848211156200048e576200048e6200053a565b5062000212565b5060208310610133831016604e8410600b8410161715620004cd575081810a83811115620004c757620004c76200053a565b62000212565b620004dc8484846001620003b0565b808604821115620004f157620004f16200053a565b02949350505050565b60008160001904831182151516156200051757620005176200053a565b500290565b60006000198214156200053357620005336200053a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b61116980620005606000396000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c80635ce4193b1161015c578063b3fc986e116100ce578063d15db8b411610087578063d15db8b4146105de578063d91fc8c7146105e6578063dadbccee1461061a578063f0de8228146104f5578063f76f8d7814610622578063fc1cd6cc146106455761028a565b8063b3fc986e14610444578063b54ded6e14610538578063bd4080ec14610549578063c0759d0d14610568578063d044a1ed14610591578063d0def521146105cb5761028a565b8063a2309ff811610120578063a2309ff8146104e5578063a3f4df7e146104ed578063aa5c3ab4146104f5578063ac513fb814610444578063adc2fc75146104fc578063afb9128e146105045761028a565b80635ce4193b1461049c5780637b0a47ee146104a457806382bfefc8146104ac5780638da5cb5b146104b457806395d89b41146104c55761028a565b806333d84ec0116102005780634f9c1c09116101b95780634f9c1c091461041f57806353bed7c31461042d57806354fd4d50146104355780635ab1bd53146104445780635b1cfdbd1461045e5780635c3d18ea146104895761028a565b806333d84ec01461036557806338013f02146103785780633e1e56381461038057806343ee8213146103c157806349e19c8c146103c95780634f558e79146103f35761028a565b8063125fdbbc11610252578063125fdbbc146102f4578063178156ca146102fc5780631a12cd47146103285780631a3480b5146103435780631b08829c1461034a57806325425a911461035d5761028a565b8063059f8b161461028f57806306433b1b146102aa57806306fdde03146102c45780630d40ffc7146102d95780630dd4d811146102e1575b600080fd5b610297610658565b6040519081526020015b60405180910390f35b6102b2600381565b60405160ff90911681526020016102a1565b6102cc610667565b6040516102a19190610e58565b610297610687565b6102976102ef366004610d2e565b61069c565b6102b2600a81565b61030f61030a366004610c95565b6106d1565b6040516001600160d81b031990911681526020016102a1565b610330601281565b60405160009190910b81526020016102a1565b6012610297565b60015b60405190151581526020016102a1565b6102b2601581565b610297610373366004610e15565b6106dc565b6102b2601681565b6103bf61038e366004610d60565b6001600160d81b031990921660009081526007602090815260408083206001600160a01b0390941683529290522055565b005b6102b2600281565b6103bf6103d7366004610e2f565b6001600160601b03909116600090815260056020526040902055565b61034d610401366004610c95565b6001600160601b031660009081526004602052604090205460ff1690565b61034d610401366004610e15565b6102b2602881565b604051600181526020016102a1565b305b6040516001600160a01b0390911681526020016102a1565b61047161046c366004610cce565b610865565b6040516001600160601b0390911681526020016102a1565b6103bf610497366004610cad565b6108f3565b6102b2601781565b600654610297565b6102b2600481565b6008546001600160a01b0316610446565b6040805180820190915260048152632224a82960e11b60208201526102cc565b600e54610297565b6102cc61090c565b6000610297565b6102b2600081565b610471610512366004610cad565b60009182526003602090815260408084209284529190529020546001600160601b031690565b600f546001600160a01b0316610446565b60408051600080825260208201526001918101919091526060016102a1565b610471610576366004610c95565b6000908152600160205260409020546001600160601b031690565b61029761059f366004610d9b565b6001600160d81b0319821660009081526020818152604080832060ff8516845290915290205492915050565b6102976105d9366004610c49565b610928565b6102b2601481565b6104716105f4366004610cad565b60009182526002602090815260408084209284529190529020546001600160601b031690565b6102b2601e81565b6102cc604051806040016040528060048152602001632224a82960e11b81525081565b610297610653366004610dd1565b610967565b6106646012600a610f69565b81565b606060405180606001604052806030815260200161110460309139905090565b600061069761014d60021961097a565b905090565b6001600160d81b0319821660009081526007602090815260408083206001600160a01b03851684529091529020545b92915050565b60d881901b5b919050565b6001600160601b038116600090815260056020908152604080832054600a5460d81b6001600160d81b0319168452600783528184206010546001600160a01b031680865290845282852054835163313ce56760e01b8152935192949093869363313ce56792600480840193919291829003018186803b15801561075e57600080fd5b505afa158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610df9565b90506000600f60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e857600080fd5b505afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190610df9565b9050600083610838866108338587611069565b61097a565b610842919061104a565b90506108506012600a610f69565b61085a9082610f03565b979650505050505050565b6000610871868661099c565b600a54604080516001600160601b038416815260d89290921b6001600160d81b0319166020830152602890820152606081018890526080810187905260a081018690523360c08201529091507fdb4150958a3752b909c33b3c176ca2cd153a25c70b496347d7f110be32eb47f09060e00160405180910390a195945050505050565b6108fc82610a07565b506109078282610a5a565b505050565b6040518060600160405280603081526020016111046030913981565b6000610932610ac5565b6000818152600460205260408120805460ff19166001179055600e80549293509061095c836110aa565b919050555092915050565b6000610973838361097a565b9392505050565b6000610987826012610eab565b61099290600a610f78565b610973908461104a565b60008281526003602090815260408083208484529091529020546001600160601b0316806106cb576109ce6028610b16565b60009384526003602090815260408086209486529390529190922080546001600160601b0319166001600160601b038316179055919050565b6000818152600160205260409020546001600160601b0316806106d757610a2e6014610b16565b60009283526001602052604090922080546001600160601b0319166001600160601b0384161790555090565b60008281526002602090815260408083208484529091529020546001600160601b0316806106cb57610a8c6017610b16565b60009384526002602090815260408086209486529390529190922080546001600160601b0319166001600160601b038316179055919050565b6000600b54600954600c54600d54610add919061104a565b610ae79190610eeb565b610af290606461104a565b610afc9190610eeb565b600d80549192506000610b0e836110aa565b919050555090565b6000610b313060405180602001604052806000815250610928565b600a5460d81b6001600160d81b03191660009081526020818152604080832060ff8716845290915281208054929350600192909190610b71908490610eeb565b909155509092915050565b80356001600160a01b03811681146106d757600080fd5b80356001600160d81b0319811681146106d757600080fd5b600082601f830112610bbb578081fd5b813567ffffffffffffffff80821115610bd657610bd66110db565b604051601f8301601f19908116603f01168101908282118183101715610bfe57610bfe6110db565b81604052838152866020858801011115610c16578485fd5b8360208701602083013792830160200193909352509392505050565b80356001600160601b03811681146106d757600080fd5b60008060408385031215610c5b578182fd5b610c6483610b7c565b9150602083013567ffffffffffffffff811115610c7f578182fd5b610c8b85828601610bab565b9150509250929050565b600060208284031215610ca6578081fd5b5035919050565b60008060408385031215610cbf578182fd5b50508035926020909101359150565b600080600080600060a08688031215610ce5578081fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115610d10578182fd5b610d1c88828901610bab565b95989497509295608001359392505050565b60008060408385031215610d40578182fd5b610d4983610b93565b9150610d5760208401610b7c565b90509250929050565b600080600060608486031215610d74578283fd5b610d7d84610b93565b9250610d8b60208501610b7c565b9150604084013590509250925092565b60008060408385031215610dad578182fd5b610db683610b93565b91506020830135610dc6816110f1565b809150509250929050565b60008060408385031215610de3578182fd5b82359150602083013580820b8114610dc6578182fd5b600060208284031215610e0a578081fd5b8151610973816110f1565b600060208284031215610e26578081fd5b61097382610c32565b60008060408385031215610e41578182fd5b610e4a83610c32565b946020939093013593505050565b6000602080835283518082850152825b81811015610e8457858101830151858201604001528201610e68565b81811115610e955783604083870101525b50601f01601f1916929092016040019392505050565b600081810b83820b82821282607f03821381151615610ecc57610ecc6110c5565b82607f19038212811615610ee257610ee26110c5565b50019392505050565b60008219821115610efe57610efe6110c5565b500190565b600082610f1e57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611610f355750610f60565b818704821115610f4757610f476110c5565b80861615610f5457918102915b9490941c938002610f26565b94509492505050565b60006109736000198484610f86565b600061097360001960ff8516845b600082610f9557506001610973565b81610fa257506000610973565b8160018114610fb85760028114610fc257610fef565b6001915050610973565b60ff841115610fd357610fd36110c5565b6001841b915084821115610fe957610fe96110c5565b50610973565b5060208310610133831016604e8410600b8410161715611022575081810a8381111561101d5761101d6110c5565b610973565b61102f8484846001610f23565b808604821115611041576110416110c5565b02949350505050565b6000816000190483118215151615611064576110646110c5565b500290565b600081810b83820b8281128015607f1983018412161561108b5761108b6110c5565b81607f0183138116156110a0576110a06110c5565b5090039392505050565b60006000198214156110be576110be6110c5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60ff8116811461110057600080fd5b5056fe44657a656e7472616c697a656420496e737572616e63652050726f746f636f6c20526567697374727920284d4f434b29a2646970667358221220ecf90b8165696e9e01dd10596e1f8aaf8c10393336f215745960822d3f7f684264736f6c63430008020033";

type MockRegistryStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRegistryStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRegistryStaking__factory extends ContractFactory {
  constructor(...args: MockRegistryStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dipAddress: PromiseOrValue<string>,
    usdtAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRegistryStaking> {
    return super.deploy(
      dipAddress,
      usdtAddress,
      overrides || {}
    ) as Promise<MockRegistryStaking>;
  }
  override getDeployTransaction(
    dipAddress: PromiseOrValue<string>,
    usdtAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(dipAddress, usdtAddress, overrides || {});
  }
  override attach(address: string): MockRegistryStaking {
    return super.attach(address) as MockRegistryStaking;
  }
  override connect(signer: Signer): MockRegistryStaking__factory {
    return super.connect(signer) as MockRegistryStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRegistryStakingInterface {
    return new utils.Interface(_abi) as MockRegistryStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRegistryStaking {
    return new Contract(address, _abi, signerOrProvider) as MockRegistryStaking;
  }
}
