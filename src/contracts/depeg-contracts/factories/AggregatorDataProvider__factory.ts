/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AggregatorDataProvider,
  AggregatorDataProviderInterface,
} from "../AggregatorDataProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deviationLevel",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "heartbeatSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "heartbeatMarginSeconds",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "testDescription",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "testDecimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "testVersion",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GANACHE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAINNET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deviation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainlinkAggregatorAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "heartbeat",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "heartbeatMargin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price2",
        type: "uint256",
      },
    ],
    name: "isExceedingDeviation",
    outputs: [
      {
        internalType: "bool",
        name: "isExceeding",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "time2",
        type: "uint256",
      },
    ],
    name: "isExceedingHeartbeat",
    outputs: [
      {
        internalType: "bool",
        name: "isExceeding",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    name: "setRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e8638038062000e8683398101604081905262000034916200017a565b60014614156200005f57600080546001600160a01b0319166001600160a01b038916179055620000a7565b610539461415620000a757600080546001600160a01b03191630179055825162000091906004906020860190620000bd565b506005805460ff191660ff841617905560068190555b5050506001929092556002556003555062000300565b828054620000cb90620002ad565b90600052602060002090601f016020900481019282620000ef57600085556200013a565b82601f106200010a57805160ff19168380011785556200013a565b828001600101855582156200013a579182015b828111156200013a5782518255916020019190600101906200011d565b50620001489291506200014c565b5090565b5b808211156200014857600081556001016200014d565b805160ff811681146200017557600080fd5b919050565b600080600080600080600060e0888a03121562000195578283fd5b87516001600160a01b0381168114620001ac578384fd5b60208981015160408b015160608c015160808d0151949b5091995097509550906001600160401b0380821115620001e1578586fd5b818b0191508b601f830112620001f5578586fd5b8151818111156200020a576200020a620002ea565b604051601f8201601f19908116603f01168101908382118183101715620002355762000235620002ea565b816040528281528e868487010111156200024d578889fd5b8893505b8284101562000270578484018601518185018701529285019262000251565b828411156200028157888684830101525b8098505050505050506200029860a0890162000163565b915060c0880151905092959891949750929550565b600281046001821680620002c257607f821691505b60208210811415620002e457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610b7680620003106000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637284e4161161008c5780639a6fc8f5116100665780639a6fc8f51461019a578063b2c5aba2146101e1578063c45defed146101f4578063feaf968c1461020f576100ea565b80637284e416146101595780638746ea6c1461016e5780639290124c14610177576100ea565b80633defb962116100c85780633defb96214610139578063510547f91461014157806354fd4d5014610149578063639097a114610151576100ea565b8063128e0776146100ef5780631c12940a1461010a578063313ce5671461011f575b600080fd5b6100f7610217565b6040519081526020015b60405180910390f35b61011d610118366004610970565b61021e565b005b61012761033f565b60405160ff9091168152602001610101565b6002546100f7565b6100f7600181565b6100f76103df565b6001546100f7565b610161610475565b6040516101019190610a2f565b6100f761053981565b61018a61018536600461092c565b61058c565b6040519015158152602001610101565b6101ad6101a836600461094d565b6105f4565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a001610101565b61018a6101ef36600461092c565b610782565b6000546040516001600160a01b039091168152602001610101565b6101ad6107a5565b6003545b90565b61053946146102675760405162461bcd60e51b8152602060048201526011602482015270434841494e5f4e4f545f47414e4143484560781b604482015260640160405180910390fd5b60088054600181810190925560038082047ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160501b03998a16600a94849006949094026101000a848102908b02199091161790556040805160a0810182528381526020818101998a5281830198895260608201978852958a16608082019081526000948552600790965292209151825490891669ffffffffffffffffffff19918216178355965192820192909255935160028501559151918301919091555160049091018054919093169116179055565b600060014614156103d55760008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610a0e565b905061021b565b5060055460ff1690565b6000600146141561046e5760008054906101000a90046001600160a01b03166001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561043657600080fd5b505afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610914565b5060065490565b606060014614156104fc576000805460408051633942720b60e11b815290516001600160a01b0390921692637284e41692600480840193829003018186803b1580156104c057600080fd5b505afa1580156104d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ce919081019061086b565b6004805461050990610ac1565b80601f016020809104026020016040519081016040528092919081815260200182805461053590610ac1565b80156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b5050505050905090565b60008183106105c2576003546002546105a59190610a62565b6105af8385610a7a565b11156105bd575060016105ee565b6105ea565b6003546002546105d29190610a62565b6105dc8484610a7a565b11156105ea575060016105ee565b5060005b92915050565b6000806000806000600146141561069857600054604051639a6fc8f560e01b81526001600160501b03881660048201526001600160a01b0390911690639a6fc8f59060240160a06040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068991906109c5565b94509450945094509450610779565b6001600160501b038681161480156106b1575060085415155b1561071057600880546106c690600190610a7a565b815481106106e457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b031695505b505050506001600160501b03828116600090815260076020908152604091829020825160a0810184528154851680825260018301549382018490526002830154948201859052600383015460608301819052600490930154909516608090910181905293945090925b91939590929450565b6000818310610798576001546105af8385610a7a565b6001546105dc8484610a7a565b600080600080600060014614156108495760008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a91906109c5565b94509450945094509450610864565b6108596001600160501b036105f4565b945094509450945094505b9091929394565b60006020828403121561087c578081fd5b815167ffffffffffffffff80821115610893578283fd5b818401915084601f8301126108a6578283fd5b8151818111156108b8576108b8610b12565b604051601f8201601f19908116603f011681019083821181831017156108e0576108e0610b12565b816040528281528760208487010111156108f8578586fd5b610909836020830160208801610a91565b979650505050505050565b600060208284031215610925578081fd5b5051919050565b6000806040838503121561093e578081fd5b50508035926020909101359150565b60006020828403121561095e578081fd5b813561096981610b28565b9392505050565b600080600080600060a08688031215610987578081fd5b853561099281610b28565b945060208601359350604086013592506060860135915060808601356109b781610b28565b809150509295509295909350565b600080600080600060a086880312156109dc578081fd5b85516109e781610b28565b8095505060208601519350604086015192506060860151915060808601516109b781610b28565b600060208284031215610a1f578081fd5b815160ff81168114610969578182fd5b6000602082528251806020840152610a4e816040850160208701610a91565b601f01601f19169190910160400192915050565b60008219821115610a7557610a75610afc565b500190565b600082821015610a8c57610a8c610afc565b500390565b60005b83811015610aac578181015183820152602001610a94565b83811115610abb576000848401525b50505050565b600281046001821680610ad557607f821691505b60208210811415610af657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160501b0381168114610b3d57600080fd5b5056fea264697066735822122006e088baaad65ccbbac969127544e4e12bd6055251a7d7d237f9d308cc11129464736f6c63430008020033";

type AggregatorDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorDataProvider__factory extends ContractFactory {
  constructor(...args: AggregatorDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    aggregatorAddress: PromiseOrValue<string>,
    deviationLevel: PromiseOrValue<BigNumberish>,
    heartbeatSeconds: PromiseOrValue<BigNumberish>,
    heartbeatMarginSeconds: PromiseOrValue<BigNumberish>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AggregatorDataProvider> {
    return super.deploy(
      aggregatorAddress,
      deviationLevel,
      heartbeatSeconds,
      heartbeatMarginSeconds,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    ) as Promise<AggregatorDataProvider>;
  }
  override getDeployTransaction(
    aggregatorAddress: PromiseOrValue<string>,
    deviationLevel: PromiseOrValue<BigNumberish>,
    heartbeatSeconds: PromiseOrValue<BigNumberish>,
    heartbeatMarginSeconds: PromiseOrValue<BigNumberish>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      aggregatorAddress,
      deviationLevel,
      heartbeatSeconds,
      heartbeatMarginSeconds,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    );
  }
  override attach(address: string): AggregatorDataProvider {
    return super.attach(address) as AggregatorDataProvider;
  }
  override connect(signer: Signer): AggregatorDataProvider__factory {
    return super.connect(signer) as AggregatorDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorDataProviderInterface {
    return new utils.Interface(_abi) as AggregatorDataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorDataProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AggregatorDataProvider;
  }
}
