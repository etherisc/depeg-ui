/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AggregatorDataProvider,
  AggregatorDataProviderInterface,
} from "../AggregatorDataProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "testDescription",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "testDecimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "testVersion",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GANACHE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAINNET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainlinkAggregatorAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    name: "setRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ce038038062000ce083398101604081905262000034916200016e565b60014614156200005f57600080546001600160a01b0319166001600160a01b038616179055620000a7565b610539461415620000a757600080546001600160a01b03191630179055825162000091906001906020860190620000b1565b506002805460ff191660ff841617905560038190555b50505050620002d4565b828054620000bf9062000281565b90600052602060002090601f016020900481019282620000e357600085556200012e565b82601f10620000fe57805160ff19168380011785556200012e565b828001600101855582156200012e579182015b828111156200012e57825182559160200191906001019062000111565b506200013c92915062000140565b5090565b5b808211156200013c576000815560010162000141565b805160ff811681146200016957600080fd5b919050565b6000806000806080858703121562000184578384fd5b84516001600160a01b03811681146200019b578485fd5b602086810151919550906001600160401b0380821115620001ba578586fd5b818801915088601f830112620001ce578586fd5b815181811115620001e357620001e3620002be565b604051601f8201601f19908116603f011681019083821181831017156200020e576200020e620002be565b816040528281528b8684870101111562000226578889fd5b8893505b828410156200024957848401860151818501870152928501926200022a565b828411156200025a57888684830101525b809850505050505050620002716040860162000157565b6060959095015193969295505050565b6002810460018216806200029657607f821691505b60208210811415620002b857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6109fc80620002e46000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637284e416116100665780637284e416146100ea5780638746ea6c146100ff5780639a6fc8f514610108578063c45defed1461014f578063feaf968c1461016a57610093565b80631c12940a14610098578063313ce567146100ad578063510547f9146100cc57806354fd4d50146100e2575b600080fd5b6100ab6100a6366004610818565b610172565b005b6100b5610294565b60405160ff90911681526020015b60405180910390f35b6100d4600181565b6040519081526020016100c3565b6100d4610335565b6100f26103cb565b6040516100c391906108d7565b6100d461053981565b61011b6101163660046107f5565b6104e2565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100c3565b6000546040516001600160a01b0390911681526020016100c3565b61011b61066e565b61053946146101bb5760405162461bcd60e51b8152602060048201526011602482015270434841494e5f4e4f545f47414e4143484560781b604482015260640160405180910390fd5b60058054600181810190925560038082047f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160501b03998a16600a94849006949094026101000a848102908b02199091161790556040805160a0810182528381526020818101998a5281830198895260608201978852958a166080820190815260009485526004968790529190932092518354908a1669ffffffffffffffffffff1991821617845597519383019390935594516002820155925193830193909355915191018054919093169116179055565b6000600146141561032a5760008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102eb57600080fd5b505afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032391906108b6565b9050610332565b5060025460ff165b90565b600060014614156103c45760008054906101000a90046001600160a01b03166001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561038c57600080fd5b505afa1580156103a0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032391906107dd565b5060035490565b60606001461415610452576000805460408051633942720b60e11b815290516001600160a01b0390921692637284e41692600480840193829003018186803b15801561041657600080fd5b505afa15801561042a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103239190810190610734565b6001805461045f9061095d565b80601f016020809104026020016040519081016040528092919081815260200182805461048b9061095d565b80156104d85780601f106104ad576101008083540402835291602001916104d8565b820191906000526020600020905b8154815290600101906020018083116104bb57829003601f168201915b5050505050905090565b6000806000806000600146141561058657600054604051639a6fc8f560e01b81526001600160501b03881660048201526001600160a01b0390911690639a6fc8f59060240160a06040518083038186803b15801561053f57600080fd5b505afa158015610553573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610577919061086d565b94509450945094509450610665565b6001600160501b0386811614801561059f575060055415155b156105fe57600580546105b49060019061090a565b815481106105d257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b031695505b505050506001600160501b03828116600090815260046020818152604092839020835160a081018552815486168082526001830154938201849052600283015495820186905260038301546060830181905292909401549095166080909501859052919450925b91939590929450565b600080600080600060014614156107125760008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610703919061086d565b9450945094509450945061072d565b6107226001600160501b036104e2565b945094509450945094505b9091929394565b600060208284031215610745578081fd5b815167ffffffffffffffff8082111561075c578283fd5b818401915084601f83011261076f578283fd5b81518181111561078157610781610998565b604051601f8201601f19908116603f011681019083821181831017156107a9576107a9610998565b816040528281528760208487010111156107c1578586fd5b6107d283602083016020880161092d565b979650505050505050565b6000602082840312156107ee578081fd5b5051919050565b600060208284031215610806578081fd5b8135610811816109ae565b9392505050565b600080600080600060a0868803121561082f578081fd5b853561083a816109ae565b9450602086013593506040860135925060608601359150608086013561085f816109ae565b809150509295509295909350565b600080600080600060a08688031215610884578081fd5b855161088f816109ae565b80955050602086015193506040860151925060608601519150608086015161085f816109ae565b6000602082840312156108c7578081fd5b815160ff81168114610811578182fd5b60006020825282518060208401526108f681604085016020870161092d565b601f01601f19169190910160400192915050565b60008282101561092857634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015610948578181015183820152602001610930565b83811115610957576000848401525b50505050565b60028104600182168061097157607f821691505b6020821081141561099257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160501b03811681146109c357600080fd5b5056fea26469706673582212206f6720808294615f5636a7bf42db3a93ee63a06f896050d27e8605aa1c40c8c364736f6c63430008020033";

type AggregatorDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorDataProvider__factory extends ContractFactory {
  constructor(...args: AggregatorDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    aggregatorAddress: PromiseOrValue<string>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AggregatorDataProvider> {
    return super.deploy(
      aggregatorAddress,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    ) as Promise<AggregatorDataProvider>;
  }
  override getDeployTransaction(
    aggregatorAddress: PromiseOrValue<string>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      aggregatorAddress,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    );
  }
  override attach(address: string): AggregatorDataProvider {
    return super.attach(address) as AggregatorDataProvider;
  }
  override connect(signer: Signer): AggregatorDataProvider__factory {
    return super.connect(signer) as AggregatorDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorDataProviderInterface {
    return new utils.Interface(_abi) as AggregatorDataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorDataProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AggregatorDataProvider;
  }
}
