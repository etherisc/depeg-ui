/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AggregatorDataProvider,
  AggregatorDataProviderInterface,
} from "../AggregatorDataProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deviationLevel",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "heartbeatSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "heartbeatMarginSeconds",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "testDescription",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "testDecimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "testVersion",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "current",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
    ],
    name: "AnswerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "startedBy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
    ],
    name: "NewRound",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "GANACHE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GANACHE2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAINNET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MUMBAI",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
    ],
    name: "addRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deviation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainlinkAggregatorAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "heartbeat",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "heartbeatMargin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price2",
        type: "uint256",
      },
    ],
    name: "isExceedingDeviation",
    outputs: [
      {
        internalType: "bool",
        name: "isExceeding",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "time2",
        type: "uint256",
      },
    ],
    name: "isExceedingHeartbeat",
    outputs: [
      {
        internalType: "bool",
        name: "isExceeding",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isMainnet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isTestnet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    name: "setRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015573803806200155783398101604081905262000034916200026e565b6200003f336200013a565b60014614156200006a57600180546001600160a01b0319166001600160a01b038916179055620000e8565b620000746200018a565b156200009257600180546001600160a01b03191630179055620000e8565b60405162461bcd60e51b815260206004820152602160248201527f4552524f523a4144502d3031303a434841494e5f4e4f545f535550504f5254456044820152601560fa1b606482015260840160405180910390fd5b8251620000fd906005906020860190620001b1565b506006805460ff191660ff93909316929092179091556007555060029290925560035560045550600a80546001600160501b0319169055620003f4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006105394614806200019e57506104d246145b80620001ac57506201388146145b905090565b828054620001bf90620003a1565b90600052602060002090601f016020900481019282620001e357600085556200022e565b82601f10620001fe57805160ff19168380011785556200022e565b828001600101855582156200022e579182015b828111156200022e57825182559160200191906001019062000211565b506200023c92915062000240565b5090565b5b808211156200023c576000815560010162000241565b805160ff811681146200026957600080fd5b919050565b600080600080600080600060e0888a03121562000289578283fd5b87516001600160a01b0381168114620002a0578384fd5b60208981015160408b015160608c015160808d0151949b5091995097509550906001600160401b0380821115620002d5578586fd5b818b0191508b601f830112620002e9578586fd5b815181811115620002fe57620002fe620003de565b604051601f8201601f19908116603f01168101908382118183101715620003295762000329620003de565b816040528281528e8684870101111562000341578889fd5b8893505b8284101562000364578484018601518185018701529285019262000345565b828411156200037557888684830101525b8098505050505050506200038c60a0890162000257565b915060c0880151905092959891949750929550565b600281046001821680620003b657607f821691505b60208210811415620003d857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61115380620004046000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638205bf6a116100f95780639a6fc8f511610097578063b633620c11610071578063b633620c1461033e578063c45defed14610351578063f2fde38b14610362578063feaf968c14610375576101a9565b80639a6fc8f5146102d1578063b2c5aba214610318578063b5ab58dc1461032b576101a9565b806389c80d2f116100d357806389c80d2f146102875780638da5cb5b1461029157806392108c86146102b65780639290124c146102be576101a9565b80638205bf6a1461026357806383c6d7221461026b5780638746ea6c1461027e576101a9565b806350d25bcd11610166578063639097a111610140578063639097a114610236578063668a0f021461023e578063715018a6146102465780637284e4161461024e576101a9565b806350d25bcd1461021e578063510547f91461022657806354fd4d501461022e576101a9565b80630f937d17146101ae578063128e0776146101ca5780631c12940a146101d2578063313ce567146101e75780633defb9621461020157806342faac0514610209575b600080fd5b6101b76104d281565b6040519081526020015b60405180910390f35b6101b761037d565b6101e56101e0366004610f29565b610384565b005b6101ef6104f3565b60405160ff90911681526020016101c1565b6003546101b7565b600146145b60405190151581526020016101c1565b6101b7610595565b6101b7600181565b6101b7610648565b6002546101b7565b6101b76106a8565b6101e5610711565b610256610725565b6040516101c19190610fe8565b6101b761084a565b6101e5610279366004610e19565b6108c5565b6101b761053981565b6101b76201388181565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101c1565b61020e610914565b61020e6102cc366004610efb565b610939565b6102e46102df366004610f0d565b6109a1565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016101c1565b61020e610326366004610efb565b610ab5565b6101b7610339366004610ee3565b610ad8565b6101b761034c366004610ee3565b610b8a565b6001546001600160a01b031661029e565b6101e5610370366004610dd3565b610be5565b6102e4610c5e565b6004545b90565b61038c610d29565b610394610914565b6103e55760405162461bcd60e51b815260206004820152601c60248201527f4552524f523a4144502d3030313a4e4f545f544553545f434841494e0000000060448201526064015b60405180910390fd5b600a546001600160501b03908116908616111561041b57600a805469ffffffffffffffffffff19166001600160501b0387161790555b60098054600181810190925560038082047f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160501b03998a16600a94849006949094026101000a848102908b02199091161790556040805160a0810182528381526020818101998a5281830198895260608201978852958a16608082019081526000948552600890965292209151825490891669ffffffffffffffffffff19918216178355965192820192909255935160028501559151918301919091555160049091018054919093169116179055565b6000600146141561058b57600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190610fc7565b9050610381565b5060065460ff1690565b6000600146141561062657600160009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ee57600080fd5b505afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190610e01565b50600a546001600160501b031660009081526008602052604090206001015490565b600060014614156106a157600160009054906101000a90046001600160a01b03166001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ee57600080fd5b5060075490565b6000600146141561070157600160009054906101000a90046001600160a01b03166001600160a01b031663668a0f026040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ee57600080fd5b50600a546001600160501b031690565b610719610d29565b6107236000610d83565b565b606060014614156107ba57600160009054906101000a90046001600160a01b03166001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105849190810190610e3a565b600580546107c79061107a565b80601f01602080910402602001604051908101604052809291908181526020018280546107f39061107a565b80156108405780601f1061081557610100808354040283529160200191610840565b820191906000526020600020905b81548152906001019060200180831161082357829003601f168201915b5050505050905090565b600060014614156108a357600160009054906101000a90046001600160a01b03166001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ee57600080fd5b50600a546001600160501b031660009081526008602052604090206003015490565b600a80546001600160501b03169060006108de836110b5565b82546101009290920a6001600160501b03818102199093169183160217909155600a5461091092501683838083610384565b5050565b600061053946148061092757506104d246145b8061093457506201388146145b905090565b600081831061096f57600454600354610952919061101b565b61095c8385611033565b111561096a5750600161099b565b610997565b60045460035461097f919061101b565b6109898484611033565b11156109975750600161099b565b5060005b92915050565b6000808080806001461415610a4357600154604051639a6fc8f560e01b81526001600160501b03881660048201526001600160a01b0390911690639a6fc8f59060240160a06040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a349190610f7e565b94509450945094509450610aac565b505050506001600160501b03828116600090815260086020908152604091829020825160a0810184528154851680825260018301549382018490526002830154948201859052600383015460608301819052600490930154909516608090910181905293945090925b91939590929450565b6000818310610acb5760025461095c8385611033565b6002546109898484611033565b60006001461415610b6757600154604051632d6ad63760e21b8152600481018490526001600160a01b039091169063b5ab58dc906024015b60206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b609190610e01565b9050610b85565b506001600160501b0381166000908152600860205260409020600101545b919050565b60006001461415610bc657600154604051632d8cd88360e21b8152600481018490526001600160a01b039091169063b633620c90602401610b10565b506001600160501b031660009081526008602052604090206003015490565b610bed610d29565b6001600160a01b038116610c525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103dc565b610c5b81610d83565b50565b6000808080806001461415610d0257600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610cbb57600080fd5b505afa158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190610f7e565b94509450945094509450610d22565b600a54610d17906001600160501b03166109a1565b945094509450945094505b9091929394565b6000546001600160a01b031633146107235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103dc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610de4578081fd5b81356001600160a01b0381168114610dfa578182fd5b9392505050565b600060208284031215610e12578081fd5b5051919050565b60008060408385031215610e2b578081fd5b50508035926020909101359150565b600060208284031215610e4b578081fd5b815167ffffffffffffffff80821115610e62578283fd5b818401915084601f830112610e75578283fd5b815181811115610e8757610e876110f2565b604051601f8201601f19908116603f01168101908382118183101715610eaf57610eaf6110f2565b81604052828152876020848701011115610ec7578586fd5b610ed883602083016020880161104a565b979650505050505050565b600060208284031215610ef4578081fd5b5035919050565b60008060408385031215610e2b578182fd5b600060208284031215610f1e578081fd5b8135610dfa81611108565b600080600080600060a08688031215610f40578081fd5b8535610f4b81611108565b94506020860135935060408601359250606086013591506080860135610f7081611108565b809150509295509295909350565b600080600080600060a08688031215610f95578081fd5b8551610fa081611108565b809550506020860151935060408601519250606086015191506080860151610f7081611108565b600060208284031215610fd8578081fd5b815160ff81168114610dfa578182fd5b600060208252825180602084015261100781604085016020870161104a565b601f01601f19169190910160400192915050565b6000821982111561102e5761102e6110dc565b500190565b600082821015611045576110456110dc565b500390565b60005b8381101561106557818101518382015260200161104d565b83811115611074576000848401525b50505050565b60028104600182168061108e57607f821691505b602082108114156110af57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160501b03808316818114156110d2576110d26110dc565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160501b0381168114610c5b57600080fdfea264697066735822122066b3e3b9831348ea919bc618ff4d7bf4896cc0b6968166f28764fab699817bfc64736f6c63430008020033";

type AggregatorDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorDataProvider__factory extends ContractFactory {
  constructor(...args: AggregatorDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    aggregatorAddress: PromiseOrValue<string>,
    deviationLevel: PromiseOrValue<BigNumberish>,
    heartbeatSeconds: PromiseOrValue<BigNumberish>,
    heartbeatMarginSeconds: PromiseOrValue<BigNumberish>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AggregatorDataProvider> {
    return super.deploy(
      aggregatorAddress,
      deviationLevel,
      heartbeatSeconds,
      heartbeatMarginSeconds,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    ) as Promise<AggregatorDataProvider>;
  }
  override getDeployTransaction(
    aggregatorAddress: PromiseOrValue<string>,
    deviationLevel: PromiseOrValue<BigNumberish>,
    heartbeatSeconds: PromiseOrValue<BigNumberish>,
    heartbeatMarginSeconds: PromiseOrValue<BigNumberish>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      aggregatorAddress,
      deviationLevel,
      heartbeatSeconds,
      heartbeatMarginSeconds,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    );
  }
  override attach(address: string): AggregatorDataProvider {
    return super.attach(address) as AggregatorDataProvider;
  }
  override connect(signer: Signer): AggregatorDataProvider__factory {
    return super.connect(signer) as AggregatorDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorDataProviderInterface {
    return new utils.Interface(_abi) as AggregatorDataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorDataProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AggregatorDataProvider;
  }
}
