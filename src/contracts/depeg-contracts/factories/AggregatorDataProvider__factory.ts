/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AggregatorDataProvider,
  AggregatorDataProviderInterface,
} from "../AggregatorDataProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deviationLevel",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "heartbeatSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "heartbeatMarginSeconds",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "testDescription",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "testDecimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "testVersion",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "GANACHE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GANACHE2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAINNET",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MUMBAI",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deviation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainlinkAggregatorAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "heartbeat",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "heartbeatMargin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price2",
        type: "uint256",
      },
    ],
    name: "isExceedingDeviation",
    outputs: [
      {
        internalType: "bool",
        name: "isExceeding",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "time2",
        type: "uint256",
      },
    ],
    name: "isExceedingHeartbeat",
    outputs: [
      {
        internalType: "bool",
        name: "isExceeding",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isMainnet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isTestnet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    name: "setRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011b5380380620011b583398101604081905262000034916200025e565b6200003f336200012a565b60014614156200006a57600180546001600160a01b0319166001600160a01b038916179055620000e8565b620000746200017a565b156200009257600180546001600160a01b03191630179055620000e8565b60405162461bcd60e51b815260206004820152602160248201527f4552524f523a4144502d3031303a434841494e5f4e4f545f535550504f5254456044820152601560fa1b606482015260840160405180910390fd5b8251620000fd906005906020860190620001a1565b506006805460ff191660ff93909316929092179091556007555060029290925560035560045550620003e4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006105394614806200018e57506104d246145b806200019c57506201388146145b905090565b828054620001af9062000391565b90600052602060002090601f016020900481019282620001d357600085556200021e565b82601f10620001ee57805160ff19168380011785556200021e565b828001600101855582156200021e579182015b828111156200021e57825182559160200191906001019062000201565b506200022c92915062000230565b5090565b5b808211156200022c576000815560010162000231565b805160ff811681146200025957600080fd5b919050565b600080600080600080600060e0888a03121562000279578283fd5b87516001600160a01b038116811462000290578384fd5b60208981015160408b015160608c015160808d0151949b5091995097509550906001600160401b0380821115620002c5578586fd5b818b0191508b601f830112620002d9578586fd5b815181811115620002ee57620002ee620003ce565b604051601f8201601f19908116603f01168101908382118183101715620003195762000319620003ce565b816040528281528e8684870101111562000331578889fd5b8893505b8284101562000354578484018601518185018701529285019262000335565b828411156200036557888684830101525b8098505050505050506200037c60a0890162000247565b915060c0880151905092959891949750929550565b600281046001821680620003a657607f821691505b60208210811415620003c857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610dc180620003f46000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637284e416116100b85780639290124c1161007c5780639290124c146102215780639a6fc8f514610234578063b2c5aba21461027b578063c45defed1461028e578063f2fde38b1461029f578063feaf968c146102b257610137565b80637284e416146101cc5780638746ea6c146101e157806389c80d2f146101ea5780638da5cb5b146101f457806392108c861461021957610137565b806342faac05116100ff57806342faac0514610197578063510547f9146101ac57806354fd4d50146101b4578063639097a1146101bc578063715018a6146101c457610137565b80630f937d171461013c578063128e0776146101585780631c12940a14610160578063313ce567146101755780633defb9621461018f575b600080fd5b6101456104d281565b6040519081526020015b60405180910390f35b6101456102ba565b61017361016e366004610bbe565b6102c1565b005b61017d6103fa565b60405160ff909116815260200161014f565b600354610145565b600146145b604051901515815260200161014f565b610145600181565b61014561049c565b600254610145565b610173610534565b6101d4610548565b60405161014f9190610c7d565b61014561053981565b6101456201388181565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161014f565b61019c61066d565b61019c61022f366004610b81565b610692565b610247610242366004610ba2565b6106fa565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a00161014f565b61019c610289366004610b81565b610886565b6001546001600160a01b0316610201565b6101736102ad366004610a92565b6108a9565b610247610922565b6004545b90565b6102c96109e8565b6102d161066d565b6103225760405162461bcd60e51b815260206004820152601c60248201527f4552524f523a4144502d3030313a4e4f545f544553545f434841494e0000000060448201526064015b60405180910390fd5b60098054600181810190925560038082047f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160501b03998a16600a94849006949094026101000a848102908b02199091161790556040805160a0810182528381526020818101998a5281830198895260608201978852958a16608082019081526000948552600890965292209151825490891669ffffffffffffffffffff19918216178355965192820192909255935160028501559151918301919091555160049091018054919093169116179055565b6000600146141561049257600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190610c5c565b90506102be565b5060065460ff1690565b6000600146141561052d57600160009054906101000a90046001600160a01b03166001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f557600080fd5b505afa158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190610b69565b5060075490565b61053c6109e8565b6105466000610a42565b565b606060014614156105dd57600160009054906101000a90046001600160a01b03166001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048b9190810190610ac0565b600580546105ea90610d0f565b80601f016020809104026020016040519081016040528092919081815260200182805461061690610d0f565b80156106635780601f1061063857610100808354040283529160200191610663565b820191906000526020600020905b81548152906001019060200180831161064657829003601f168201915b5050505050905090565b600061053946148061068057506104d246145b8061068d57506201388146145b905090565b60008183106106c8576004546003546106ab9190610cb0565b6106b58385610cc8565b11156106c3575060016106f4565b6106f0565b6004546003546106d89190610cb0565b6106e28484610cc8565b11156106f0575060016106f4565b5060005b92915050565b600080808080600146141561079c57600154604051639a6fc8f560e01b81526001600160501b03881660048201526001600160a01b0390911690639a6fc8f59060240160a06040518083038186803b15801561075557600080fd5b505afa158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190610c13565b9450945094509450945061087d565b6001600160501b038681161480156107b5575060095415155b1561081457600980546107ca90600190610cc8565b815481106107e857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b031695505b505050506001600160501b03828116600090815260086020908152604091829020825160a0810184528154851680825260018301549382018490526002830154948201859052600383015460608301819052600490930154909516608090910181905293945090925b91939590929450565b600081831061089c576002546106b58385610cc8565b6002546106e28484610cc8565b6108b16109e8565b6001600160a01b0381166109165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610319565b61091f81610a42565b50565b60008080808060014614156109c657600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097f57600080fd5b505afa158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190610c13565b945094509450945094506109e1565b6109d66001600160501b036106fa565b945094509450945094505b9091929394565b6000546001600160a01b031633146105465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610319565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610aa3578081fd5b81356001600160a01b0381168114610ab9578182fd5b9392505050565b600060208284031215610ad1578081fd5b815167ffffffffffffffff80821115610ae8578283fd5b818401915084601f830112610afb578283fd5b815181811115610b0d57610b0d610d60565b604051601f8201601f19908116603f01168101908382118183101715610b3557610b35610d60565b81604052828152876020848701011115610b4d578586fd5b610b5e836020830160208801610cdf565b979650505050505050565b600060208284031215610b7a578081fd5b5051919050565b60008060408385031215610b93578081fd5b50508035926020909101359150565b600060208284031215610bb3578081fd5b8135610ab981610d76565b600080600080600060a08688031215610bd5578081fd5b8535610be081610d76565b94506020860135935060408601359250606086013591506080860135610c0581610d76565b809150509295509295909350565b600080600080600060a08688031215610c2a578081fd5b8551610c3581610d76565b809550506020860151935060408601519250606086015191506080860151610c0581610d76565b600060208284031215610c6d578081fd5b815160ff81168114610ab9578182fd5b6000602082528251806020840152610c9c816040850160208701610cdf565b601f01601f19169190910160400192915050565b60008219821115610cc357610cc3610d4a565b500190565b600082821015610cda57610cda610d4a565b500390565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b50505050565b600281046001821680610d2357607f821691505b60208210811415610d4457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160501b038116811461091f57600080fdfea2646970667358221220481aa5408a70c889bf9399f2f90d1460db50142897ff218c3db84f812e415c3e64736f6c63430008020033";

type AggregatorDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorDataProvider__factory extends ContractFactory {
  constructor(...args: AggregatorDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    aggregatorAddress: PromiseOrValue<string>,
    deviationLevel: PromiseOrValue<BigNumberish>,
    heartbeatSeconds: PromiseOrValue<BigNumberish>,
    heartbeatMarginSeconds: PromiseOrValue<BigNumberish>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AggregatorDataProvider> {
    return super.deploy(
      aggregatorAddress,
      deviationLevel,
      heartbeatSeconds,
      heartbeatMarginSeconds,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    ) as Promise<AggregatorDataProvider>;
  }
  override getDeployTransaction(
    aggregatorAddress: PromiseOrValue<string>,
    deviationLevel: PromiseOrValue<BigNumberish>,
    heartbeatSeconds: PromiseOrValue<BigNumberish>,
    heartbeatMarginSeconds: PromiseOrValue<BigNumberish>,
    testDescription: PromiseOrValue<string>,
    testDecimals: PromiseOrValue<BigNumberish>,
    testVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      aggregatorAddress,
      deviationLevel,
      heartbeatSeconds,
      heartbeatMarginSeconds,
      testDescription,
      testDecimals,
      testVersion,
      overrides || {}
    );
  }
  override attach(address: string): AggregatorDataProvider {
    return super.attach(address) as AggregatorDataProvider;
  }
  override connect(signer: Signer): AggregatorDataProvider__factory {
    return super.connect(signer) as AggregatorDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorDataProviderInterface {
    return new utils.Interface(_abi) as AggregatorDataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorDataProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AggregatorDataProvider;
  }
}
