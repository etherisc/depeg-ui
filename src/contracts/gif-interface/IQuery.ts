/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IQueryInterface extends utils.Interface {
  functions: {
    "cancel(uint256)": FunctionFragment;
    "request(bytes32,bytes,string,address,uint256)": FunctionFragment;
    "respond(uint256,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "cancel" | "request" | "respond"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "respond",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "respond", data: BytesLike): Result;

  events: {
    "LogOracleCanceled(uint256)": EventFragment;
    "LogOracleRequested(bytes32,uint256,uint256)": EventFragment;
    "LogOracleResponded(bytes32,uint256,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogOracleCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOracleRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOracleResponded"): EventFragment;
}

export interface LogOracleCanceledEventObject {
  requestId: BigNumber;
}
export type LogOracleCanceledEvent = TypedEvent<
  [BigNumber],
  LogOracleCanceledEventObject
>;

export type LogOracleCanceledEventFilter =
  TypedEventFilter<LogOracleCanceledEvent>;

export interface LogOracleRequestedEventObject {
  processId: string;
  requestId: BigNumber;
  responsibleOracleId: BigNumber;
}
export type LogOracleRequestedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogOracleRequestedEventObject
>;

export type LogOracleRequestedEventFilter =
  TypedEventFilter<LogOracleRequestedEvent>;

export interface LogOracleRespondedEventObject {
  processId: string;
  requestId: BigNumber;
  responder: string;
  success: boolean;
}
export type LogOracleRespondedEvent = TypedEvent<
  [string, BigNumber, string, boolean],
  LogOracleRespondedEventObject
>;

export type LogOracleRespondedEventFilter =
  TypedEventFilter<LogOracleRespondedEvent>;

export interface IQuery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IQueryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    request(
      processId: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    respond(
      requestId: PromiseOrValue<BigNumberish>,
      responder: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancel(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  request(
    processId: PromiseOrValue<BytesLike>,
    input: PromiseOrValue<BytesLike>,
    callbackMethodName: PromiseOrValue<string>,
    callbackContractAddress: PromiseOrValue<string>,
    responsibleOracleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  respond(
    requestId: PromiseOrValue<BigNumberish>,
    responder: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    request(
      processId: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respond(
      requestId: PromiseOrValue<BigNumberish>,
      responder: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogOracleCanceled(uint256)"(
      requestId?: null
    ): LogOracleCanceledEventFilter;
    LogOracleCanceled(requestId?: null): LogOracleCanceledEventFilter;

    "LogOracleRequested(bytes32,uint256,uint256)"(
      processId?: null,
      requestId?: null,
      responsibleOracleId?: null
    ): LogOracleRequestedEventFilter;
    LogOracleRequested(
      processId?: null,
      requestId?: null,
      responsibleOracleId?: null
    ): LogOracleRequestedEventFilter;

    "LogOracleResponded(bytes32,uint256,address,bool)"(
      processId?: null,
      requestId?: null,
      responder?: null,
      success?: null
    ): LogOracleRespondedEventFilter;
    LogOracleResponded(
      processId?: null,
      requestId?: null,
      responder?: null,
      success?: null
    ): LogOracleRespondedEventFilter;
  };

  estimateGas: {
    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    request(
      processId: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    respond(
      requestId: PromiseOrValue<BigNumberish>,
      responder: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    request(
      processId: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      callbackMethodName: PromiseOrValue<string>,
      callbackContractAddress: PromiseOrValue<string>,
      responsibleOracleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    respond(
      requestId: PromiseOrValue<BigNumberish>,
      responder: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
