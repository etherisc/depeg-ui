/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockRegistry, MockRegistryInterface } from "../MockRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "contractName",
        type: "bytes32",
      },
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instanceService",
        type: "address",
      },
    ],
    name: "setInstanceServiceAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e16c7d981461003b578063e8f4ce0f1461006a575b600080fd5b61004e610049366004610122565b61009c565b6040516001600160a01b03909116815260200160405180910390f35b61009a61007836600461013b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b60006e496e7374616e63655365727669636560881b82146101115760405162461bcd60e51b815260206004820152602560248201527f4552524f523a4452472d3030313a434f4e54524143545f4e4f545f5245474953604482015264151154915160da1b606482015260840160405180910390fd5b50506000546001600160a01b031690565b60006020828403121561013457600080fd5b5035919050565b60006020828403121561014d57600080fd5b81356001600160a01b038116811461016457600080fd5b939250505056fea26469706673582212205df086cde12c4a15435cff31c2d00648e4b99ae90d7f701aaac55012add2db2e64736f6c63430008130033";

type MockRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRegistry__factory extends ContractFactory {
  constructor(...args: MockRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRegistry> {
    return super.deploy(overrides || {}) as Promise<MockRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRegistry {
    return super.attach(address) as MockRegistry;
  }
  override connect(signer: Signer): MockRegistry__factory {
    return super.connect(signer) as MockRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRegistryInterface {
    return new utils.Interface(_abi) as MockRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRegistry {
    return new Contract(address, _abi, signerOrProvider) as MockRegistry;
  }
}
