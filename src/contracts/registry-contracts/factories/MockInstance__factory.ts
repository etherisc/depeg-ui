/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockInstance, MockInstanceInterface } from "../MockInstance";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bundleId",
        type: "uint256",
      },
    ],
    name: "getBundle",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "riskpoolId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "enum IInstanceServiceFacade.BundleState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "filter",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "capital",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lockedCapital",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
        ],
        internalType: "struct IInstanceServiceFacade.Bundle",
        name: "bundle",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "componentId",
        type: "uint256",
      },
    ],
    name: "getComponentState",
    outputs: [
      {
        internalType: "enum IInstanceServiceFacade.ComponentState",
        name: "componentState",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "componentId",
        type: "uint256",
      },
    ],
    name: "getComponentToken",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "componentId",
        type: "uint256",
      },
    ],
    name: "getComponentType",
    outputs: [
      {
        internalType: "enum IInstanceServiceFacade.ComponentType",
        name: "componentType",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInstanceId",
    outputs: [
      {
        internalType: "bytes32",
        name: "instanceId",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInstanceOperator",
    outputs: [
      {
        internalType: "address",
        name: "instanceOperator",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegistry",
    outputs: [
      {
        internalType: "contract MockRegistry",
        name: "registry",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bundleId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "riskpoolId",
        type: "uint256",
      },
      {
        internalType: "enum IInstanceServiceFacade.BundleState",
        name: "state",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "capital",
        type: "uint256",
      },
    ],
    name: "setBundleInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "componentId",
        type: "uint256",
      },
      {
        internalType: "enum IInstanceServiceFacade.ComponentType",
        name: "t",
        type: "uint8",
      },
      {
        internalType: "enum IInstanceServiceFacade.ComponentState",
        name: "state",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "setComponentInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a336100b5565b60405161002690610105565b604051809103906000f080158015610042573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392909216918217905560405163e8f4ce0f60e01b815230600482015263e8f4ce0f90602401600060405180830381600087803b15801561009857600080fd5b505af11580156100ac573d6000803e3d6000fd5b50505050610112565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6101c180610b5e83390190565b610a3d806101216000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80635e966e451161008c5780638da5cb5b116100665780638da5cb5b14610140578063c8987a93146101b8578063dd51c86a146101cb578063f2fde38b146101eb57600080fd5b80635e966e4514610162578063616ea6261461019b578063715018a6146101b057600080fd5b8063038696bb146100d45780631551100f146101045780632d0821b71461011a5780633408e4701461013a57806339c6fa90146101405780635ab1bd5314610151575b600080fd5b6100e76100e23660046107a5565b6101fe565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c610296565b6040519081526020016100fb565b61012d6101283660046107a5565b6102ed565b6040516100fb919061082e565b4661010c565b6000546001600160a01b03166100e7565b6003546001600160a01b03166100e7565b61018e6101703660046107a5565b60009081526001602081905260409091200154610100900460ff1690565b6040516100fb91906108c5565b6101ae6101a93660046108fb565b6104a0565b005b6101ae610537565b6101ae6101c6366004610954565b61054b565b6101de6101d93660046107a5565b6105a9565b6040516100fb9190610997565b6101ae6101f93660046109ab565b61061e565b6000818152600160208190526040822001546201000090046001600160a01b03166102705760405162461bcd60e51b815260206004820152601f60248201527f4552524f523a4449532d3032303a434f4d504f4e454e545f554e4b4e4f574e0060448201526064015b60405180910390fd5b50600090815260016020819052604090912001546201000090046001600160a01b031690565b6003546040516000916102d29146916001600160a01b03169060200191825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905090565b6102f5610741565b60008281526002602052604090206008015461035f5760405162461bcd60e51b815260206004820152602360248201527f4552524f523a4449532d3033303a42554e444c455f444f45535f4e4f545f45586044820152621254d560ea1b6064820152608401610267565b60026000838152602001908152602001600020604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660038111156103c0576103c06107be565b60038111156103d1576103d16107be565b81526020016004820180546103e5906109cd565b80601f0160208091040260200160405190810160405280929190818152602001828054610411906109cd565b801561045e5780601f106104335761010080835404028352916020019161045e565b820191906000526020600020905b81548152906001019060200180831161044157829003601f168201915b50505050508152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b6104a8610697565b600084815260016020819052604090912085815580820180549192869260ff1916908360028111156104dc576104dc6107be565b021790555060018101805484919061ff001916610100836006811115610504576105046107be565b021790555060010180546001600160a01b03909216620100000262010000600160b01b0319909216919091179055505050565b61053f610697565b61054960006106f1565b565b610553610697565b60008481526002602052604090208481556001808201859055600380830180548693919260ff1990911691908490811115610590576105906107be565b0217905550600581019190915542600890910155505050565b6000818152600160205260408120546106045760405162461bcd60e51b815260206004820152601f60248201527f4552524f523a4449532d3031303a434f4d504f4e454e545f554e4b4e4f574e006044820152606401610267565b506000908152600160208190526040909120015460ff1690565b610626610697565b6001600160a01b03811661068b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610267565b610694816106f1565b50565b6000546001600160a01b031633146105495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610267565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610140016040528060008152602001600081526020016000815260200160006003811115610775576107756107be565b81526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156107b757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600481106107e4576107e46107be565b9052565b6000815180845260005b8181101561080e576020818501810151868301820152016107f2565b506000602082860101526020601f19601f83011685010191505092915050565b602081528151602082015260208201516040820152604082015160608201526000606083015161086160808401826107d4565b5060808301516101408060a085015261087e6101608501836107e8565b915060a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151838701525050508091505092915050565b60208101600783106108d9576108d96107be565b91905290565b80356001600160a01b03811681146108f657600080fd5b919050565b6000806000806080858703121561091157600080fd5b8435935060208501356003811061092757600080fd5b925060408501356007811061093b57600080fd5b9150610949606086016108df565b905092959194509250565b6000806000806080858703121561096a57600080fd5b843593506020850135925060408501356004811061098757600080fd5b9396929550929360600135925050565b60208101600383106108d9576108d96107be565b6000602082840312156109bd57600080fd5b6109c6826108df565b9392505050565b600181811c908216806109e157607f821691505b602082108103610a0157634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205666820ecca7da435567d160ca049334b3942b6033801ebc15629d7de0320e8f64736f6c63430008130033608060405234801561001057600080fd5b506101a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e16c7d981461003b578063e8f4ce0f1461006a575b600080fd5b61004e610049366004610122565b61009c565b6040516001600160a01b03909116815260200160405180910390f35b61009a61007836600461013b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b60006e496e7374616e63655365727669636560881b82146101115760405162461bcd60e51b815260206004820152602560248201527f4552524f523a4452472d3030313a434f4e54524143545f4e4f545f5245474953604482015264151154915160da1b606482015260840160405180910390fd5b50506000546001600160a01b031690565b60006020828403121561013457600080fd5b5035919050565b60006020828403121561014d57600080fd5b81356001600160a01b038116811461016457600080fd5b939250505056fea26469706673582212205df086cde12c4a15435cff31c2d00648e4b99ae90d7f701aaac55012add2db2e64736f6c63430008130033";

type MockInstanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockInstanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockInstance__factory extends ContractFactory {
  constructor(...args: MockInstanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockInstance> {
    return super.deploy(overrides || {}) as Promise<MockInstance>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockInstance {
    return super.attach(address) as MockInstance;
  }
  override connect(signer: Signer): MockInstance__factory {
    return super.connect(signer) as MockInstance__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockInstanceInterface {
    return new utils.Interface(_abi) as MockInstanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockInstance {
    return new Contract(address, _abi, signerOrProvider) as MockInstance;
  }
}
