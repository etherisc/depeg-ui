/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IVersionable {
  export type VersionInfoStruct = {
    version: PromiseOrValue<BigNumberish>;
    implementation: PromiseOrValue<string>;
    activatedBy: PromiseOrValue<string>;
    activatedIn: PromiseOrValue<BigNumberish>;
    activatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VersionInfoStructOutput = [
    number,
    string,
    string,
    number,
    number
  ] & {
    version: number;
    implementation: string;
    activatedBy: string;
    activatedIn: number;
    activatedAt: number;
  };
}

export interface IVersionableInterface extends utils.Interface {
  functions: {
    "activate(address,address)": FunctionFragment;
    "getVersion(uint256)": FunctionFragment;
    "getVersionInfo(uint48)": FunctionFragment;
    "isActivated(uint48)": FunctionFragment;
    "version()": FunctionFragment;
    "versionParts()": FunctionFragment;
    "versions()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activate"
      | "getVersion"
      | "getVersionInfo"
      | "isActivated"
      | "version"
      | "versionParts"
      | "versions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActivated",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "versionParts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "versions", values?: undefined): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVersionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionParts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versions", data: BytesLike): Result;

  events: {
    "LogVersionableActivated(uint48,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogVersionableActivated"): EventFragment;
}

export interface LogVersionableActivatedEventObject {
  version: number;
  implementation: string;
  activatedBy: string;
}
export type LogVersionableActivatedEvent = TypedEvent<
  [number, string, string],
  LogVersionableActivatedEventObject
>;

export type LogVersionableActivatedEventFilter =
  TypedEventFilter<LogVersionableActivatedEvent>;

export interface IVersionable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVersionableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IVersionable.VersionInfoStructOutput]>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[number]>;

    versionParts(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & { major: number; minor: number; patch: number }
    >;

    versions(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activate(
    implementation: PromiseOrValue<string>,
    activatedBy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVersion(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVersionInfo(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IVersionable.VersionInfoStructOutput>;

  isActivated(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<number>;

  versionParts(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & { major: number; minor: number; patch: number }
  >;

  versions(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IVersionable.VersionInfoStructOutput>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<number>;

    versionParts(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & { major: number; minor: number; patch: number }
    >;

    versions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogVersionableActivated(uint48,address,address)"(
      version?: null,
      implementation?: null,
      activatedBy?: null
    ): LogVersionableActivatedEventFilter;
    LogVersionableActivated(
      version?: null,
      implementation?: null,
      activatedBy?: null
    ): LogVersionableActivatedEventFilter;
  };

  estimateGas: {
    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    versionParts(overrides?: CallOverrides): Promise<BigNumber>;

    versions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionParts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
