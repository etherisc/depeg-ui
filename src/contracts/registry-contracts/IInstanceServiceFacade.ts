/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IInstanceServiceFacade {
  export type BundleStruct = {
    id: PromiseOrValue<BigNumberish>;
    riskpoolId: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    filter: PromiseOrValue<BytesLike>;
    capital: PromiseOrValue<BigNumberish>;
    lockedCapital: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type BundleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    riskpoolId: BigNumber;
    tokenId: BigNumber;
    state: number;
    filter: string;
    capital: BigNumber;
    lockedCapital: BigNumber;
    balance: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface IInstanceServiceFacadeInterface extends utils.Interface {
  functions: {
    "getBundle(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getComponentState(uint256)": FunctionFragment;
    "getComponentToken(uint256)": FunctionFragment;
    "getComponentType(uint256)": FunctionFragment;
    "getInstanceId()": FunctionFragment;
    "getInstanceOperator()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBundle"
      | "getChainId"
      | "getComponentState"
      | "getComponentToken"
      | "getComponentType"
      | "getInstanceId"
      | "getInstanceOperator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBundle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceOperator",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComponentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceOperator",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IInstanceServiceFacade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInstanceServiceFacadeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IInstanceServiceFacade.BundleStructOutput] & {
        bundle: IInstanceServiceFacade.BundleStructOutput;
      }
    >;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { componentState: number }>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { componentType: number }>;

    getInstanceId(
      overrides?: CallOverrides
    ): Promise<[string] & { instanceId: string }>;

    getInstanceOperator(
      overrides?: CallOverrides
    ): Promise<[string] & { instanceOperator: string }>;
  };

  getBundle(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IInstanceServiceFacade.BundleStructOutput>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getComponentState(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getComponentToken(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getComponentType(
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getInstanceId(overrides?: CallOverrides): Promise<string>;

  getInstanceOperator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IInstanceServiceFacade.BundleStructOutput>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getInstanceId(overrides?: CallOverrides): Promise<string>;

    getInstanceOperator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceId(overrides?: CallOverrides): Promise<BigNumber>;

    getInstanceOperator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBundle(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getComponentState(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentToken(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentType(
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInstanceOperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
