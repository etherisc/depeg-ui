/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IChainRegistry {
  export type NftInfoStruct = {
    id: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BytesLike>;
    objectType: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    uri: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    mintedIn: PromiseOrValue<BigNumberish>;
    updatedIn: PromiseOrValue<BigNumberish>;
    version: PromiseOrValue<BigNumberish>;
  };

  export type NftInfoStructOutput = [
    BigNumber,
    string,
    number,
    number,
    string,
    string,
    number,
    number,
    number
  ] & {
    id: BigNumber;
    chain: string;
    objectType: number;
    state: number;
    uri: string;
    data: string;
    mintedIn: number;
    updatedIn: number;
    version: number;
  };
}

export declare namespace IVersionable {
  export type VersionInfoStruct = {
    version: PromiseOrValue<BigNumberish>;
    implementation: PromiseOrValue<string>;
    activatedBy: PromiseOrValue<string>;
    activatedIn: PromiseOrValue<BigNumberish>;
    activatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VersionInfoStructOutput = [
    number,
    string,
    string,
    number,
    number
  ] & {
    version: number;
    implementation: string;
    activatedBy: string;
    activatedIn: number;
    activatedAt: number;
  };
}

export interface ChainRegistryV02Interface extends utils.Interface {
  functions: {
    "BASE_DID()": FunctionFragment;
    "BUNDLE()": FunctionFragment;
    "CHAIN()": FunctionFragment;
    "INSTANCE()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "POLICY()": FunctionFragment;
    "PRODUCT()": FunctionFragment;
    "PROTOCOL()": FunctionFragment;
    "REGISTRY()": FunctionFragment;
    "RISKPOOL()": FunctionFragment;
    "STAKE()": FunctionFragment;
    "TOKEN()": FunctionFragment;
    "UNDEFINED()": FunctionFragment;
    "activate(address,address)": FunctionFragment;
    "activateAndSetOwner(address,address,address)": FunctionFragment;
    "blockNumber()": FunctionFragment;
    "chains()": FunctionFragment;
    "decodeBundleData(uint96)": FunctionFragment;
    "decodeComponentData(uint96)": FunctionFragment;
    "decodeInstanceData(uint96)": FunctionFragment;
    "decodeRegistryData(uint96)": FunctionFragment;
    "decodeStakeData(uint96)": FunctionFragment;
    "decodeTokenData(uint96)": FunctionFragment;
    "exists(uint96)": FunctionFragment;
    "getBundleNftId(bytes32,uint256)": FunctionFragment;
    "getChainId(uint256)": FunctionFragment;
    "getChainNftId(bytes5)": FunctionFragment;
    "getComponentNftId(bytes32,uint256)": FunctionFragment;
    "getInstanceNftId(bytes32)": FunctionFragment;
    "getInstanceServiceFacade(bytes32)": FunctionFragment;
    "getNft()": FunctionFragment;
    "getNftId(bytes5,uint8,uint256)": FunctionFragment;
    "getNftInfo(uint96)": FunctionFragment;
    "getRegistryNftId(bytes5)": FunctionFragment;
    "getStaking()": FunctionFragment;
    "getTokenNftId(bytes5,address)": FunctionFragment;
    "getVersion(uint256)": FunctionFragment;
    "getVersionInfo(uint48)": FunctionFragment;
    "implementsIChainRegistry()": FunctionFragment;
    "intToBytes(uint256,uint8)": FunctionFragment;
    "isActivated(uint48)": FunctionFragment;
    "objects(bytes5,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint96)": FunctionFragment;
    "probeInstance(address)": FunctionFragment;
    "registerBundle(bytes32,uint256,uint256,string,uint256)": FunctionFragment;
    "registerChain(bytes5,string)": FunctionFragment;
    "registerComponent(bytes32,uint256,string)": FunctionFragment;
    "registerInstance(address,string,string)": FunctionFragment;
    "registerRegistry(bytes5,address,string)": FunctionFragment;
    "registerStake(uint96,address)": FunctionFragment;
    "registerToken(bytes5,address,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNftContract(address,address)": FunctionFragment;
    "setObjectState(uint96,uint8)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "toChain(uint256)": FunctionFragment;
    "toInt(bytes5)": FunctionFragment;
    "toInt(uint32)": FunctionFragment;
    "toInt(uint40)": FunctionFragment;
    "toObjectType(uint256)": FunctionFragment;
    "toString(bytes5)": FunctionFragment;
    "toString(address)": FunctionFragment;
    "toString(uint256)": FunctionFragment;
    "tokenDID(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
    "versionParts()": FunctionFragment;
    "versions()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_DID"
      | "BUNDLE"
      | "CHAIN"
      | "INSTANCE"
      | "ORACLE"
      | "POLICY"
      | "PRODUCT"
      | "PROTOCOL"
      | "REGISTRY"
      | "RISKPOOL"
      | "STAKE"
      | "TOKEN"
      | "UNDEFINED"
      | "activate"
      | "activateAndSetOwner"
      | "blockNumber"
      | "chains"
      | "decodeBundleData"
      | "decodeComponentData"
      | "decodeInstanceData"
      | "decodeRegistryData"
      | "decodeStakeData"
      | "decodeTokenData"
      | "exists"
      | "getBundleNftId"
      | "getChainId"
      | "getChainNftId"
      | "getComponentNftId"
      | "getInstanceNftId"
      | "getInstanceServiceFacade"
      | "getNft"
      | "getNftId"
      | "getNftInfo"
      | "getRegistryNftId"
      | "getStaking"
      | "getTokenNftId"
      | "getVersion"
      | "getVersionInfo"
      | "implementsIChainRegistry"
      | "intToBytes"
      | "isActivated"
      | "objects"
      | "owner"
      | "ownerOf"
      | "probeInstance"
      | "registerBundle"
      | "registerChain"
      | "registerComponent"
      | "registerInstance"
      | "registerRegistry"
      | "registerStake"
      | "registerToken"
      | "renounceOwnership"
      | "setNftContract"
      | "setObjectState"
      | "setStaking"
      | "toChain"
      | "toInt(bytes5)"
      | "toInt(uint32)"
      | "toInt(uint40)"
      | "toObjectType"
      | "toString(bytes5)"
      | "toString(address)"
      | "toString(uint256)"
      | "tokenDID"
      | "transferOwnership"
      | "version"
      | "versionParts"
      | "versions"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BASE_DID", values?: undefined): string;
  encodeFunctionData(functionFragment: "BUNDLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "CHAIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "INSTANCE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "POLICY", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRODUCT", values?: undefined): string;
  encodeFunctionData(functionFragment: "PROTOCOL", values?: undefined): string;
  encodeFunctionData(functionFragment: "REGISTRY", values?: undefined): string;
  encodeFunctionData(functionFragment: "RISKPOOL", values?: undefined): string;
  encodeFunctionData(functionFragment: "STAKE", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNDEFINED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "activateAndSetOwner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chains", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeBundleData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeComponentData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeInstanceData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeRegistryData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeStakeData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTokenData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBundleNftId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainNftId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentNftId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceNftId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstanceServiceFacade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getNft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNftId",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistryNftId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenNftId",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementsIChainRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intToBytes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActivated",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "objects",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "probeInstance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBundle",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerChain",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponent",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRegistry",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNftContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setObjectState",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toChain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt(bytes5)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt(uint40)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toObjectType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(bytes5)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "versionParts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "versions", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BASE_DID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BUNDLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CHAIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INSTANCE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "POLICY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRODUCT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PROTOCOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REGISTRY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RISKPOOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STAKE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNDEFINED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateAndSetOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeBundleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeComponentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeInstanceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeRegistryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeStakeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBundleNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstanceServiceFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNftId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNftInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegistryNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVersionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementsIChainRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intToBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "objects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "probeInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setObjectState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toInt(bytes5)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toInt(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toInt(uint40)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toObjectType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(bytes5)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenDID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionParts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versions", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LogChainRegistryObjectRegistered(uint96,bytes5,uint8,uint8,address)": EventFragment;
    "LogChainRegistryObjectStateSet(uint96,uint8,uint8,address)": EventFragment;
    "LogVersionableActivated(uint48,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogChainRegistryObjectRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogChainRegistryObjectStateSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVersionableActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LogChainRegistryObjectRegisteredEventObject {
  id: BigNumber;
  chain: string;
  objectType: number;
  state: number;
  to: string;
}
export type LogChainRegistryObjectRegisteredEvent = TypedEvent<
  [BigNumber, string, number, number, string],
  LogChainRegistryObjectRegisteredEventObject
>;

export type LogChainRegistryObjectRegisteredEventFilter =
  TypedEventFilter<LogChainRegistryObjectRegisteredEvent>;

export interface LogChainRegistryObjectStateSetEventObject {
  id: BigNumber;
  stateNew: number;
  stateOld: number;
  setBy: string;
}
export type LogChainRegistryObjectStateSetEvent = TypedEvent<
  [BigNumber, number, number, string],
  LogChainRegistryObjectStateSetEventObject
>;

export type LogChainRegistryObjectStateSetEventFilter =
  TypedEventFilter<LogChainRegistryObjectStateSetEvent>;

export interface LogVersionableActivatedEventObject {
  version: number;
  implementation: string;
  activatedBy: string;
}
export type LogVersionableActivatedEvent = TypedEvent<
  [number, string, string],
  LogVersionableActivatedEventObject
>;

export type LogVersionableActivatedEventFilter =
  TypedEventFilter<LogVersionableActivatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ChainRegistryV02 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainRegistryV02Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_DID(overrides?: CallOverrides): Promise<[string]>;

    BUNDLE(overrides?: CallOverrides): Promise<[number]>;

    CHAIN(overrides?: CallOverrides): Promise<[number]>;

    INSTANCE(overrides?: CallOverrides): Promise<[number]>;

    ORACLE(overrides?: CallOverrides): Promise<[number]>;

    POLICY(overrides?: CallOverrides): Promise<[number]>;

    PRODUCT(overrides?: CallOverrides): Promise<[number]>;

    PROTOCOL(overrides?: CallOverrides): Promise<[number]>;

    REGISTRY(overrides?: CallOverrides): Promise<[number]>;

    RISKPOOL(overrides?: CallOverrides): Promise<[number]>;

    STAKE(overrides?: CallOverrides): Promise<[number]>;

    TOKEN(overrides?: CallOverrides): Promise<[number]>;

    UNDEFINED(overrides?: CallOverrides): Promise<[number]>;

    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateAndSetOwner(
      implementation: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockNumber(overrides?: CallOverrides): Promise<[number]>;

    chains(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfChains: BigNumber }>;

    decodeBundleData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string, BigNumber] & {
        instanceId: string;
        riskpoolId: BigNumber;
        bundleId: BigNumber;
        token: string;
        displayName: string;
        expiryAt: BigNumber;
      }
    >;

    decodeComponentData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        instanceId: string;
        componentId: BigNumber;
        token: string;
      }
    >;

    decodeInstanceData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        instanceId: string;
        registry: string;
        displayName: string;
      }
    >;

    decodeRegistryData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { registry: string }>;

    decodeStakeData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { target: BigNumber; targetType: number }>;

    decodeTokenData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBundleNftId(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getChainId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { chain: string }>;

    getChainNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getComponentNftId(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getInstanceNftId(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getInstanceServiceFacade(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { instanceService: string }>;

    getNft(overrides?: CallOverrides): Promise<[string] & { nft: string }>;

    getNftId(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getNftInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IChainRegistry.NftInfoStructOutput]>;

    getRegistryNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getStaking(
      overrides?: CallOverrides
    ): Promise<[string] & { staking: string }>;

    getTokenNftId(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IVersionable.VersionInfoStructOutput]>;

    implementsIChainRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    intToBytes(
      x: PromiseOrValue<BigNumberish>,
      shift: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    objects(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfObjects: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { nftOwner: string }>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, string, boolean, string] & {
        isContract: boolean;
        contractSize: BigNumber;
        chain: string;
        instanceId: string;
        isValidId: boolean;
        instanceService: string;
      }
    >;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      displayName: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerChain(
      chain: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerInstance(
      instanceRegistry: PromiseOrValue<string>,
      displayName: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRegistry(
      chain: PromiseOrValue<BytesLike>,
      registry: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerStake(
      target: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerToken(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftContract(
      nft: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setObjectState(
      id: PromiseOrValue<BigNumberish>,
      stateNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toChain(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "toInt(bytes5)"(
      x: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "toInt(uint32)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "toInt(uint40)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toObjectType(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "toString(bytes5)"(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "toString(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "toString(uint256)"(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenDID(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;

    versionParts(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & { major: number; minor: number; patch: number }
    >;

    versions(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BASE_DID(overrides?: CallOverrides): Promise<string>;

  BUNDLE(overrides?: CallOverrides): Promise<number>;

  CHAIN(overrides?: CallOverrides): Promise<number>;

  INSTANCE(overrides?: CallOverrides): Promise<number>;

  ORACLE(overrides?: CallOverrides): Promise<number>;

  POLICY(overrides?: CallOverrides): Promise<number>;

  PRODUCT(overrides?: CallOverrides): Promise<number>;

  PROTOCOL(overrides?: CallOverrides): Promise<number>;

  REGISTRY(overrides?: CallOverrides): Promise<number>;

  RISKPOOL(overrides?: CallOverrides): Promise<number>;

  STAKE(overrides?: CallOverrides): Promise<number>;

  TOKEN(overrides?: CallOverrides): Promise<number>;

  UNDEFINED(overrides?: CallOverrides): Promise<number>;

  activate(
    implementation: PromiseOrValue<string>,
    activatedBy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateAndSetOwner(
    implementation: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    activatedBy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockNumber(overrides?: CallOverrides): Promise<number>;

  chains(overrides?: CallOverrides): Promise<BigNumber>;

  decodeBundleData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, string, BigNumber] & {
      instanceId: string;
      riskpoolId: BigNumber;
      bundleId: BigNumber;
      token: string;
      displayName: string;
      expiryAt: BigNumber;
    }
  >;

  decodeComponentData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      instanceId: string;
      componentId: BigNumber;
      token: string;
    }
  >;

  decodeInstanceData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      instanceId: string;
      registry: string;
      displayName: string;
    }
  >;

  decodeRegistryData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  decodeStakeData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { target: BigNumber; targetType: number }>;

  decodeTokenData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  exists(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBundleNftId(
    instanceId: PromiseOrValue<BytesLike>,
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainId(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainNftId(
    chain: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getComponentNftId(
    instanceId: PromiseOrValue<BytesLike>,
    componentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInstanceNftId(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInstanceServiceFacade(
    instanceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNft(overrides?: CallOverrides): Promise<string>;

  getNftId(
    chain: PromiseOrValue<BytesLike>,
    t: PromiseOrValue<BigNumberish>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNftInfo(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IChainRegistry.NftInfoStructOutput>;

  getRegistryNftId(
    chain: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStaking(overrides?: CallOverrides): Promise<string>;

  getTokenNftId(
    chain: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersion(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVersionInfo(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IVersionable.VersionInfoStructOutput>;

  implementsIChainRegistry(overrides?: CallOverrides): Promise<boolean>;

  intToBytes(
    x: PromiseOrValue<BigNumberish>,
    shift: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isActivated(
    _version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  objects(
    chain: PromiseOrValue<BytesLike>,
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  probeInstance(
    registryAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, string, boolean, string] & {
      isContract: boolean;
      contractSize: BigNumber;
      chain: string;
      instanceId: string;
      isValidId: boolean;
      instanceService: string;
    }
  >;

  registerBundle(
    instanceId: PromiseOrValue<BytesLike>,
    riskpoolId: PromiseOrValue<BigNumberish>,
    bundleId: PromiseOrValue<BigNumberish>,
    displayName: PromiseOrValue<string>,
    expiryAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerChain(
    chain: PromiseOrValue<BytesLike>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerComponent(
    instanceId: PromiseOrValue<BytesLike>,
    componentId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerInstance(
    instanceRegistry: PromiseOrValue<string>,
    displayName: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRegistry(
    chain: PromiseOrValue<BytesLike>,
    registry: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerStake(
    target: PromiseOrValue<BigNumberish>,
    staker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerToken(
    chain: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftContract(
    nft: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setObjectState(
    id: PromiseOrValue<BigNumberish>,
    stateNew: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    stakingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toChain(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "toInt(bytes5)"(
    x: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toInt(uint32)"(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toInt(uint40)"(
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toObjectType(
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  "toString(bytes5)"(
    chain: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "toString(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "toString(uint256)"(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenDID(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  versionParts(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & { major: number; minor: number; patch: number }
  >;

  versions(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BASE_DID(overrides?: CallOverrides): Promise<string>;

    BUNDLE(overrides?: CallOverrides): Promise<number>;

    CHAIN(overrides?: CallOverrides): Promise<number>;

    INSTANCE(overrides?: CallOverrides): Promise<number>;

    ORACLE(overrides?: CallOverrides): Promise<number>;

    POLICY(overrides?: CallOverrides): Promise<number>;

    PRODUCT(overrides?: CallOverrides): Promise<number>;

    PROTOCOL(overrides?: CallOverrides): Promise<number>;

    REGISTRY(overrides?: CallOverrides): Promise<number>;

    RISKPOOL(overrides?: CallOverrides): Promise<number>;

    STAKE(overrides?: CallOverrides): Promise<number>;

    TOKEN(overrides?: CallOverrides): Promise<number>;

    UNDEFINED(overrides?: CallOverrides): Promise<number>;

    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    activateAndSetOwner(
      implementation: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    blockNumber(overrides?: CallOverrides): Promise<number>;

    chains(overrides?: CallOverrides): Promise<BigNumber>;

    decodeBundleData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string, BigNumber] & {
        instanceId: string;
        riskpoolId: BigNumber;
        bundleId: BigNumber;
        token: string;
        displayName: string;
        expiryAt: BigNumber;
      }
    >;

    decodeComponentData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        instanceId: string;
        componentId: BigNumber;
        token: string;
      }
    >;

    decodeInstanceData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        instanceId: string;
        registry: string;
        displayName: string;
      }
    >;

    decodeRegistryData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    decodeStakeData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { target: BigNumber; targetType: number }>;

    decodeTokenData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBundleNftId(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentNftId(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceNftId(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceServiceFacade(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNft(overrides?: CallOverrides): Promise<string>;

    getNftId(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IChainRegistry.NftInfoStructOutput>;

    getRegistryNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStaking(overrides?: CallOverrides): Promise<string>;

    getTokenNftId(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IVersionable.VersionInfoStructOutput>;

    implementsIChainRegistry(overrides?: CallOverrides): Promise<boolean>;

    intToBytes(
      x: PromiseOrValue<BigNumberish>,
      shift: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    objects(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, string, boolean, string] & {
        isContract: boolean;
        contractSize: BigNumber;
        chain: string;
        instanceId: string;
        isValidId: boolean;
        instanceService: string;
      }
    >;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      displayName: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerChain(
      chain: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerInstance(
      instanceRegistry: PromiseOrValue<string>,
      displayName: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRegistry(
      chain: PromiseOrValue<BytesLike>,
      registry: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerStake(
      target: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerToken(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNftContract(
      nft: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setObjectState(
      id: PromiseOrValue<BigNumberish>,
      stateNew: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaking(
      stakingAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toChain(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "toInt(bytes5)"(
      x: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toInt(uint32)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toInt(uint40)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toObjectType(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "toString(bytes5)"(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "toString(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "toString(uint256)"(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenDID(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;

    versionParts(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & { major: number; minor: number; patch: number }
    >;

    versions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LogChainRegistryObjectRegistered(uint96,bytes5,uint8,uint8,address)"(
      id?: null,
      chain?: null,
      objectType?: null,
      state?: null,
      to?: null
    ): LogChainRegistryObjectRegisteredEventFilter;
    LogChainRegistryObjectRegistered(
      id?: null,
      chain?: null,
      objectType?: null,
      state?: null,
      to?: null
    ): LogChainRegistryObjectRegisteredEventFilter;

    "LogChainRegistryObjectStateSet(uint96,uint8,uint8,address)"(
      id?: null,
      stateNew?: null,
      stateOld?: null,
      setBy?: null
    ): LogChainRegistryObjectStateSetEventFilter;
    LogChainRegistryObjectStateSet(
      id?: null,
      stateNew?: null,
      stateOld?: null,
      setBy?: null
    ): LogChainRegistryObjectStateSetEventFilter;

    "LogVersionableActivated(uint48,address,address)"(
      version?: null,
      implementation?: null,
      activatedBy?: null
    ): LogVersionableActivatedEventFilter;
    LogVersionableActivated(
      version?: null,
      implementation?: null,
      activatedBy?: null
    ): LogVersionableActivatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BASE_DID(overrides?: CallOverrides): Promise<BigNumber>;

    BUNDLE(overrides?: CallOverrides): Promise<BigNumber>;

    CHAIN(overrides?: CallOverrides): Promise<BigNumber>;

    INSTANCE(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY(overrides?: CallOverrides): Promise<BigNumber>;

    PRODUCT(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    RISKPOOL(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    UNDEFINED(overrides?: CallOverrides): Promise<BigNumber>;

    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateAndSetOwner(
      implementation: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    chains(overrides?: CallOverrides): Promise<BigNumber>;

    decodeBundleData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeComponentData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeInstanceData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeRegistryData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeStakeData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTokenData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBundleNftId(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentNftId(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceNftId(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstanceServiceFacade(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNft(overrides?: CallOverrides): Promise<BigNumber>;

    getNftId(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistryNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStaking(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenNftId(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementsIChainRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    intToBytes(
      x: PromiseOrValue<BigNumberish>,
      shift: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    objects(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      displayName: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerChain(
      chain: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerInstance(
      instanceRegistry: PromiseOrValue<string>,
      displayName: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRegistry(
      chain: PromiseOrValue<BytesLike>,
      registry: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerStake(
      target: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerToken(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftContract(
      nft: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setObjectState(
      id: PromiseOrValue<BigNumberish>,
      stateNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStaking(
      stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toChain(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toInt(bytes5)"(
      x: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toInt(uint32)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toInt(uint40)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toObjectType(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(bytes5)"(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(uint256)"(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenDID(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    versionParts(overrides?: CallOverrides): Promise<BigNumber>;

    versions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_DID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BUNDLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CHAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INSTANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLICY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRODUCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RISKPOOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDEFINED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activate(
      implementation: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateAndSetOwner(
      implementation: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      activatedBy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeBundleData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeComponentData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeInstanceData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeRegistryData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeStakeData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeTokenData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBundleNftId(
      instanceId: PromiseOrValue<BytesLike>,
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentNftId(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceNftId(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstanceServiceFacade(
      instanceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftId(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistryNftId(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenNftId(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionInfo(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementsIChainRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    intToBytes(
      x: PromiseOrValue<BigNumberish>,
      shift: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActivated(
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    objects(
      chain: PromiseOrValue<BytesLike>,
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    probeInstance(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerBundle(
      instanceId: PromiseOrValue<BytesLike>,
      riskpoolId: PromiseOrValue<BigNumberish>,
      bundleId: PromiseOrValue<BigNumberish>,
      displayName: PromiseOrValue<string>,
      expiryAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerChain(
      chain: PromiseOrValue<BytesLike>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerComponent(
      instanceId: PromiseOrValue<BytesLike>,
      componentId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerInstance(
      instanceRegistry: PromiseOrValue<string>,
      displayName: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRegistry(
      chain: PromiseOrValue<BytesLike>,
      registry: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerStake(
      target: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerToken(
      chain: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftContract(
      nft: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setObjectState(
      id: PromiseOrValue<BigNumberish>,
      stateNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toChain(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toInt(bytes5)"(
      x: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toInt(uint32)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toInt(uint40)"(
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toObjectType(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(bytes5)"(
      chain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(uint256)"(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenDID(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionParts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
